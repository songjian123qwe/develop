/**
 * Created by wanghongxiang on 2018/5/8.
 * 部门信息
 */
import React, {Component} from 'react';

import 'src/hrpub/common/static/fonts/iconfont.css';
import HRDeptQueryAction from "../functions/HRDeptQueryAction";
import HRDeptQueryOneAction from "../functions/HRDeptQueryOneAction";
import DeptStrVerModal from "../components/deptStrVerModal";
import DeptVerModal from "../components/deptVerModal";
import CopyModal from "../components/copyModal";

import "./index.less";
import {snCreateUIDom, handleHash, getAppPageConfig} from 'src/hrpub/common/utils/utils'
import ReferSearch from 'src/hrpub/common/components/referSearch/org'
import MergeModal from "../components/mergeModal";
import QueryPostModal from "../components/queryPostModal";
import QueryPsnModal from "../components/queryPsnModal";
import RenameModal from "../components/renameModal";
import StopDeptModal from "../components/stopDeptModal";
import UncancelDeptModal from "../components/uncancelDeptModal";
import ShiftDeptModal from "../components/shiftDeptModal";
import OuterShiftDeptModal from "../components/outershiftDeptModal";

import HRDeptAddAction from "../functions/HRDeptAddAction"
import HRDeptSaveAction from "../functions/HRDeptSaveAction"
import HRDeptDeleteAction from "../functions/HRDeptDeleteAction"
import HRDeptQueryVNOAction from "../functions/HRDeptQueryVNOAction";
import QueryPersonAction from "../functions/QueryPersonAction";
import QueryPostAction from "../functions/QueryPostAction";
import HRDeptStruLastVerQueryAction from "../functions/HRDeptStruLastVerQueryAction";
import RenameDeptAction from "../functions/RenameDeptAction";
import RenameDeptExecAction from "../functions/RenameDeptExecAction";
import HRDeptCancelAction from "../functions/HRDeptCancelAction";
import HRDeptEditAction from "../functions/HRDeptEditAction";
import HRCancelAction from "../functions/HRCancelAction";
import HRUnCancelAction from "../functions/HRUnCancelAction";
import UserManagerAction from "../functions/UserManagerAction";
import AddCondition, {addPkorgRefer} from "../../../public/functions/addCondition"

import EmptyImg from "src/hrpub/common/components/emptyImg";

import {
    getBusinessInfo,
    high,
    createPage,
    ajax,
    base,
    getUrlParam,
    promptBox,
    cardCache,
    toast,
    output,
    print,
    deepClone,
    getLangCode
} from 'nc-lightapp-front';
import VersionInfoModal from "../components/versionInfoModal";
import OrgUnitCardVersionQueryAction from "../functions/OrgUnitCardVersionQueryAction";
import {formatDisplayOrder, saveValidate} from "../../../public/functions/orgtools";
import MergeDeptAction from "../functions/MergeDeptAction";
import ShiftDeptAction from "../functions/ShiftDeptAction";
import NCBackBtn from 'src/hrpub/common/components/hr-back';
import tableRowAddLink from "../../../public/functions/tableRowAddLink";
import {COMMON} from "../common/common";
import {createBillinfoPage} from "../../../public/functions/createBillinfoPage";

const {NCCheckbox, NCButton} = base;
const {NCUploader} = high;

const buttonGroup = 'list';
const formId = 'hrdept';
const treeId = 'leftTree';
const searchId = 'deptquery';
const changeTable = 'depthistory';
const magegerTable = 'deptmanager';

// 缓存数据配置
const {setDefData} = cardCache;
const cacheConfig = {
    treeData: 'hrjf.hrdept.leftTree'
};

let pageidObj = {};

class JobGrade extends Component {
    constructor(props) {
        super(props);
        this.props = props;
        this.allRefPk = [];
        this.autoGeneratedCode = null; // 自动生成码
        this.pk_dept = ''; // 选择的pk_dept
        this.pk_org = ''; // 选择的pk_org
        this.billNo = ''; // 选择的编码
        this.chooseTableId = null; //当前选择的tableId
        // 编辑页面选择的行
        this.selectedManagerRow = {
            row: null,
            index: null
        };
        // 复制页面选择的行
        this.copyManagerRow = {
            row: null,
            index: null
        };
        this.state = {
            json: {},
            codePrefix: '',                         // 编码前缀,
            namePrefix: '',                         // 名称前缀,
            hrDeptTreeRef: '',                      // 人力资源部门参照
            queryActionPkorg: '',                   // 查询节点数的数据的 主组织
            enablestate: false,                     // 是否包含撤销  false：不包含
            newAddPageFlag: false,                  // 新增    true: 新增;    false: 非新增
            editPageFlag: false,                    // 页面编辑态    true: 编辑状态;    false: 非编辑状态
            copyModalVisible: false,                // 复制弹窗    true: 显示;    false: 隐藏
            renameModalVisible: false,              // 部门更名弹窗    true: 显示;    false: 隐藏
            stopDeptModalVisible: false,            // 撤销弹窗    true: 显示;    false: 隐藏
            uncancelDeptModalVisible: false,        // 取消撤销弹窗    true: 显示;    false: 隐藏
            shiftDeptModalVisible: false,           // 组织内转移    true: 显示;    false: 隐藏
            outerShiftDeptModalVisible: false,      // 跨组织内转移    true: 显示;    false: 隐藏
            mergeModalVisible: false,               // 合并弹窗    true: 显示;    false: 隐藏
            queryPostModalVisible: false,           // 联查岗位弹窗    true: 显示;    false: 隐藏
            queryPsnModalVisible: false,            // 联查人员弹窗    true: 显示;    false: 隐藏
            fileModalVisible: false,                // 附件管理弹窗    true: 显示;    false: 隐藏
            deptStrVerModalVisible: false,          // 部门结构版本化弹窗    true: 显示;    false: 隐藏
            deptVerModalVisible: false,             // 部门版本化弹窗    true: 显示;    false: 隐藏
            versionInfoModalVisible: false,         // 部门版本化详细信息弹窗    true: 显示;    false: 隐藏
            orginfoTypeTabsArr: [],                 // 部门版本化详细信息弹窗 tabs
            gridrelationTable: [],                  // 部门右表 详情页子集 tabs

            // 查询模板参数
            searchModalValue: {"querycondition": {"logic": "and", "conditions": []}, "querytype": "tree"},
            currentSelectDepartment: '',
            humanResourceOrganizationValue: {},
            queryOid: '',
            include_child_depts: false,
            include_child_orgs: false,

            // 附件管理
            groupLists: [],                         // 上传list

            // Tab 选择
            managerCopyFlag: {},                    // 是否可复制 0：未选择； 1：已选择，可复制； 2已复制，可粘贴。

            templatePageId: null, //模板pageid
        };
    }

    /**
     * 查询主组织 节点信息
     */
    searchChange(val) {
        if (!this.state.queryOid) {
            this.setState({
                hrDeptTreeRef: null
            });
            return
        }
        /* 国际化处理： 人力资源组织变化 val = */
        this.setState({
            hrDeptTreeRef: val,
            pk_org: val.refpk
        });
        this.state.queryActionPkorg = val.refpk;
        // 给所有的参照添加 pk_org
        let meta = this.props.meta.getMeta();
        addPkorgRefer(this.props, {"pk_org": val.refpk});
        // 设置查询模板的 querycondition
        AddCondition(meta[searchId], {"pk_org": val.refpk});
        // 部门主管 人员 添加请求条件
        // getBusinessInfo() 在测试坏境用， 本地用测试代码：{groupId:'0001HR100000000005M3'}
        let businessInfo = getBusinessInfo() || {groupId: '0001HR100000000005M3'};
        AddCondition(meta[magegerTable], {
            pk_group: businessInfo.groupId,
            pk_org: "GLOBLE00000000000000",
            GridRefActionExt: 'nccloud.web.hrjf.hrdept.sqlbuilder.UserManagerSQLBuilder',
            isIncludeDummyDept: true
        }, 'pk_psndoc');

        this.props.meta.setMeta(meta, () => {
            meta = null;
            businessInfo = null;
        });
        this.HRDeptQueryAction()
    }

    /**
     * 添加条件
     * @param pk_org
     */
    addPkOrgCondition(pk_org) {
        // 给所有的参照添加 pk_org
        addPkorgRefer(this.props, {pk_org});
    }

    /**
     * 返回按钮 编辑态
     */
    backButtonClick() {
        if (this.state.newAddPageFlag) {
            this.cancleEdit();
            return
        }
        this.HRDeptQueryOneAction();
        this.baseBrowseState();
    }

    /**
     * 是否包含撤销
     * @param val
     */
    onCheckShowDisable(val) {

        /* 国际化处理： 是否包含撤销 = */
        this.setState({
            enablestate: val
        }, () => {
            this.HRDeptQueryAction()
        })
    }

    /**
     * 用户列表 头部 button点击事件
     * @param prop
     * @param btncode
     * @param areacode
     * @param opt
     */
    onButtonClick(prop, btncode, areacode, opt) {
        if (areacode === buttonGroup) {
            let pk_dept = this.pk_dept;
            let pk_org = this.pk_org;
            switch (btncode) {
                case 'copy':
                    // 复制
                    this.updateState({
                        copyModalVisible: true
                    });
                    break;
                case 'query':
                    // 点击查询按钮
                    this.props.search.openAdvSearch(searchId, true);
                    break;
                case 'change':
                    // 部门变更
                    break;
                case 'change_grp':
                    //

                    break;
                case 'rename':
                    // 更名
                    this.updateState({
                        renameModalVisible: true
                    }, () => {
                        RenameDeptAction.call(this, pk_dept, pk_org);
                    });
                    break;
                case 'merge':

                    // 合并
                    this.updateState({
                        mergeModalVisible: true
                    }, () => {
                        MergeDeptAction.call(this, pk_dept);
                    });
                    break;
                case 'stop':
                    // 撤销
                    this.updateState({
                        stopDeptModalVisible: true
                    }, () => {
                        HRCancelAction.call(this, pk_dept, pk_org);
                    });
                    break;
                case 'uncancel':
                    this.updateState({
                        uncancelDeptModalVisible: true
                    }, () => {
                        // 取消撤销
                        HRUnCancelAction.call(this, pk_dept, pk_org);
                    });
                    break;
                case 'shift':
                    this.updateState({
                        shiftDeptModalVisible: true
                    }, () => {
                        // 组织内转移
                        ShiftDeptAction(pk_dept, pk_org).then(res => {
                            this.props.form.setFormStatus('deptshift', 'edit');
                            let formData = {
                                deptshift: {
                                    rows: []
                                }
                            };
                            if (res.data) {
                                formData.deptshift.rows = res.data.deptshift.rows;
                                let values = res.data.deptshift.rows[0].values;
                                if (values) {
                                    this.props.form.setFormItemsRequired('deptshift', {'vName': values.newVer.value})
                                }
                            }
                            this.props.form.setAllFormValue(formData);
                        });
                    });
                    break;
                case 'outershift':
                    // 跨组织转移
                    this.updateState({
                        outerShiftDeptModalVisible: true
                    }, () => {
                        this.outerShiftDeptModal.outerShiftDeptAction(pk_org);
                    });
                    break;
                case 'version':
                    // 组织版本化
                    break;
                case 'structversion':
                    // 部门结构版本化
                    this.updateState({
                        deptStrVerModalVisible: true
                    }, () => {
                        HRDeptStruLastVerQueryAction.call(this, pk_org);
                    });
                    break;
                case 'deptversion':
                    // 部门版本化
                    this.updateState({
                        deptVerModalVisible: true
                    }, () => {
                        HRDeptQueryVNOAction.call(this, pk_dept);
                    });
                    break;
                case 'more':
                    // 更多
                    break;
                case 'query-link':
                    // 联查
                    break;
                case 'querypost':
                    // 联查岗位
                    this.updateState({
                        queryPostModalVisible: true
                    }, () => {
                        QueryPostAction.call(this, pk_dept, pk_org);
                    });
                    break;
                case 'querypsn':
                    // 联查人员
                    this.updateState({
                        queryPsnModalVisible: true
                    }, () => {
                        QueryPersonAction.call(this, pk_dept, pk_org);
                    });
                    break;
                case 'file-link':
                    // 附件
                    break;
                case 'file':
                    // 附件
                    this.updateState({
                        showUploader: true
                    });
                    break;
                case 'print-link':
                    // 打印
                    break;
                case 'print':
                    let printOids = [this.pk_dept];
                    print(
                        'pdf',
                        // 修改url
                        '/nccloud/hrjf/hrdept/HRDeptPrintAction.do',
                        {
                            funcode: '60051030',
                            nodekey: 'deptinfo',
                            oids: printOids
                        }
                    );
                    break;
                case 'output':
                    // 点击输出按钮
                    let outputOids = [this.pk_dept];
                    output({
                        url: '/nccloud/hrjf/hrdept/HRDeptPrintAction.do',
                        data: {
                            funcode: '60051030',      //功能节点编码，即模板编码
                            nodekey: 'deptinfo',     //模板节点标识
                            oids: outputOids,    // 功能节点的数据主键  oids含有多个元素(['1001A41000000000A9LR','1001A410000000009JDD'])时为批量打印
                            outputType: 'output',
                            filename: this.state.json['jf6005-000329'] // 输出文件名
                        },
                        callback: function () {

                        }
                    });
                    break;
                case 'refresh':
                    // 点击刷新按钮
                    this.refresh();
                    break;
                default:
                    break;
            }
        }
    }

    refresh() {
        this.HRDeptQueryAction();
    }

    /**
     * 点击树节点
     * @param refpk
     */
    onSelectTree(refpk, item, isChange, node) {
        // 设置pk_org，pk_dept
        this.setTreeOrgDept(item);

        //编辑态  树节点操作无效  应该提供一个接口，编辑态任何操作都不能动
        let status = this.props.form.getFormStatus(formId);
        if (status === 'edit') {
            return;
        }
        // 清空表单
        if (refpk === '~') {
            this.emptyRightData();
            this.props.button.setButtonDisabled({Print: true, Output: true});
            return;
        }
        /********************************
         * ajax 请求选择的树节点数据
         ********************************/
        this.HRDeptQueryOneAction();
        this.addPkOrgCondition(this.pk_org);
    }

    setTreeOrgDept(nodeData) {
        let item = nodeData;
        let nodeVal = item.nodeData && item.nodeData.nodeValue || {};
        // 是否含有pk_dept
        if (nodeVal.hasOwnProperty('pk_dept')) {
            this.pk_dept = nodeVal.pk_dept;
            // 设置按钮状态
            this.setBtnDisSta({
                copy: false,              //复制
                rename: false,            //更名
                merge: false,             //合并
                stop: false,              //撤销
                uncancel: false,          //取消撤销
                shift: false,             //组织内转移
                outershift: false,        //跨组织转移
                structversion: false,     //部门结构版本化
                deptversion: false,       //部门版本化
                querypost: false,         //联查岗位
                querypsn: false,          //联查人员
                file: false,              // 附件
                print: false,             // 打印
                output: false             // 输出
            });
        } else {
            this.pk_dept = null;
            // 设置按钮禁用状态
            this.setBtnDisSta({
                copy: false,              //复制
                rename: true,             //更名
                merge: false,             //合并
                stop: true,               //撤销
                uncancel: true,           //取消撤销
                shift: true,              //组织内转移
                outershift: false,        //跨组织转移
                structversion: false,     //部门结构版本化
                deptversion: true,        //部门版本化
                querypost: true,          //联查岗位
                querypsn: true,           //联查人员
                file: true,               // 附件
                print: true,             // 打印
                output: true             // 输出
            });
        }
        // 根据是否撤销标志 设置更名按钮禁用状态
        let hrcanceledFlag = (nodeVal && nodeVal.hrcanceled) || false;
        this.setBtnDisSta({
            rename: hrcanceledFlag
        });
        this.pk_org = nodeVal.hasOwnProperty('pk_org') ? nodeVal.pk_org : null;
    }

    /********************************
     * ajax 请求选择的树节点数据
     ********************************/
    HRDeptQueryOneAction(cb) {
        HRDeptQueryOneAction(this.pk_dept)
            .then(res => {
                if (!res.success || !res.data) {
                    // 清空refpk
                    this.refpk = null;
                    //清空表单
                    this.emptyRightData();
                    return
                }

                if (cb && typeof cb === 'function') {
                    cb(res);
                }
                if (res.data.hasOwnProperty('isCodeEditable')) {
                    // 设置编码的可编辑性
                    this.props.form.setFormItemsDisabled(formId, {code: !res.data.isCodeEditable});
                }
                //清空表单
                this.emptyRightData();
                //表单数据
                let headData = res.data.head[formId].rows[0].values;
                // 格式化 显示顺序
                formatDisplayOrder(headData, true);

                // 设置billNo  附件用
                if (headData.hasOwnProperty('code')) {
                    this.billNo = headData.code.value
                }
                //设置表单为所选树节点数据
                let formData = {};
                formData[formId] = res.data.head[formId];

                // 是否有修改名称 决定是否修改左树名称
                let chooseNode = this.props.syncTree.getSelectNode('leftTree');
                let currentLangSeq = this.state.context.currentLangSeq;
                let langName = currentLangSeq === "1" ? "" : currentLangSeq;
                let deptname = formData[formId].rows[0].values["name" + langName].value;
                if(!deptname){
                    deptname = formData[formId].rows[0].values["name"].value;
                }
                if (chooseNode.refname !== deptname) {
                    chooseNode.refname = deptname;
                    this.props.syncTree.editNodeSuccess('leftTree', chooseNode);
                }
                this.props.form.setAllFormValue(formData);
                //设置表单项enablestate可用
                this.props.form.setFormItemsDisabled(formId, {enablestate: false});
                this.props.button.setButtonDisabled({Print: false, Output: false});
                // 新增时 显示批准文号批准单位  非新增时不显示
                this.props.form.setFormItemsVisible(formId, {approvenum: false});
                this.props.form.setFormItemsVisible(formId, {approvedept: false});

                let bodys = res.data.bodys;
                this.state.gridrelationTable.forEach(item => {
                    let tableId = item.code;
                    let tableData = {rows: []};
                    if (bodys.hasOwnProperty(tableId)) {
                        tableData = bodys[tableId];
                        if (tableId === magegerTable) {
                            // 部门主管 责任人 不能编辑
                            tableData.rows.map(item => {
                                let values = item.values;
                                if (values.hasOwnProperty('principalflag')) {
                                    let flag = values.principalflag.value;
                                    if (flag) {
                                        for (let key in values) {
                                            values[key].disabled = 'on';
                                        }
                                    }
                                    flag = null;
                                }
                                values = null;
                            })
                        }
                    }
                    this.props.cardTable.setTableData(tableId, tableData);
                });

                //    是否撤销
                let hrcanceled = res.data.head[formId].rows[0].values.hrcanceled.value;
                // 设置按钮状态
                this.setBtnDisSta({
                    stop: hrcanceled,              //撤销
                    uncancel: !hrcanceled,          //取消撤销
                }, () => {
                    headData = null;
                    formData = null;
                    depthistory = null;
                    hrcanceled = null;
                });
            })
            .catch(reason => {
                this.emptyRightData();
            })
    }

    /**
     * 左边导航栏点击编辑icon
     */
    onEditTreeClick(data) {
        let nodeVal = data.nodeData && data.nodeData.nodeValue || {};
        let pk_dept = nodeVal.hasOwnProperty('pk_dept') ? nodeVal.pk_dept : null;
        let pk_org = nodeVal.hasOwnProperty('pk_org') ? nodeVal.pk_org : null;
        this.pk_dept = pk_dept;
        this.pk_org = pk_org;
        //无论右边当前显示的时候是需要编辑的数据，都需要重新请求数据，防止并发事件
        this.props.syncTree.setNodeSelected(treeId, data.refpk);
        this.HRDeptQueryOneAction(() => {
            // 设置form模板
            this.addPkOrgCondition(this.pk_org);
            // 请求后台该节点下是否所有的属性均可编辑
            HRDeptEditAction.call(this, this.pk_org, this.pk_dept, formId);
        });

        nodeVal = null;
        pk_dept = null;
        pk_org = null;
    }

    /**
     * 左边导航栏点击新增icon
     */
    onAddTreeClick(data) {
        this.props.syncTree.setNodeSelected(treeId, data.refpk);

        let nodeVal = data.nodeData && data.nodeData.nodeValue || {};
        this.pk_dept = nodeVal.hasOwnProperty('pk_dept') ? nodeVal.pk_dept : null;
        this.pk_org = nodeVal.hasOwnProperty('pk_org') ? nodeVal.pk_org : null;
        // 设置form模板
        this.addPkOrgCondition(this.pk_org);
        HRDeptAddAction.call(this, this.pk_dept, this.pk_org, formId, data);
        nodeVal = null;
    }

    /**
     * 左边导航栏点击删除icon
     */
    onDelTreeClick(data) {
        if (data['children'] && data.children.length > 0) {
            toast({color: "danger", content: this.state.json['jf6005-000052']});
            /* 国际化处理： 含有子分支，不能删除！！！*/
            return
        }
        promptBox({
            color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
            title: this.state.json['jf6005-000050'],                 // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
            content: this.state.json['jf6005-000051'],        // 提示内容,非必输/* 国际化处理： 确认要删除吗？*/
            noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
            noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
            beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
            cancelBtnName: this.state.json['jf6005-000008'],          // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
            beSureBtnClick: () => {
                let selectNode = this.props.syncTree.getSelectNode(treeId);
                if (selectNode && selectNode.refpk === data.refpk) {
                    let formdata = this.props.form.getAllFormValue(formId);
                    let nextRefPk = null;
                    let index = this.allRefPk.indexOf(data.refpk);
                    let nextIndex;
                    if (index === (this.allRefPk.length - 1)) {
                        //    如果index为allrefpk最大值
                        nextIndex = index - 1;
                    } else if (index !== -1) {
                        nextIndex = index + 1;
                    }
                    if (nextIndex) {
                        nextRefPk = this.allRefPk[nextIndex] || null;
                    }
                    HRDeptDeleteAction.call(this, formId, treeId, data.refpk, formdata, nextRefPk);

                    formdata = null;
                } else {
                    HRDeptQueryOneAction(data.nodeData.nodeValue.pk_dept).then(res => {
                        if (res.success && res.data) {
                            HRDeptDeleteAction.call(this, formId, treeId, data.refpk, res.data.head[formId])
                        }
                    });
                }
            },                              // 确定按钮点击调用函数,非必输
            cancelBtnClick: null            // 取消按钮点击调用函数,非必输
        });
    }

    /**
     * 保存编辑
     */
    saveEdit() {
        // 表单验证
        if (!this.props.form.isCheckNow(formId)) {
            return
        }
        this.save(2)
    }

    /**
     * 取消编辑
     */
    cancleEdit() {
        promptBox({
            color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
            title: this.state.json['jf6005-000050'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
            content: this.state.json['jf6005-000054'],             // 提示内容,非必输/* 国际化处理： 确认要放弃保存更改吗？*/
            noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
            noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
            beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
            cancelBtnName: this.state.json['jf6005-000008'],           // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
            beSureBtnClick: () => {
                // 重新加载数据
                if (this.autoGeneratedCode) {
                    HRDeptCancelAction.call(this, this.pk_org, this.autoGeneratedCode).then(() => {
                        this.setState({
                            newAddPageFlag: false
                        });
                        // 如果不是新增则 返回原来的数据  否则就重新请求数据
                        if (this.pk_org) {
                            this.HRDeptQueryOneAction();
                        } else {
                            this.HRDeptQueryAction();
                        }
                    });
                } else {
                    this.HRDeptQueryOneAction();
                }
                this.baseBrowseState();

            },   // 确定按钮点击调用函数,非必输
            cancelBtnClick: null  // 取消按钮点击调用函数,非必输
        });
    }

    /**
     * 保存新增
     */
    saveAdd() {
        // 表单验证
        if (!this.props.form.isCheckNow(formId)) {
            return
        }
        this.save(1, true)

    }

    save = (ui_state, addFlag = false) => {
        let pageid = this.state.templatePageId;
        let bodys_code = this.state.gridrelationTable.map(item => {
            return item.code;
        });
        saveValidate(this.props, pageid, formId, bodys_code, 'extcard').then(() => {
            HRDeptSaveAction.call(this, formId, this.state.gridrelationTable, ui_state, addFlag);
        });
    };

    /**
     * 新增行
     */
    orgmanagersAddInfo(tableId) {
        this.chooseTableId = tableId;
        this.props.cardTable.addRow(tableId)
    }

    /**
     * 插入行
     */
    orgmanagersInsertInfo(tableId) {
        // 插入的时候/新增的时候  当前点击的table
        this.chooseTableId = tableId;
        let index;
        if (this.selectedManagerRow[tableId].index || this.selectedManagerRow[tableId].index === 0) {
            index = this.selectedManagerRow[tableId].index;
        }
        this.props.cardTable.addRow(tableId, index);
    }

    /**
     * 删除行
     */
    orgmanagersDelInfo(tableId) {
        // 插入的时候/新增的时候  当前点击的table
        this.chooseTableId = tableId;
        if (this.chooseTableId !== tableId || !this.selectedManagerRow[tableId].row) {
            toast({
                color: "danger",
                content: this.state.json['jf6005-000325']/* 国际化处理： 请先选择数据！*/
            });
            return
        }
        // 当删除部门主管列表行时 添加规则
        if (tableId === "deptmanager") {
            let values = this.selectedManagerRow[tableId].row.values;
            if (values.principalflag && values.principalflag.value) {
                toast({
                    color: "danger",
                    content: this.state.json['jf6005-000335']/* 国际化处理： 提示*/
                });
                values = null;
                return
            }
            values = null;
        }
        promptBox(
            {
                color: "warning",
                title: this.state.json['jf6005-000056'], /* 国际化处理： 提示*/
                content: this.state.json['jf6005-000057'], /* 国际化处理： 您确定要删除吗？*/
                beSureBtnClick: () => {
                    this.props.cardTable.delRowsByIndex(tableId, this.selectedManagerRow[tableId].index);

                    let allRow = this.props.cardTable.getAllRows(tableId);
                    if (this.selectedManagerRow[tableId].index >= allRow.length) {
                        this.selectedManagerRow[tableId] = {
                            index: null,
                            row: null
                        }
                    } else {
                        this.selectedManagerRow[tableId].row = allRow[this.selectedManagerRow[tableId].index]
                    }
                }
            }
        )
    }

    /**
     * 复制
     */
    orgmanagersCopyInfo(tableId) {
        this.copyManagerRow[tableId].row = this.selectedManagerRow[tableId].row;
        this.copyManagerRow[tableId].index = this.selectedManagerRow[tableId].index;
        let managerCopyFlag = this.state.managerCopyFlag;
        managerCopyFlag[tableId] = '2';
        this.updateState({
            managerCopyFlag
        }, () => {
            toast({
                color: "success",
                content: this.state.json['jf6005-000058']/* 国际化处理： 复制成功*/
            })
        });

    }

    /**
     * 粘贴
     */
    orgmanagersPasteInfo(tableId) {
        this.props.cardTable.addRow(tableId, this.selectedManagerRow[tableId].index, this.copyManagerRow[tableId].row.values,);
    }

    /**
     * 组织主管编辑后事件
     * @param props 内部方法
     * @param moduleId  区域id
     * @param key   操作的键
     * @param value 当前值
     * @param changedrows   新旧值集合
     * @param record    行数据
     * @param index 当前index
     */
    magegerAfter(props, moduleId, key, value, changedrows, index, record) {
        // 只有组织主管 子集有编辑后事件
        if (this.chooseTableId !== magegerTable) return;
        let valueKeys = Object.keys(value);
        // 当清除人员编码后 本行数据清空
        if (valueKeys.length < 1) {
            let values = record.values;
            for (let key in values) {
                let item = values[key];
                item.display = null;
                item.value = null;
            }
            props.cardTable.updateDataByIndexs(moduleId, [{
                index: index,
                data: {status: record.status, values: values}
            }]);
            valueKeys = null;
            return true
        }
        valueKeys = null;
        let values = record.values;
        for (let key in values) {
            values[key].scale = null;
        }
        let model = {
            rows: [record]
        };
        UserManagerAction.call(this, model, this.pk_dept, this.pk_org).then(res => {
            // 最后的设置的值未确定
            if (res.data[moduleId] && res.data[moduleId].rows && res.data[moduleId].rows[0] && res.data[moduleId].rows[0].values) {
                let values = res.data[moduleId].rows[0].values;
                props.cardTable.updateDataByIndexs(moduleId, [{
                    index: index,
                    data: {status: record.status, values: values}
                }]);
                values = null;
            }
        });
        model = null
    }

    /**
     * 点击子集 行
     * @param record
     * @param index
     * @param e
     */
    orgmanagerRowClick(props, moduleId, record, index, e) {
        this.chooseTableId = moduleId;
        this.selectedManagerRow[moduleId].row = record;
        this.selectedManagerRow[moduleId].index = index;
        if (this.state.managerCopyFlag[moduleId] === '0') {
            let managerCopyFlag = this.state.managerCopyFlag;
            managerCopyFlag[moduleId] = '1';
            this.updateState({
                managerCopyFlag
            })
        }
    }

    /**
     * 页面状态
     * @param flag  true: 编辑态；   false：浏览态
     */
    baseBrowseState(flag = false) {
        // 编辑状态下 左树disable
        this.props.syncTree.setNodeDisable(treeId, flag);
        let stateStr = flag ? 'edit' : 'browse';
        // 右侧表单进入浏览状态
        this.props.form.setFormStatus(formId, stateStr);
        this.state.gridrelationTable.forEach(item => {
            let tableId = item.code;
            this.props.cardTable.setStatus(tableId, stateStr);
            // 编辑页面选择的行
            this.selectedManagerRow[tableId] = {
                row: null,
                index: null
            };
            // 复制页面选择的行
            this.copyManagerRow[tableId] = {
                row: null,
                index: null
            };
            this.state.managerCopyFlag[tableId] = '0';
        })
        // 设置页面状态为编辑状态
        this.setState({
            editPageFlag: flag,
            managerCopyFlag: this.state.managerCopyFlag
        }, () => {
            flag = null;
        });
    }

    /**
     * 确认重命名
     */
    renameDeptExecAction(cb) {
        let formdata = this.props.form.getAllFormValue('rename');
        RenameDeptExecAction.call(this, formdata, this.pk_dept, this.pk_org, cb);
        formdata = null;
    }

    /**
     * 更新state对象
     * @param data
     * @param callback
     */
    updateState(data, callback = () => {
    }) {
        this.setState(data, callback);
    }

    /**
     * 设置 按钮的禁用状态
     * @param buttonState
     * {
            autogen: true,
            firstrow: true,
            prerow: true,
            nextrow: true,
            lastrow: true,
            add: true, //新增
            edit: true, //编辑
            delete: true, //删除
            copy: true, //复制
            query: true, //查询
            refresh: true, //刷新
            showdisa: true, //显示停用
            print_group: true, //打印
            more: true //更多
        }
     */
    setBtnDisSta(buttonState) {
        this.props.button.setButtonDisabled(buttonState)
    }

    /**
     * 创建左边导航栏
     */
    creatLeftTree(navData,iconData) {
        let root = Object.assign({}, this.root);
        if (Array.isArray(navData) && navData.length > 0) {
            navData[0].pid = root.refpk;
        }
        // 缓存左树数据 当新增部门的时候 当所属上级为空的时候 检索新增部门的上级dept
        setDefData('hrdept', cacheConfig.treeData, navData);
        root.children = navData;
        let treeData = [root];
        this.props.syncTree.setSyncTreeData(treeId, treeData);
        this.props.syncTree.hideIcon(treeId, this.root.key, {
            delIcon: false, //false:隐藏； true:显示; 默认都为true显示
            editIcon: false,
            addIcon: false
        });
        // 1.根据系统配置 显示/隐藏 左树的新增/编辑/删除 按钮；2.如果是组织 则只显示新增按钮
        this.props.syncTree.setIconVisible(treeId, iconData);
        root = null;
    }

    initUIDom = async () => {

        let data = this.props.domTemplate;

        let template = data.template;
        // table 子集
        let gridrelationTable = [];
        // formrelation中的模板为form 删除table等
        let formrelation = template.formrelation;
        for (let key in formrelation) {
            let formrelationArr = formrelation[key];
            let newArr = formrelationArr.filter(formKey => {
                if (key === formId && template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "table") {
                    // 添加table 子集
                    let {name, code} = template[formKey];
                    gridrelationTable.push({name, code});
                    this.selectedManagerRow[formKey] = {
                        row: null,
                        index: null
                    };
                    // 复制页面选择的行
                    this.copyManagerRow[formKey] = {
                        row: null,
                        index: null
                    };
                }
                return template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "form"
            });
            formrelation[key] = newArr;
        }
        let buttons = data.button || [];
        // 设置状态
        await new Promise(resolve => {
            this.setState({
                buttons,
                context: data.context || {},
                gridrelationTable,
                queryOid: data.template[searchId].oid || '',
                templatePageId: data.template.pageid || ''
            }, resolve);
        });

        // template 添加字段
        for (let key in data) {
            if (key === 'button' || key === 'context' || key === 'template') {
                continue
            }
            let batchData = data[key];
            for (let templateId in batchData) {
                // 在职人员模板 / 曾任职人员模板 / 下级人员模版 / 变更 / 批量修改
                let tempData = batchData[templateId];
                if (typeof tempData !== 'object') continue;
                if (!tempData.hasOwnProperty('moduletype')) continue;
                if (templateId === "mergedpostinf") {
                    template["mergedpostinf_l"] = deepClone(tempData);
                    template["mergedpostinf_r"] = deepClone(tempData);
                    pageidObj.mergedpostinf_l = batchData.pageid || '';
                    pageidObj.mergedpostinf_r = batchData.pageid || '';
                } else {
                    template[templateId] = tempData;
                    pageidObj[templateId] = batchData.pageid || '';
                }
            }
        }

        //部门合并 被合并部门支持多选
        data.template["deptmerge"].items.map(item => {
            if (item.attrcode === 'mergedDeptPKs') {
                item.isMultiSelectedEnabled = true;
            }
        });
        //跨组织转移 设置部门转移规则 调配业务类型 添加参数
        AddCondition(data.template["transrule"], {
            trnsEvent: 3
        }, 'transtype');
        //跨组织转移 设置部门转移规则 业务单元 添加参数
        data.template["transrule"].items.map(item => {
            if (item.attrcode === 'oldorg' || item.attrcode === 'neworg') {
                item.controlType = 2
            }
        });
        AddCondition(data.template.transrule, {
            TreeRefActionExt: 'nccloud.web.hr.sqlbuilder.HRPrimaryOrgSQLBuilder'
        }, 'oldorg');
        AddCondition(data.template.transrule, {
            TreeRefActionExt: 'nccloud.web.hr.sqlbuilder.HRPrimaryOrgSQLBuilder'
        }, 'neworg');
        // 组织版本化 版本名称 添加超链接
        tableRowAddLink(data.template['dept_v'], 'vname', this.deptVersionDetail, 'value');

        if (!data.template.formrelation) {
            data.template.formrelation = {}
        }
        data.template.formrelation["dept_info"] = ['dept_Version'];
        Object.assign(data.template.gridrelation, {
            [magegerTable]: {
                destBrowseAreaCode: null,
                destEditAreaCode: null,
                srcAreaCode: magegerTable,
                tabRelation: [magegerTable]
            }
        });
        Object.assign(data.template.gridrelation, {
            [changeTable]: {
                destBrowseAreaCode: null,
                destEditAreaCode: null,
                srcAreaCode: changeTable,
                tabRelation: [changeTable]
            }
        });

        // 部门主管 添加请求条件
        AddCondition(data.template[formId], {
            GridRefActionExt: 'nccloud.web.hrjf.hrdept.sqlbuilder.PrincipalSQLBuilder',
            isIncludeDummyDept: true
        }, 'principal');
        // 基本信息  责任人 集团申请
        let principalItem = data.template[formId].items.find(item => item.attrcode === 'principal');

        principalItem.isShowUnit = true;
        principalItem.unitCondition = () => {
            return {
                "isMutiGroup": "Y"
            }
        };
        // 组织主管  人员 集团申请
        let pk_psndocItem = data.template[magegerTable].items.find(item => item.attrcode === 'pk_psndoc');

        pk_psndocItem.isShowUnit = true;
        pk_psndocItem.unitCondition = () => {
            return {
                "isMutiGroup": "Y"
            }
        };

        this.props.meta.setMeta(data && data.template ? data.template : {});
        this.props.button.setButtons(buttons || []);
        // 请求左树数据
        this.HRDeptQueryAction();

        principalItem = null;
        pk_psndocItem = null;
    };

    /**
     * 超链接点击事件
     * @param record
     * @param index
     */
    deptVersionDetail = (record, index) => {
        this.deptVerModalNode.onRowDoubleClick(record, index);
    };

    /**
     * 初始化数据
     */
    initData() {
        // 设置按钮禁用状态
        this.setBtnDisSta({
            copy: true,              //复制
            rename: true,            //更名
            merge: true,             //合并
            stop: true,              //撤销
            uncancel: true,          //取消撤销
            shift: true,             //组织内转移
            outershift: true,        //跨组织转移
            structversion: true,     //部门结构版本化
            deptversion: true,       //部门版本化
            querypost: true,         //联查岗位
            querypsn: true,          //联查人员
            file: true,              // 附件
            print: true,             // 打印
            output: true             // 输出
        });
        // 设置按钮的隐藏
        this.props.button.setButtonVisible({
            // copy: false,              //复制
            // rename: false,            //更名
            // merge: false,             //合并
            // stop: false,              //撤销
            // uncancel: false,          //取消撤销
            // shift: false,             //组织内转移
            // outershift: false         //跨组织转移
        });
        this.emptyRightData();
        // 取消当前选中所有节点
        this.props.syncTree.cancelSelectedNode(treeId);
    }

    /**
     *  清空右表数据
     */
    emptyRightData() {
        this.props.form.EmptyAllFormValue(formId);
        this.state.gridrelationTable.forEach(item => {
            let tableId = item.code;
            this.props.cardTable.setTableData(tableId, {rows: []});
        })
    }

    /**
     * 获取左树数据
     */
    HRDeptQueryAction() {
        this.initData();
        HRDeptQueryAction.call(this);
    }

    /**
     * 页面初始化
     */
    pageInit() {
        this.initUIDom();
    }

    componentDidMount() {
        this.config = getAppPageConfig();
        let callback = (json, status, inlt) => {
            if (status) {
                this.setState({json, inlt}, () => {
                    this.root = {//为人员类别树创建一个根节点
                        "isleaf": false,
                        "key": "ROOT",
                        "title": this.state.json['jf6005-000046'], /* 国际化处理： 行政组织*/
                        "id": "ROOT",
                        "innercode": "ROOT",
                        "pid": "",
                        "refname": this.state.json['jf6005-000046'], /* 国际化处理： 行政组织*/
                        "refpk": "ROOT"
                    };
                    this.pageInit();
                }) // 保存json和inlt到页面state中并刷新页面
            }
        };
        this.props.MultiInit.getMultiLang({moduleId: 'jf6005', domainName: 'hrjf', callback})
    }

    // 附件的关闭点击
    onHideUploader = () => {
        this.setState({
            showUploader: false,
            groupLists: []
        })
    };
    //获取当前附件列表
    getGroupList = (list) => {
        //要在state里面顶一个变量，用来存储列表数组
        this.setState({
            groupLists: list
        })
    };

    beforeUpload(billId, fullPath, file, fileList) {
        // 参数：单据id，当前选中分组path、当前上传文件对象，当前文件列表
        // const isJPG = file.type === 'image/jpeg';
        //
        // const isLt2M = file.size / 1024 / 1024 < 2;
        // if (!isLt2M) {
        //     alert(this.state.json['jf6005-000059'])
        //     /* 国际化处理： 上传大小小于2M*/
        // }
        // return isJPG && isLt2M;
        return true
        // 备注： return false 不执行上传  return true 执行上传
    }

    /**
     * 搜索dom点击查找
     */
    goSearch(props, searchData, type, queryInfo) {
        // searchData.conditions  []
        let data = this.props.search.getQueryInfo(searchId, true);

        this.updateState({
            searchModalValue: data
        }, () => {
            this.HRDeptQueryAction();
            // 关闭查询区
            this.props.search.openAdvSearch(searchId, false);
            data = null;
        });
    }

    /**
     * 业务单元版本信息 查询
     */
    orgUnitCardVersionQueryAction(pk_vid) {
        // 先清空表单
        this.props.form.EmptyAllFormValue('dept_info');

        OrgUnitCardVersionQueryAction(this.pk_dept, pk_vid).then(res => {
            // 设置当前页的状态
            this.props.cardPagination.setCardPaginationId({id: pk_vid, status: 1});
            // 设置数据
            let formData = {
                dept_info: {
                    rows: []
                }
            };
            if (res.data && res.data.dept_info) {
                let rows = res.data.dept_info.dept_info.rows;
                formatDisplayOrder(rows[0].values, true);
                formData.dept_info.rows = rows;
            } else {
                delete formData.dept_info
            }
            this.props.form.setAllFormValue(formData);
            formData = null;
        })
    }


    render() {
        let {button, search, DragWidthCom, modal, form, cardTable, syncTree} = this.props;
        const {createSyncTree} = syncTree;
        const {createForm} = form;//创建表单，需要引入这个
        let {createModal} = modal;  //模态框
        let {createButtonApp} = button;
        const {createCardTable} = cardTable;
        let { pk_org } = this.state;
        let header;
        if (this.state.editPageFlag) {
            header = <div className="header">
                <NCBackBtn onClick={this.backButtonClick.bind(this)}
                           title={this.state.json['jf6005-000022']}></NCBackBtn>
                {/* 国际化处理： 返回*/}

                <div>
                    <NCButton shape="border" colors="primary"
                              onClick={this.saveEdit.bind(this)}>{this.state.json['jf6005-000066']}</NCButton>{/* 国际化处理： 保存*/}
                    <NCButton shape="border" colors="primary" onClick={this.saveAdd.bind(this)}
                              disabled={!this.state.newAddPageFlag}>{this.state.json['jf6005-000067']}</NCButton>{/* 国际化处理： 保存新增*/}
                    <NCButton shape="border" colors="default"
                              onClick={this.cancleEdit.bind(this)}>{this.state.json['jf6005-000008']}</NCButton>{/* 国际化处理： 取消*/}
                </div>
            </div>;
        } else {
            header = <div className="header">
                <div className={'leftDepartmentChoose'}>
                    {this.state.queryOid && <ReferSearch
                        orgVal={this.state.hrDeptTreeRef}
                        getOrgData={this.searchChange.bind(this)}
                        queryCondition={
                            () => {
                                return {
                                    controlType: 1
                                }
                            }
                        }
                        delay={true}
                    />}
                </div>
                {/* 标题 title*/}
                <div className="title">
                    <span className="show-off-checkbox">
                            <NCCheckbox checked={this.state.enablestate} onChange={
                                this.onCheckShowDisable.bind(this)
                            }>{this.state.json['jf6005-000023']}</NCCheckbox>{/* 国际化处理： 显示撤销*/}
                        </span>

                </div>
                {/* 按钮组 btn-group*/}
                <div className="btn-group">
                    {
                        createButtonApp({
                            area: buttonGroup,
                            // buttonLimit: 3,
                            onButtonClick: (props, btncode) => {
                                this.onButtonClick(props, btncode, buttonGroup, this);
                            },
                            popContainer: document.querySelector('.header-button-area')
                        })
                    }
                </div>
            </div>;
        }
        const {
            copyModalVisible,
            renameModalVisible,
            stopDeptModalVisible,
            uncancelDeptModalVisible,
            shiftDeptModalVisible,
            outerShiftDeptModalVisible,
            mergeModalVisible,
            deptStrVerModalVisible,
            versionInfoModalVisible,
            queryPostModalVisible,
            queryPsnModalVisible,
            deptVerModalVisible,
            orginfoTypeTabsArr,
            showUploader,
            gridrelationTable
        } = this.state;
        return (
            <div className={'hrDeptPage'}>
                {
                    createModal('modal', {
                        title: this.state.json['jf6005-000060'],// 弹框表头信息/* 国际化处理： 新增节点*/
                        content: this.state.json['jf6005-000061'], //弹框内容，可以是字符串或dom/* 国际化处理： <div>弹窗内容</div>*/
                        // beSureBtnClick: this.beSureBtnClick, //点击确定按钮事件
                        // cancelBtnClick: this.cancelBtnClick, //取消按钮事件回调
                        // closeModalEve: this.closeModalEve, //关闭按钮事件回调
                        userControl: false,  // 点确定按钮后，是否自动关闭弹出框.true:手动关。false:自动关
                        size: 'lg', //  模态框大小 sm/lg/xlg
                        noFooter: false, //是否需要底部按钮,默认true
                        rightBtnName: this.state.json['jf6005-000031'], //左侧按钮名称,默认关闭/* 国际化处理： 关闭*/
                        leftBtnName: this.state.json['jf6005-000007'], //右侧按钮名称， 默认确认/* 国际化处理： 确认*/
                        className: 'junior' /*
                               简单型junior -> 宽度410PX 高度210PX .
                               中型senior -> 宽度520PX 高度根据内容自适应，最小值268，最大高度限制420，如modal主体还要承modal主体区出现滚动条
                               复杂型combine  -> 宽度680PX 高度根据内容自适应，最小值268，最大高度限制570，如modal主体还要承载modal主体区出现滚动条
                               头部和底部固定高度
                               不写的话默认走size设定大小
                              */

                    })
                }
                <div className="nc-faith-demo-div2">
                    {/* 这里是附件上传组件的使用，需要传入三个参数 */}
                    {showUploader && <NCUploader
                        disableDownload={true}
                        billId={this.pk_dept}
                        billNo={this.billNo}
                        // target={target}
                        customize={{uploadTrpe: '0'}}
                        placement={'bottom'}
                        getGroupList={this.getGroupList}
                        uploadTitle={this.state.json['jf6005-000062']}/* 国际化处理： 附件管理*/
                        onHide={this.onHideUploader} // 关闭功能
                        beforeUpload={this.beforeUpload}/>
                    }
                </div>

                <CopyModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    updateState={this.updateState.bind(this)}
                    refresh={this.refresh.bind(this)}
                    pageidObj={pageidObj}
                    copyModalVisible={copyModalVisible}
                    templatePageId={this.state.templatePageId}
                />
                <RenameModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    updateState={this.updateState.bind(this)}
                    renameDeptExecAction={this.renameDeptExecAction.bind(this)}
                    renameModalVisible={renameModalVisible}
                />
                <StopDeptModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    pk_dept={this.pk_dept}
                    pk_org={this.pk_org}
                    treeId={treeId}
                    updateState={this.updateState.bind(this)}
                    refresh={this.refresh.bind(this)}
                    HRDeptQueryOneAction={this.HRDeptQueryOneAction.bind(this)}
                    stopDeptModalVisible={stopDeptModalVisible}
                />
                <UncancelDeptModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    pk_dept={this.pk_dept}
                    pk_org={this.pk_org}
                    treeId={treeId}
                    updateState={this.updateState.bind(this)}
                    refresh={this.refresh.bind(this)}
                    HRDeptQueryOneAction={this.HRDeptQueryOneAction.bind(this)}
                    uncancelDeptModalVisible={uncancelDeptModalVisible}
                />
                <ShiftDeptModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    pk_dept={this.pk_dept}
                    pk_org={this.pk_org}
                    updateState={this.updateState.bind(this)}
                    refresh={this.refresh.bind(this)}
                    shiftDeptModalVisible={shiftDeptModalVisible}
                />
                <OuterShiftDeptModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    updateState={this.updateState.bind(this)}
                    refresh={this.refresh.bind(this)}
                    outerShiftDeptModalVisible={outerShiftDeptModalVisible}
                    ref={node => {
                        this.outerShiftDeptModal = node;
                    }}
                />
                <MergeModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    pk_org={pk_org}
                    updateState={this.updateState.bind(this)}
                    refresh={this.refresh.bind(this)}
                    mergeModalVisible={mergeModalVisible}
                />
                <QueryPostModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    updateState={this.updateState.bind(this)}
                    queryPostModalVisible={queryPostModalVisible}
                />
                <QueryPsnModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    updateState={this.updateState.bind(this)}
                    queryPsnModalVisible={queryPsnModalVisible}
                />
                <DeptStrVerModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    pk_dept={this.pk_dept}
                    pk_org={this.pk_org}
                    updateState={this.updateState.bind(this)}
                    deptStrVerModalVisible={deptStrVerModalVisible}
                />

                <VersionInfoModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    versionInfoModalVisible={versionInfoModalVisible}
                    updateState={this.updateState.bind(this)}
                    orginfoTypeTabsArr={orginfoTypeTabsArr}
                    orgUnitCardVersionQueryAction={this.orgUnitCardVersionQueryAction.bind(this)}
                />
                <DeptVerModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    pk_dept={this.pk_dept}
                    pk_org={this.pk_org}
                    deptVerModalVisible={deptVerModalVisible}
                    updateState={this.updateState.bind(this)}
                    orgUnitCardVersionQueryAction={this.orgUnitCardVersionQueryAction.bind(this)}
                    ref={node => {
                        this.deptVerModalNode = node;
                    }}
                />
                {/* search */}
                <div className={'searchNcc'} style={{display: 'none'}}>
                    {search.NCCreateSearch(searchId, {
                        clickSearchBtn: this.goSearch.bind(this),
                        onlyShowAdvArea: false,
                        showAdvSearchPlanBtn: true,
                        saveSearchPlan: true,
                        // oid: this.props.queryOid,
                        onlyShowSuperBtn: true,
                        replaceSuperBtn: this.state.json['jf6005-000063']/* 国际化处理： 查询*/
                    })}
                </div>
                {/* 头部 header*/}
                {header}
                {/* 树卡区域 */}
                <div className="tree-card">
                    <DragWidthCom
                        // 左树区域
                        leftDom={
                            <div className="tree-area">
                                {createSyncTree({
                                    treeId: treeId,
                                    needEdit: true, //不启用编辑
                                    showLine: false, //显示连线
                                    defaultSelectedKeys: ["ROOT"],
                                    needSearch: true, //是否需要搜索框
                                    onSelectEve: this.onSelectTree.bind(this),//选择
                                    clickAddIconEve: this.onAddTreeClick.bind(this), //新增点击 回调
                                    clickDelIconEve: this.onDelTreeClick.bind(this), // 删除点击 回调
                                    clickEditIconEve: this.onEditTreeClick.bind(this), //编辑点击 回调
                                    onSelectedChange: (node) => {
                                        if (!node) {
                                            this.props.syncTree.openNodeByPk(treeId, this.root.key)
                                        }
                                    },
                                    showModal: false //是否使用弹出式编辑
                                })}
                            </div>
                        }
                        // 右卡片区域
                        rightDom={
                            this.state.queryActionPkorg ? <div className="card-area">
                                <div className="nc-bill-form-area">
                                    {
                                        createForm(formId, {
                                            // onAfterEvent: this.onAfterFormEvent.bind(this)
                                        })
                                    }
                                </div>
                                <div className="tabs-box orgmanagers">
                                    {gridrelationTable.length > 0 && <div className={'ncTabWarp'}>

                                        {gridrelationTable.map(item => {
                                            return <div>
                                                {
                                                    createCardTable(item.code, {
                                                        // showCheck: this.state.showOrgDetailPFBtn,
                                                        onAfterEvent: this.magegerAfter.bind(this),
                                                        onRowClick: this.orgmanagerRowClick.bind(this),
                                                        pageSize: 1000,
                                                        hideColSet: () => {
                                                            return true
                                                        },//隐藏设置按钮
                                                        hideSwitch: () => {
                                                            return false
                                                        },//隐藏全表展开按钮,//隐藏全表展开按钮
                                                        tableHead: () => {
                                                            let tableId = item.code;
                                                            return <div className={'addInfoBtn'}
                                                                        style={{display: this.state.editPageFlag ? '' : 'none'}}>
                                                                <NCButton
                                                                    colors="secondary"
                                                                    disabled={tableId === changeTable}
                                                                    onClick={this.orgmanagersAddInfo.bind(this, tableId)}
                                                                >
                                                                    {this.state.json['jf6005-000083']}{/* 国际化处理： 新增行*/}
                                                                </NCButton>
                                                                <NCButton
                                                                    colors="secondary"
                                                                    disabled={tableId === changeTable}
                                                                    onClick={this.orgmanagersInsertInfo.bind(this, tableId)}
                                                                >
                                                                    {this.state.json['jf6005-000084']}{/* 国际化处理： 插入行*/}
                                                                </NCButton>
                                                                <NCButton
                                                                    colors="default"
                                                                    disabled={tableId === changeTable}
                                                                    onClick={this.orgmanagersDelInfo.bind(this, tableId)}
                                                                >
                                                                    {this.state.json['jf6005-000085']}{/* 国际化处理： 删除行*/}
                                                                </NCButton>

                                                                <NCButton
                                                                    colors="secondary"
                                                                    disabled={(tableId === changeTable || this.state.managerCopyFlag[tableId] === '0')}
                                                                    onClick={this.orgmanagersCopyInfo.bind(this, tableId)}
                                                                    // disabled={}
                                                                >
                                                                    {this.state.json['jf6005-000086']}{/* 国际化处理： 复制行*/}
                                                                </NCButton>
                                                                <NCButton
                                                                    colors="secondary"
                                                                    disabled={(tableId === changeTable || this.state.managerCopyFlag[tableId] !== '2')}
                                                                    onClick={this.orgmanagersPasteInfo.bind(this, tableId)}
                                                                >
                                                                    {this.state.json['jf6005-000087']}{/* 国际化处理： 粘贴行*/}
                                                                </NCButton>
                                                            </div>
                                                        }
                                                    })
                                                }
                                            </div>
                                        })}
                                    </div>}
                                </div>

                            </div> : <EmptyImg text={this.state.json['jf6005-000473']}/>
                        }     //右侧区域dom
                        defLeftWid='270px'      // 默认左侧区域宽度，px/百分百
                    />
                </div>
                {/*底部*/}
                <footer className={'footer'}></footer>
            </div>
        )
    }
}

let condition = {
    pagecodeValues: COMMON.pagecodeValues,
    config: COMMON.config
};
createBillinfoPage(condition, JobGrade).then(res => res = null);
export default JobGrade
