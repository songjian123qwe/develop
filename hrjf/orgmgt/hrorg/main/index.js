/**
 * Created by wanghongxiang on 2018/5/8.
 * 部门信息
 */
import React, {Component} from 'react';
import ReactDOM from 'react-dom';

import 'src/hrpub/common/static/fonts/iconfont.css'
import "./index.less";
import {
    high,
    createPage,
    base,
    getUrlParam,
    promptBox,
    cacheTools,
    toast,
    cardCache,
    output,
    print,
    deepClone
} from 'nc-lightapp-front';

let {setDefData, getDefData} = cardCache;
const {NCCheckbox, NCTabs} = base;
const NCTabPane = NCTabs.NCTabPane;
import AosOrgVerModal from '../components/AosOrgVerModal';
import OrgVerModal from '../components/OrgVerModal';
import OrgInfoCancelAction from '../functions/orgInfoCancelAction';
import getOrgVersionInfo from '../functions/getOrgVersionInfo';
import checkRootAdminChangedAction from '../functions/checkRootAdminChangedAction';
import checkRootCorpChangedAction from '../functions/checkRootCorpChangedAction';
import checkRootOrgChangedAction from '../functions/checkRootOrgChangedAction';
import orgInfoSaveAction from '../functions/orgInfoSaveAction';
import {snCreateUIDom} from 'src/hrpub/common/utils/utils'
import OrgDeptModal from "../components/OrgDeptModal";
import AddCondition from "../../../public/functions/addCondition";
import VersionInfoModal from "../components/versionInfoModal";
import OrgUnitCardVersionQueryAction from "../functions/OrgUnitCardVersionQueryAction";
import {addBlackStyle, formatDisplayOrder} from "../../../public/functions/orgtools";

import tableRowAddLink from "../../../public/functions/tableRowAddLink";
import orgInfoAdd from "../functions/OrgInfoAddAction";
import orgInfoDelete from "../functions/OrgInfoDeleteAction";
import orgInfoDisable from "../functions/OrgInfoDisableAction";
import orgInfoEnable from "../functions/OrgInfoEnableAction";
import queryDept from "../functions/QueryDeptAction";
import TableModal from "../components/table";
import DetailModal from "../components/detail";
import {THEME} from "../../../public/theme/theme";
import {billinfo, COMMON} from "../common/common";
import {createBillinfoPage} from "../../../public/functions/createBillinfoPage";

const {buttonGroup, buttonGroupCard, searchId, orglist, orgInfFormId, orgDetailPage, orgtype, corp, hrorg, adminorg, orgmanagers, cacheConfig, pagecodeValues} = COMMON;

class HomeWraper extends Component {
    constructor(props) {
        super(props);
        this.props = props;

        this.autoGeneratedCode = ''; //新增生成的自定编码

        this.newAdd = false; // 新增标志
        this.state = {
            gridrelationTable: [],// 详情页子集 [{code:'code123',name:'zhangsan'}]
            json: {},
            tableHeight: null, //table高度
            rootAdminChangedFlag: false, // 卡片页面保存时是否要改变原来的上级公司的值
            searchModalValue: null,
            orgDeptModalVisible: false, // 联查部门 modal 是否显示
            orgVerModalVisible: false, // 组织体系版本化 modal 是否显示
            versionInfoModalVisible: false, // 业务单元 版本化信息 modal 是否显示
            orginfoTypeTabsArr: [], // 业务单元 版本化信息 modal tabs 展示
            aosOrgVerModalVisible: false, // 行政组织体系版本化 modal 是否显示
            verModaltype: "", // "3":人力资源组织；"4":行政组织；
            queryOid: '',
            showMode: 'browse',
            showNCCheck: true,
            showChangePage: false,
            managerCopyFlag: '0', // 0: 不可复制、粘贴  1：可复制， 不可粘贴；  2：可复制可粘贴
            enablestate: false, // 用户列表头部 显示停用 checkbox
            headerSearch: '', // header 部分 search查询
            showOrgDetailPage: false,  // 组织详情页面   true: 组织详情页编辑状态;    false: 非编辑状态
            showOrgDetailPFBtn: false,  // 组织详情页面底部btn   true: 显示;    false: 不显示
            orgTypeTabsArr: [], // 编辑页面 orgtype  tabs的显示
            orgTypeTab: '', // 编辑页面 orgtype  tab的显示
            orgTypeEnState: '2', // 编辑页面 职能组织停用启用状态  2启用，3停用
        };
    }

    /**
     * 用户列表页面 头部是否选择显示停用的标志
     * @param val
     */
    onCheckShowDisable(val) {
        this.setState({
            enablestate: val
        }, () => {
            this.getMainTableData();
        });
    }

    /**
     * 用户列表 头部 button点击事件
     * @param prop
     * @param btncode
     * @param areacode
     * @param record
     */
    onButtonClick = (prop, btncode, areacode, record) => {
        if (areacode === buttonGroupCard) {
            // 详情页面
            let pkOrg = getDefData('orgunit_pk_org', cacheConfig.dataSource);
            // 部门详情页面浏览
            switch (btncode) {
                case 'card_edit':
                    // 修改
                    this.isShowOrgDetailPage(orgDetailPage.edit);
                    break;
                case 'card_refresh':
                    // 刷新
                    this.updateState({
                        orgTypeTabsArr: []
                    });
                    this.getOrgInfoOneAction(pkOrg, (res) => {
                        toast({color: 'success', content: this.state.json['jf6005-000339']});//刷新成功！
                    });
                    break;
                case 'card_add':
                    // 新增
                    this.addOrg(pkOrg);
                    break;
                default:
                    break;
            }
        } else if (areacode === buttonGroup) {
            // 列表页面
            let pk_orgarr = [];
            let pk_org = '';
            //获取选中行数据
            let selectMember = prop.treeTableManyCol.getSelectedRow(orglist);
            if (selectMember.length != 0) {
                selectMember.map((obj) => {
                    pk_orgarr.push(obj.values.pk_org.value);
                });
                pk_org = selectMember[0].values.pk_org.value;
            }

            setDefData('orgunit_pk_org', cacheConfig.dataSource, pk_org);
            switch (btncode) {
                case 'add':
                    this.addOrg(pk_org);
                    break;
                case 'query':
                    // 点击查询按钮
                    this.props.search.openAdvSearch(searchId, true);
                    break;
                case 'enable':
                    // 点击启用按钮
                    prop.modal.show('confirm', {
                        size: "sm",
                        title: this.state.json['jf6005-000097'], /* 国际化处理： 注意*/
                        content: this.state.json['jf6005-000098'], /* 国际化处理： 确认启用该组织？*/
                        beSureBtnClick: () => {
                            orgInfoEnable({pk_org}).then(res => {
                                if (res.success) {
                                    //修改了界面数据，需要重新加载数据
                                    // dealdefaultdata(selectMember,res.data,props,'已启用',2,false);
                                    toast({color: 'success', content: this.state.json['jf6005-000099']});
                                    /* 国际化处理： 启用成功！*/
                                    this.getMainTableData();
                                }
                            });
                        }
                    });
                    break;
                case 'disable':
                    // 点击停用按钮
                    prop.modal.show('confirm', {
                        size: "sm",
                        title: this.state.json['jf6005-000097'], /* 国际化处理： 注意*/
                        content: this.state.json['jf6005-000100'], /* 国际化处理： 确认停用该组织？*/
                        beSureBtnClick: () => {
                            orgInfoDisable(({pk_org})).then(res => {
                                if (res.success) {
                                    toast({color: 'success', content: this.state.json['jf6005-000101']});
                                    /* 国际化处理： 停用成功！*/
                                    this.getMainTableData();
                                }
                            })
                        }
                    });
                    break;
                case 'orgver':
                    // 组织版本化
                    this.updateState({
                        orgVerModalVisible: true
                    });
                    getOrgVersionInfo("org", {
                        pk_org
                    })
                        .then((res) => {
                            if (res.success) {
                                let formData = {
                                    org_v_head: {
                                        rows: res.data.org_v_head.org_v_head.rows
                                    }
                                };
                                this.props.form.setAllFormValue(formData);
                                let table_data = res.data.org_v.org_v;
                                this.props.table.setAllTableData('org_v', table_data);
                                // 设置翻页插件的allpks
                                let table_list = table_data.rows;
                                let allPkorg = [];
                                table_list.map(item => {
                                    allPkorg.push(item.values.pk_vid.value);
                                });
                                setDefData('hrorg_versionInfo_allpkorg', 'hrjf.org.orgVersion.versionInfo', allPkorg);
                                cacheTools.set('allpks', allPkorg);

                                formData = null;
                                table_data = null;
                                table_list = null;
                                allPkorg = null;
                            }
                        });
                    break;
                case 'hrorgver':
                    // 人力资源组织体系版本化
                    getOrgVersionInfo("3")
                        .then((res) => {
                            if (res.success) {
                                if (res.data && res.data.orgStruversion) {
                                    let formData = {
                                        orgStruversion: {
                                            rows: res.data.orgStruversion.rows
                                        }
                                    };
                                    this.updateState({
                                        aosOrgVerModalVisible: true,
                                        verModaltype: "3"
                                    });
                                    this.props.form.setAllFormValue(formData);

                                    formData = null;
                                }
                            }
                        });
                    break;
                case 'adminorgver':
                    // 行政组织体系版本化
                    getOrgVersionInfo("4")
                        .then((res) => {
                            if (res.success) {
                                if (res.data && res.data.orgStruversion) {
                                    let formData = {
                                        orgStruversion: {
                                            rows: res.data.orgStruversion.rows
                                        }
                                    };
                                    this.updateState({
                                        aosOrgVerModalVisible: true,
                                        verModaltype: "4"
                                    });
                                    this.props.form.setAllFormValue(formData);
                                    formData = null;
                                }
                            }
                        });
                    break;
                case 'print':
                    let printOids = getDefData('orgunit_allpkorg', cacheConfig.dataSource);

                    print(
                        'pdf',
                        '/nccloud/hrjf/orginfo/OrgInfoPrintAction.do ',
                        {
                            funcode: '60051010',      //小应用编码
                            nodekey: 'orglist',       //模板节点标识
                            oids: printOids,
                            outputType: 'print'
                        }
                    );

                    printOids = null;
                    break;
                case 'output':
                    // 点击输出按钮
                    let outputOids = getDefData('orgunit_allpkorg', cacheConfig.dataSource);
                    output({
                        url: '/nccloud/hrjf/orginfo/OrgInfoPrintAction.do',
                        data: {
                            funcode: '60051010',      //功能节点编码，即模板编码
                            nodekey: 'orglist',     //模板节点标识
                            oids: outputOids,    // 功能节点的数据主键  oids含有多个元素(['1001A41000000000A9LR','1001A410000000009JDD'])时为批量打印
                            outputType: 'output',
                            filename: this.state.json['jf6005-000328'] // 输出文件名
                        },
                        callback: function () {
                            outputOids = null;
                        }
                    });
                    break;
                case 'refresh':
                    // 点击刷新按钮
                    this.getMainTableData((res) => {
                        toast({color: 'success', content: this.state.json['jf6005-000339']});//刷新成功！
                    });
                    break;
                default:
                    break;
            }
        } else if (areacode === 'body') {
            // 部门详情页面浏览
            switch (btncode) {
                case 'edit':
                    // 修改
                    this.isShowOrgDetailPage(orgDetailPage.edit);
                    let pk_org = record.values.pk_org.value;
                    setDefData('orgunit_pk_org', cacheConfig.dataSource, pk_org);
                    pk_org = null;
                    this.getOrgInfoOneAction(record.values.pk_org.value, (res) => {

                    });
                    break;
                case 'delete':
                    // 删除
                    promptBox(
                        {
                            color: "warning",
                            title: this.state.json['jf6005-000056'], /* 国际化处理： 提示*/
                            content: this.state.json['jf6005-000103'], /* 国际化处理： 确定要删除所选数据吗？*/
                            beSureBtnClick: function () {
                                orgInfoDelete({
                                    pk_org: record.values.pk_org.value || ''
                                }).then((result) => { //查询成功后请求模板
                                    if (result.success) {
                                        this.props.treeTableManyCol.delRowByPk(orglist, record);
                                    }
                                })
                            }
                        }
                    );
                    break;
                case 'querydept':
                    // 联查部门
                    queryDept({
                        pk_org: record.values.pk_org.value
                    }).then((res) => {
                        if (!res.success) {
                            return;
                        }
                        this.updateState({
                            orgDeptModalVisible: true
                        });
                        if (res.data && res.data.orgdept) {
                            let tableRows = res.data.orgdept.rows;
                            tableRows.map(item => {
                                formatDisplayOrder(item.values, true);
                            });
                            this.props.editTable.setTableData('orgdept', res.data.orgdept);
                            tableRows = null;
                        }
                    });
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * 页面 返回浏览状态
     */
    backButtonClick() {
        if (this.state.showOrgDetailPFBtn) {
            this.cancleOneOrgEditInfo();
        } else {
            this.isShowOrgDetailPage();
            this.newAdd = false;
        }

    }

    /**
     * 翻页插件 按钮点击事件
     */
    pageQueryClick = (props, val) => {
        setDefData('orgunit_pk_org', cacheConfig.dataSource, val);
        this.getOrgInfoOneAction(val);
    };

    /**
     * 查询模块 查询按钮
     */
    goSearch(props, searchData, type, queryInfo) {
        let data = this.props.search.getQueryInfo(searchId, true);

        this.updateState({
            searchModalValue: data
        }, () => {
            this.getMainTableData((res) => {
                let num = 0;
                if (res.data && res.data.orglist) {
                    num = res.data.orglist.rows.length
                }
                toast({
                    color: 'success',
                    content: `${this.state.json['jf6005-000340']}${num}${this.state.json['jf6005-000341']}`
                });//查询成功,已查到**条数据。
                num = null;
                data = null;
            });
            // 关闭查询区
            this.props.search.openAdvSearch(searchId, false);
        });
    }

    /**
     * 树状表组件 双击事件
     * @param record
     * @param index
     * @param event
     */
    ncOnRowDoubleClick = (record, index, event) => {
        let pk_org = record.values.refpk.value;
        setDefData('orgunit_pk_org', cacheConfig.dataSource, pk_org);
        this.isShowOrgDetailPage(orgDetailPage.browse);
        this.getOrgInfoOneAction(pk_org);
        pk_org = null;
    };

    /**
     * 查看组织版本化 详情
     * @param record
     */
    orgVersionDetail = (record) => {
        let pk_vid = record && record.pk_vid && record.pk_vid.value || null;
        // 查询该条数据的值 显示弹窗
        this.orgUnitCardVersionQueryAction(pk_vid);
        this.updateState({
            versionInfoModalVisible: true
        });
        pk_vid = null;
    };

    /**
     * 保存一个部门的编辑信息
     */
    saveOneOrgEditInfo() {
        // 检测必填项
        if (!this.checkOrgEditInfo(orgInfFormId)) {
            return
        }

        let pkOrg = getDefData('orgunit_pk_org', cacheConfig.dataSource) || '';
        let data = {
            pk_org: pkOrg
        };
        let orgtype2 = this.props.form.getFormItemsValue(orgtype, 'orgtype2');
        let orgtype29 = this.props.form.getFormItemsValue(orgtype, 'orgtype29');
        let orgName = this.props.form.getFormItemsValue(orgInfFormId, 'name').name.value;
        if (orgtype29.value) {
            // 判断是否需要提示变更业务单元根节点
            this.checkRootAdminChangedAction(data, orgName)
        } else if (orgtype2.value) {
            // 判断是否需要提示变更公司根节点
            this.checkRootCorpChangedAction(data, orgName)
        } else {
            // 判断是否需要提示变更行政组织根节点
            this.checkRootOrgChangedAction(data, orgName)
        }

        pkOrg = null;
        data = null;
        orgtype2 = null;
        orgtype29 = null;
        orgName = null;
    }

    /**
     * 编辑页面查看 tabs被点击的选项的状态
     */
    editPageOnTabClick(key) {
        let orgTypeEnState = this.props.form.getFormItemsValue(key, 'enablestate').value;
        this.updateState({
            orgTypeTab: key,
            orgTypeEnState: orgTypeEnState
        }, () => {
            let formStatus = this.props.form.getFormStatus(orgInfFormId);
            let keyStatus = this.props.form.getFormStatus(key);
            if (formStatus !== keyStatus) {
                this.props.form.setFormStatus(key, formStatus);
            }
        });
        orgTypeEnState = null;
    }

    /**
     * 法人公司/人力资源/行政组织  checkbox 选择
     */
    orgTypeOnAfterEvent(props, moduled) {
        let formdata = props.form.getAllFormValue(moduled);
        this.setOrgTypeTabsArr(formdata);
        this.tabAfterEvent(formdata);
        formdata = null;
    }

    //==========ajax==============

    /**
     * 请求用户列表数据
     */
    requireUserlist(paramData, cb) {
        this.tableModal.getData(paramData, cb)
    }

    /**
     * 新增组织
     * @param pk_org
     */
    addOrg(pk_org) {
        this.newAdd = true;
        // 新增按钮
        this.isShowOrgDetailPage(orgDetailPage.edit);
        // 清空 表格数据
        this.emptyDetailPage();
        orgInfoAdd({pk_org}).then((res) => {
            if (res.success) {
                if (res.data.formdata && res.data.formdata[orgInfFormId]) {
                    this.props.form.setAllFormValue({[orgInfFormId]: res.data.formdata[orgInfFormId]});
                    // 设置编码的可编辑性
                    this.props.form.setFormItemsDisabled(orgInfFormId, {code: !res.data.isCodeEditable});
                    this.autoGeneratedCode = res.data.autoGeneratedCode;
                    //设置分tabs显示
                    this.setOrgTypeTabsArr(res.data.formdata[orgInfFormId]);
                }
            }
        });
    }

    /**
     * 取消一个部门的编辑信息
     */
    cancleOneOrgEditInfo() {
        promptBox({
            color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
            title: this.state.json['jf6005-000050'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
            content: `${this.state.json['jf6005-000150']}`,
            noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
            noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
            beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
            cancelBtnName: this.state.json['jf6005-000008'],         // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
            hasCloseBtn: false,             //显示“X”按钮，默认不显示，不显示是false，显示是true
            beSureBtnClick: () => {
                this.isShowOrgDetailPage(orgDetailPage.browse);
                if (this.newAdd) {
                    this.newAdd = false;
                    OrgInfoCancelAction({
                        bill_code: this.autoGeneratedCode
                    }).then(res => {

                    })
                }
                let pkOrg = getDefData('orgunit_pk_org', cacheConfig.dataSource) || '';
                if (pkOrg && pkOrg.length > 1) {
                    this.updateState({
                        orgTypeTabsArr: []
                    });
                    this.getOrgInfoOneAction(pkOrg);
                } else {
                    // 清空 表格数据
                    this.emptyDetailPage();
                }
                pkOrg = null;
            },   // 确定按钮点击调用函数,非必输
            // cancelBtnClick: functionCancel,  // 取消按钮点击调用函数,非必输
            // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
            closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是false点击不关闭,点击关闭是true
        });
    }

    /**
     * 判断是否需要提示变更业务单元根节点
     * @param data
     */
    checkRootAdminChangedAction(data, orgName) {
        let pk_fatherorg = this.props.form.getFormItemsValue('adminorg', 'pk_fatherorg');
        if (!pk_fatherorg.value) {
            let pk_adminorg = this.props.form.getFormItemsValue('adminorg', 'pk_adminorg');
            let postData = {
                pk_adminorg: pk_adminorg.value
            };
            // 判断是否需要提示变更业务单元根节点
            checkRootAdminChangedAction(postData).then((res) => {
                if (!res.success) {
                    toast({color: "danger", content: res.formulamsg});
                    return
                }
                if (res.data.rootAdminChangedFlag) {
                    promptBox({
                        color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
                        title: this.state.json['jf6005-000050'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
                        content: `1、${this.state.json['jf6005-000114']}，${this.state.json['jf6005-000115']}.
                        2、${this.state.json['jf6005-000116']}${res.data.rootAdminCode}${this.state.json['jf6005-000117']}${orgName}${this.state.json['jf6005-000118']}？
                        ${this.state.json['jf6005-000119']}，${this.state.json['jf6005-000120']}`,             // 提示内容,非必输/* 国际化处理： 否则上级行政组织不可为空,请返回编辑界面录入上级行政组织后保存*/
                        noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
                        noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
                        beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
                        cancelBtnName: this.state.json['jf6005-000008'],         // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
                        hasCloseBtn: false,             //显示“X”按钮，默认不显示，不显示是false，显示是true
                        beSureBtnClick: () => {
                            this.state.rootAdminChangedFlag = true;
                            // 判断是否需要提示变更公司根节点
                            this.checkRootCorpChangedAction(data, orgName)
                        },   // 确定按钮点击调用函数,非必输
                        // cancelBtnClick: functionCancel,  // 取消按钮点击调用函数,非必输
                        // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
                        closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是false点击不关闭,点击关闭是true
                    });
                    return
                }
                // 判断是否需要提示变更公司根节点
                this.checkRootCorpChangedAction(data, orgName)
            });
            pk_adminorg = null;
            postData = null;
        } else {
            // 判断是否需要提示变更公司根节点
            this.checkRootCorpChangedAction(data, orgName)
        }
        pk_fatherorg = null;
    }

    /**
     * 检测是否需要提示变更公司根节点
     * @param data
     */
    checkRootCorpChangedAction(data, orgName) {
        let pk_fatherorg = this.props.form.getFormItemsValue('corp', 'pk_fatherorg');
        let isgroupcorp = this.props.form.getFormItemsValue('corp', 'isgroupcorp');
        let orgtype2 = this.props.form.getFormItemsValue('orgtype', 'orgtype2');
        if (orgtype2.value && (!isgroupcorp.value) && (!pk_fatherorg.value)) {
            let pk_corp = this.props.form.getFormItemsValue('corp', 'pk_corp');
            // 判断是否需要提示变更公司根节点
            let postData = {
                pk_corp: pk_corp.value
            };
            checkRootCorpChangedAction(postData).then((res) => {

                if (!res.success) {
                    toast({color: "danger", content: res.formulamsg});
                    return
                }
                if (res.data.rootCorpChangedFlag) {
                    promptBox({
                        color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
                        title: this.state.json['jf6005-000050'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
                        content: `${this.state.json['jf6005-000116']}${orgName}${this.state.json['jf6005-000121']}${res.data.rootCorpName}${this.state.json['jf6005-000122']}？${this.state.json['jf6005-000123']}，${this.state.json['jf6005-000124']}.`,             // 提示内容,非必输/* 国际化处理： 是否将,公司作为,的上级公司,否则上级公司不可为空,请返回编辑界面录入上级公司后保存*/
                        noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
                        noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
                        beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
                        cancelBtnName: this.state.json['jf6005-000008'],         // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
                        hasCloseBtn: false,             //显示“X”按钮，默认不显示，不显示是false，显示是true
                        beSureBtnClick: () => {
                            // 确定 向下执行 系统默认将  该公司  作为根组织的上级公司
                            this.checkRootOrgChangedAction(data, orgName)
                        },   // 确定按钮点击调用函数,非必输
                        // cancelBtnClick: () => {
                        // },  // 取消按钮点击调用函数,非必输
                        // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
                        closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是false点击不关闭,点击关闭是true
                    });
                    return
                }
                // 判断是否需要提示变更行政组织根节点
                this.checkRootOrgChangedAction(data, orgName)
            });
            pk_corp = null;
            postData = null;
        } else {
            // 判断是否需要提示变更行政组织根节点
            this.checkRootOrgChangedAction(data, orgName)
        }
        pk_fatherorg = null;
        isgroupcorp = null;
        orgtype2 = null;
    }

    /**
     * 判断是否需要提示变更行政组织根节点
     * @param data
     */
    checkRootOrgChangedAction(data, orgName) {
        let pk_fatherorg = this.props.form.getFormItemsValue(orgInfFormId, 'pk_fatherorg');
        if (!pk_fatherorg.value) {
            checkRootOrgChangedAction(data).then((res) => {
                if (!res.success) {
                    toast({color: "danger", content: res.formulamsg});
                    return
                }
                if (res.data.rootOrgChangedFlag) {
                    promptBox({
                        color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
                        title: this.state.json['jf6005-000050'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
                        content: `${this.state.json['jf6005-000116']}${orgName}${this.state.json['jf6005-000125']}${res.data.rootOrgName}${this.state.json['jf6005-000126']}？${this.state.json['jf6005-000127']}，${this.state.json['jf6005-000128']}.`,             // 提示内容,非必输/* 国际化处理： 是否将,业务单元作为,的上级业务单元,否则上级组织不可为空,请返回编辑界面录入上级组织后保存*/
                        noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
                        noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
                        beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
                        cancelBtnName: this.state.json['jf6005-000008'],         // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
                        hasCloseBtn: false,             //显示“X”按钮，默认不显示，不显示是false，显示是true
                        beSureBtnClick: () => {
                            // 确定 向下执行 系统默认将   该业务单元   作为根组织的上级业务单元
                            this.orgInfoSaveAction(data, orgName)
                        },   // 确定按钮点击调用函数,非必输
                        // cancelBtnClick: functionCancel,  // 取消按钮点击调用函数,非必输
                        // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
                        closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是false点击不关闭,点击关闭是true
                    });
                    return
                }
                this.orgInfoSaveAction(data, orgName)
            })
        } else {
            this.orgInfoSaveAction(data, orgName)
        }
        pk_fatherorg = null;
    }

    /**
     * 保存组织信息
     */
    orgInfoSaveAction() {
        let orgtypeData = this.props.form.getAllFormValue(orgtype).rows[0].values; // 职能信息

        let data = {
            rootAdminChangedFlag: this.state.rootAdminChangedFlag,
            ui_state: this.newAdd ? 1 : 2,  //1:新增,2:修改
            [adminorg]: this.props.form.getAllFormValue(adminorg),
            [corp]: this.props.form.getAllFormValue(corp),
            [hrorg]: this.props.form.getAllFormValue(hrorg),
            [orgInfFormId]: this.props.form.getAllFormValue(orgInfFormId)
        };
        this.state.gridrelationTable.forEach(item => {
            let tableId = item.code;
            data[tableId] = {
                rows: this.props.cardTable.getAllRows(tableId)
            }
        });
        // 组织主管中scall的值置null
        this.nullOrgmanagerScall(data[orgmanagers].rows);

        this.copyObject(data[orgInfFormId].rows[0].values, orgtypeData, ['orgtype2', 'orgtype4', 'orgtype29']);
        formatDisplayOrder(data[adminorg].rows[0].values, false);
        orgInfoSaveAction(data).then((res) => {
            this.state.rootAdminChangedFlag = false;
            if (!res.success) {
                return;
            }
            this.newAdd = false;
            this.emptyDetailPage();
            this.isShowOrgDetailPage(orgDetailPage.browse);
            /* 国际化处理： 组织信息  保存成功*/
            toast({color: "success", content: this.state.json['jf6005-000043']}); /* 国际化处理： 保存成功！！！*/
            let pk_org;
            if (data.ui_state === 1) {
                // 如果是新增则显示 将返回的数据重新填写
                if (!res.data || !res.data[orgInfFormId]) {
                    return
                }
                let allpkorg;
                pk_org = res.data[orgInfFormId][orgInfFormId].rows[0].values.pk_org.value;
                setDefData('orgunit_pk_org', cacheConfig.dataSource, pk_org);
                allpkorg = getDefData('orgunit_allpkorg', cacheConfig.dataSource);
                if (!Array.isArray(allpkorg)) {
                    allpkorg = []
                }
                allpkorg.push(pk_org);
                cacheTools.set('allpks', allpkorg);
                setDefData('orgunit_allpkorg', cacheConfig.dataSource, allpkorg);
            } else if (data.ui_state === 2) {
                pk_org = getDefData('orgunit_pk_org', cacheConfig.dataSource) || '';
            }
            this.detailnode.orgInfoQueryOneSucc(res, pk_org, null);
            orgtypeData = null;
            data = null;
        }).catch(err => {
            orgtypeData = null;
            data = null;
            this.state.rootAdminChangedFlag = false;
        });
    }

    //==========方法/工具==============

    /**
     * 组织主管中scall的值置null
     * @param rows
     */
    nullOrgmanagerScall(rows) {
        if (!Array.isArray(rows)) return;
        rows.map(item => {
            let values = item.values;
            for (let key in values) {
                let value = values[key];
                if (value.hasOwnProperty('scale') && Number(value.scale) === -1) {
                    value.scale = null;
                }
            }
        })
    }

    /**
     * 检测编辑信息
     * @returns {boolean}
     */
    checkOrgEditInfo(moduleIds) {
        let formCheck = this.props.form.isCheckNow(moduleIds);
        if (!formCheck) {
            formCheck = null;
            return false;
        }
        let tableIdArr = [];
        this.state.gridrelationTable.forEach(item => {
            tableIdArr.push(item.code)
        });
        let tableCheck = this.props.cardTable.checkTableRequired(tableIdArr);
        formCheck = null;
        return tableCheck
    }

    /**
     * 将职能信息的值复制给组织信息
     * @param source
     * @param target
     */
    copyObject(source, target, targetParams) {
        for (let key in source) {
            if (targetParams.includes(key)) {
                source[key] = target[key]
            }
        }
    }

    /**
     *
     * @state detail展示页面需要展示的转态： browse：浏览；   edit：编辑；
     */
    isShowOrgDetailPage(state) {
        if (state === orgDetailPage.browse) {
            this.updateState({
                showOrgDetailPage: true,
                showOrgDetailPFBtn: false
            });
            this.detailnode.setDetailStatus(state === orgDetailPage.edit);
        } else if (state === orgDetailPage.edit) {
            this.updateState({
                showOrgDetailPage: true,
                showOrgDetailPFBtn: true,
                managerCopyFlag: '0'
            });
            this.detailnode.setDetailStatus(state === orgDetailPage.edit);
        } else {
            this.updateState({
                showOrgDetailPage: false,
                showOrgDetailPFBtn: false
            });
            this.selectedManagerRow = {
                row: null,
                index: null
            };
            // 复制页面选择的行
            this.copyManagerRow = {
                row: null,
                index: null
            };
            setDefData('orgunit_pk_org', cacheConfig.dataSource, null);
            // 初始化按钮
            this.initButton();
            this.emptyDetailPage();
            // 重新加载数据
            this.getMainTableData()
        }
    }

    getOrgInfoOneAction(pk_org, callback) {
        this.detailnode.getOrgInfoOneAction(pk_org, callback);
    }

    /**
     * 清空详情页数据
     */
    emptyDetailPage() {
        this.detailnode.emptyDetailPage();
    }

    /**
     * 设置tabs的显示
     * @formdata  orgType的数据
     */
    setOrgTypeTabsArr(formdata) {
        let tabsArr = [], formdataValues, orgTypeTab = '', orgTypeEnState;

        formdataValues = formdata.rows[0].values;
        // 选择法人公司，基本信息中的所属公司置空，必需性为否，且不可编辑
        if (formdataValues.orgtype2.value) {
            tabsArr.push({
                type: 'corp',
                value: this.state.json['jf6005-000106']/* 国际化处理： 法人公司*/
            })
        }
        if (formdataValues.orgtype4.value) {
            tabsArr.push({
                type: 'hrorg',
                value: this.state.json['jf6005-000107']/* 国际化处理： 人力资源*/
            })
        }
        if (formdataValues.orgtype29.value) {
            tabsArr.push({
                type: 'adminorg',
                value: this.state.json['jf6005-000046']/* 国际化处理： 行政组织*/
            })
        }
        if (tabsArr.length > 0) {
            orgTypeTab = tabsArr[0].type;
            orgTypeEnState = this.props.form.getFormItemsValue(orgTypeTab, 'enablestate').value;
        }

        this.setState({
            orgTypeTabsArr: tabsArr,
            orgTypeTab: orgTypeTab,
            orgTypeEnState: orgTypeEnState
        }, () => {
            if (tabsArr.length > 0) {
                this.editPageOnTabClick(tabsArr[0].type)
            }
            tabsArr = null;
            formdataValues = null;
            orgTypeTab = null;
            orgTypeEnState = null;
        });
    }

    /**
     * 设置tab点击后，数据修改
     * @formdata  orgType的数据
     */
    tabAfterEvent(formdata) {
        let formdataValues = formdata.rows[0].values;
        // 选择法人公司，基本信息中的所属公司置空，必需性为否，且不可编辑
        if (formdataValues.orgtype2.value) {
            this.props.form.setFormItemsValue(orgInfFormId, {'pk_corp': {value: '', display: null}});
            this.props.form.setFormItemsDisabled(orgInfFormId, {'pk_corp': true});
            this.props.form.setFormItemsRequired(orgInfFormId, {'pk_corp': false});
        } else {
            this.props.form.setFormItemsDisabled(orgInfFormId, {'pk_corp': false});
            this.props.form.setFormItemsRequired(orgInfFormId, {'pk_corp': true})
        }
    }

    /**
     * 展示编辑页面的 tabs
     */
    showOrgtypeTabs() {
        if (this.state.orgTypeTabsArr.length < 1) {
            return ''
        }
        let defaultActiveKey = this.state.orgTypeTab;
        let timestamp = new Date().getTime();
        return <div className="tabs-box" key={timestamp}>
            <NCTabs navtype="turn" contenttype="moveleft" defaultActiveKey={defaultActiveKey}
                    onChange={this.editPageOnTabClick.bind(this)}>
                {
                    this.state.orgTypeTabsArr.map((item) => {
                        if (item.type === 'corp') {
                            return <NCTabPane tab={this.state.json['jf6005-000106']} key="corp"></NCTabPane>
                        } else if (item.type === 'hrorg') {
                            return <NCTabPane tab={this.state.json['jf6005-000107']} key="hrorg"></NCTabPane>
                        } else if (item.type === 'adminorg') {
                            return <NCTabPane tab={this.state.json['jf6005-000046']} key="adminorg"></NCTabPane>
                        }
                    })
                }
            </NCTabs>
        </div>
    }

    /**
     * 业务单元版本信息 查询
     */
    orgUnitCardVersionQueryAction(pk_vid) {
        let selectMember = this.props.treeTableManyCol.getSelectedRow(orglist);
        let pk_org = selectMember[0].values.pk_org.value;
        // 先清空表单
        this.props.form.EmptyAllFormValue('org_baseinfo');
        this.props.form.EmptyAllFormValue('org_corp');
        this.props.form.EmptyAllFormValue('org_hrorg');
        this.props.form.EmptyAllFormValue('org_adminorg');

        OrgUnitCardVersionQueryAction(pk_org, pk_vid).then(res => {
            // 设置当前页的状态
            this.props.cardPagination.setCardPaginationId({id: pk_vid, status: 1});
            let formData, orginfoTypeTabsArr = [];
            // 设置数据
            formData = {
                org_baseinfo: {
                    rows: []
                },
                org_corp: {
                    rows: []
                },
                org_hrorg: {
                    rows: []
                },
                org_adminorg: {
                    rows: []
                }
            };
            if (res.data && res.data.org_baseinfo) {
                let rows = res.data.org_baseinfo.org_baseinfo.rows;
                formData.org_baseinfo.rows = rows;

            } else {
                delete formData.org_baseinfo
            }

            if (res.data && res.data.org_func) {
                let rowsData = res.data.org_func.org_func.rows[0].values;
                formData.org_baseinfo.rows[0].values.orgtype2 = rowsData.orgtype2;
                formData.org_baseinfo.rows[0].values.orgtype4 = rowsData.orgtype4;
                formData.org_baseinfo.rows[0].values.orgtype29 = rowsData.orgtype29;
                if (rowsData.orgtype2 && rowsData.orgtype2.value) {
                    orginfoTypeTabsArr.push({
                        id: 'org_corp',
                        name: this.state.json['jf6005-000106']/* 国际化处理： 法人公司*/
                    });
                }
                if (rowsData.orgtype4 && rowsData.orgtype4.value) {

                    orginfoTypeTabsArr.push({
                        id: 'org_hrorg',
                        name: this.state.json['jf6005-000107']/* 国际化处理： 人力资源*/
                    });
                }
                if (rowsData.orgtype29 && rowsData.orgtype29.value) {
                    orginfoTypeTabsArr.push({
                        id: 'org_adminorg',
                        name: this.state.json['jf6005-000321']/* 国际化处理： 行政组织*/
                    });
                }
                rowsData = null;
            }
            this.updateState({
                orginfoTypeTabsArr
            }, () => {
                if (res.data && res.data.corp) {
                    formData.org_corp.rows = res.data.corp.corp.rows
                } else {
                    delete formData.org_corp
                }
                if (res.data && res.data.hrorg) {
                    formData.org_hrorg.rows = res.data.hrorg.hrorg.rows
                } else {
                    delete formData.org_hrorg
                }
                if (res.data && res.data.adminorg) {
                    formatDisplayOrder(res.data.adminorg.adminorg.rows[0].values, true);
                    formData.org_adminorg.rows = res.data.adminorg.adminorg.rows
                } else {
                    delete formData.org_adminorg
                }
                this.props.form.setAllFormValue(formData);
                formData = null;
                orginfoTypeTabsArr = null;
            });
        });

        selectMember = null;
        pk_org = null;
    }

    /**
     * 设置 按钮的禁用状态
     * @param buttonState
     * {
            autogen: showMode == 'card',
            firstrow: true,
            prerow: true,
            nextrow: true,
            lastrow: true,
            add: true, //新增
            edit: true, //编辑
            delete: true, //删除
            copy: true, //复制
            query: true, //查询
            refresh: true, //刷新
            showdisa: true, //显示停用
            print_group: true, //打印
            more: true //更多
        }
     */
    setBtnDisSta(buttonState) {
        this.props.button.setButtonDisabled(buttonState)
    }

    /**
     * 更新state对象
     * @param data
     * @param callback
     */
    updateState(data, callback = () => {
    }) {
        this.setState(data, callback);
    }

    /**
     * 查询首页列表的数据
     */
    getMainTableData(cb) {
        let searchModalValue = this.state.searchModalValue;
        if (!searchModalValue) {
            searchModalValue = this.props.search.getQueryInfo(searchId, true);
        }
        let postData = {
            ...searchModalValue,
            is_show_canceled: this.state.enablestate
        };

        this.requireUserlist(postData, cb);
        postData = null;
    }

    /**
     * 初始化元数据 table添加操作按钮 form 添加参数
     * @param data 元数据
     * @param _this  模板元素
     * @returns {*}
     */
    initMeta(data, _this) {
        let corpMeta = data.template["corp"];

        // 组织信息 所属公司 添加展示集团选项
        let pk_fatherorgItem = corpMeta.items.find(item => item.attrcode === 'pk_fatherorg');
        pk_fatherorgItem.isShowUnit = true;
        // 主管添加条件
        AddCondition(data.template[COMMON.orgInfFormId], {
            isIncludeDummyDept: true,
            endflag: "N"
        }, 'principal');
        // 主管添加条件
        AddCondition(data.template.orgmanagers, {
            GridRefActionExt: 'nccloud.web.hrjf.orginfo.sqlbuilder.UserManagerSQLBuilder',
            isIncludeDummyDept: true,
            endflag: "N"
        }, 'pk_psndoc');
        // 列表页 的组织名称 添加超链接
        tableRowAddLink(data.template[orglist], 'name', this.ncOnRowDoubleClick, 'value');
        // 组织版本化 版本名称 添加超链接
        tableRowAddLink(data.template['org_v'], 'vname', this.orgVersionDetail, 'value');
        // data.template[orglist].items = data.template[orglist].items.filter(item=>{
        //     return ['code', 'name', 'pk_org', 'pk_fatherorg', 'refpk'].includes(item.attrcode)
        // });
        data.template[orglist].items.push({
            attrcode: 'opr',
            itemtype: 'customer',
            label: this.state.json['jf6005-000102'], /* 国际化处理： 操作*/
            width: '300px',
            textAlign: 'center',
            visible: true,
            fixed: 'right',
            render(text, record, index) {

                return (
                    _this.props.button.createOprationButton(
                        ['edit', 'delete', 'querydept'],
                        {
                            area: 'body',
                            buttonLimit: 3,
                            onButtonClick: (props, id, e) => {
                                _this.onButtonClick(props, id, 'body', record)
                            },
                            popContainer: document.querySelector('.header2')
                        }
                    )

                )
            }
        })
    }

    pageInit = async () => {
        let data = this.props.domTemplate;
        let formRelation;
        // 添加关联项
        if (!data.template.formrelation) {
            data.template.formrelation = {}
        }
        formRelation = data.template.formrelation;

        let template = data.template;
        // table 子集
        let gridrelationTable = [];
        // formrelation中的模板为form 删除table等
        for (let key in formRelation) {
            let formrelationArr = formRelation[key];
            let newArr = formrelationArr.filter(formKey => {
                // 职能信息 UI上 不关联到组织信息上
                if (key === orgInfFormId && formKey === orgtype) {
                    return false
                }
                if (key === orgInfFormId && template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "table") {
                    // 添加table 子集
                    let {name, code} = template[formKey];
                    gridrelationTable.push({name, code})
                }
                return template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "form"
            });
            formRelation[key] = newArr;
        }

        if (!formRelation[orgInfFormId]) {
            formRelation[orgInfFormId] = ['orgver', 'orgauditinfo'];
        }
        if (!formRelation["corp"]) {
            formRelation["corp"] = ['corpotherinfo', 'corpcontactinfo'];
        }
        if (!formRelation["org_baseinfo"]) {
            formRelation["org_baseinfo"] = ['org_version', 'org_func'];
        }
        if (data["p_orgdept"] && data["p_orgdept"]["orgdept"]) {
            data.template["orgdept"] = data["p_orgdept"]["orgdept"]
        }
        if (data["p_orgversion"] && data["p_orgversion"]) {
            data.template["org_v"] = data["p_orgversion"]["org_v"];
            data.template["org_v_head"] = data["p_orgversion"]["org_v_head"]
        }
        if (data["p_StruVersion"] && data["p_StruVersion"]["orgStruversion"]) {
            data.template["orgStruversion"] = data["p_StruVersion"]["orgStruversion"];
        }
        if (data["p_queryStuVersion"] && data["p_queryStuVersion"]["org_baseinfo"]) {
            data["p_queryStuVersion"]["corp"]['code'] = 'org_corp';
            data["p_queryStuVersion"]["hrorg"]['code'] = 'org_hrorg';
            data["p_queryStuVersion"]["adminorg"]['code'] = 'org_adminorg';

            data.template["org_baseinfo"] = data["p_queryStuVersion"]["org_baseinfo"];
            data.template["org_version"] = data["p_queryStuVersion"]["org_version"];
            data.template["org_func"] = data["p_queryStuVersion"]["org_func"];
            data.template["org_corp"] = data["p_queryStuVersion"]["corp"];
            data.template["org_hrorg"] = data["p_queryStuVersion"]["hrorg"];
            data.template["org_adminorg"] = data["p_queryStuVersion"]["adminorg"];
        }
        this.initMeta(data, this);
        this.props.meta.setMeta(data && data.template ? data.template : {});
        this.props.button.setButtons(data && data.button ? data.button : {});
        // 初始化按钮
        this.initButton();
        await new Promise(resolve => {
            this.setState({
                queryOid: data.template[searchId].oid, //查询用  暂时没有用
                gridrelationTable //详情页子集
            }, resolve);
        });
        // 请求用户数据
        this.getMainTableData();
        formRelation = null;
    };

    /**
     * 初始化按钮
     */
    initButton() {
        // 设置按钮禁用状态
        this.setBtnDisSta({
            enable: true,   // 启用
            disable: true,  // 停用
            orgver: true,   // 组织版本化
            print: false,   // 打印
            output: false   // 输出
        });
    }

    componentDidMount() {
        // todo 测试用 添加黑色主题
        // addBlackStyle();

        this.config = COMMON.config;

        let callback = (json, status, inlt) => {
            if (status) {
                this.setState({json, inlt}, () => {
                    this.pageInit()
// this.initTemplate(this.props) //在这里可以进行ceateUIDom
                }) // 保存json和inlt到页面state中并刷新页面
            }
        };
        this.props.MultiInit.getMultiLang({moduleId: 'jf6005', domainName: 'hrjf', callback})
    }

    render() {
        let {button, search, modal} = this.props;
        let {createButtonApp} = button;
        let {createModal} = modal;
        const {
            orgDeptModalVisible,
            orgVerModalVisible,
            versionInfoModalVisible,
            aosOrgVerModalVisible,
            verModaltype,
            queryOid,
            orginfoTypeTabsArr
        } = this.state;
        return (
            <div className={`hrOrg ${THEME.bgc}`}>
                {createModal('confirm')}
                {/*联查部门*/}
                <OrgDeptModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    updateState={this.updateState.bind(this)}
                    orgDeptModalVisible={orgDeptModalVisible}
                />
                {/*人力资源组织体系版本化/行政组织体系版本化*/}
                <AosOrgVerModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    aosOrgVerModalVisible={aosOrgVerModalVisible}
                    verModaltype={verModaltype}
                    updateState={this.updateState.bind(this)}
                    queryOid={queryOid}
                />
                {/*组织版本化*/}
                <OrgVerModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    orgVerModalVisible={orgVerModalVisible}
                    updateState={this.updateState.bind(this)}
                    queryOid={queryOid}
                    orgUnitCardVersionQueryAction={this.orgUnitCardVersionQueryAction.bind(this)}
                />

                <VersionInfoModal
                    {...{json: this.state.json, inlt: this.state.inlt}}
                    {...this.props}
                    versionInfoModalVisible={versionInfoModalVisible}
                    updateState={this.updateState.bind(this)}
                    orginfoTypeTabsArr={orginfoTypeTabsArr}
                    orgUnitCardVersionQueryAction={this.orgUnitCardVersionQueryAction.bind(this)}
                />
                <div style={{display: 'none'}}>
                    {search.NCCreateSearch(searchId, {
                        clickSearchBtn: this.goSearch.bind(this),
                        onlyShowAdvArea: false,
                        showAdvSearchPlanBtn: true,
                        saveSearchPlan: true,
                        // oid: this.props.queryOid,
                        onlyShowSuperBtn: true,
                        replaceSuperBtn: this.state.json['jf6005-000063']/* 国际化处理： 查询*/
                    })}
                </div>
                {/*列表页面*/}
                <div style={{display: this.state.showOrgDetailPage ? 'none' : ''}} className={'listPage'}>
                    {/* 头部 header*/}
                    <div className="header">
                        {/* 显示停用 checkbox*/}
                        <div className="header-checkbox" style={{display: this.state.showNCCheck ? '' : 'none'}}>

                            <div className="show-off-checkbox">
                                <NCCheckbox checked={this.state.enablestate} onChange={
                                    this.onCheckShowDisable.bind(this)
                                }>{this.state.json['jf6005-000130']}</NCCheckbox>{/* 国际化处理： 显示停用*/}
                            </div>

                        </div>
                        {/* 按钮组 btn-group*/}
                        <div className="btn-group">
                            {
                                createButtonApp({
                                    area: buttonGroup,
                                    buttonLimit: 3,
                                    onButtonClick: (props, btncode) => {
                                        this.onButtonClick(props, btncode, buttonGroup, this);
                                    },
                                    popContainer: document.querySelector('.header-button-area')
                                })
                            }
                        </div>
                    </div>
                    {/*组织列表*/}
                    <TableModal
                        orglist={orglist}
                        cacheConfig={cacheConfig}
                        json={this.state.json}
                        {...this.props}
                        ref={node => {
                            this.tableModal = node;
                        }}
                    />
                </div>
                {/*编辑页面浏览*/}
                <DetailModal
                    autoGeneratedCode={this.autoGeneratedCode}
                    newAdd={this.newAdd}
                    showOrgDetailPage={this.state.showOrgDetailPage}
                    orgTypeTabsArr={this.state.orgTypeTabsArr}
                    orgTypeTab={this.state.orgTypeTab}
                    orgTypeEnState={this.state.orgTypeEnState}
                    showOrgDetailPFBtn={this.state.showOrgDetailPFBtn}
                    managerCopyFlag={this.state.managerCopyFlag}
                    gridrelationTable={this.state.gridrelationTable}
                    backButtonClick={this.backButtonClick.bind(this)}
                    showOrgtypeTabs={this.showOrgtypeTabs.bind(this)}
                    onButtonClick={this.onButtonClick.bind(this)}
                    pageQueryClick={this.pageQueryClick.bind(this)}
                    orgTypeOnAfterEvent={this.orgTypeOnAfterEvent.bind(this)}
                    saveOneOrgEditInfo={this.saveOneOrgEditInfo.bind(this)}
                    cancleOneOrgEditInfo={this.cancleOneOrgEditInfo.bind(this)}
                    setOrgTypeTabsArr={this.setOrgTypeTabsArr.bind(this)}
                    updateState={this.updateState.bind(this)}
                    json={this.state.json}
                    {...this.props}
                    ref={node => this.detailnode = node}
                />
            </div>
        )
    }
}

let condition = {
    pagecodeValues: COMMON.pagecodeValues,
    config: COMMON.config
};
createBillinfoPage(condition, HomeWraper).then(res => res = null);
export default HomeWraper
