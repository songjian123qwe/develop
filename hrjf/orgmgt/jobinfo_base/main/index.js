/**
 * Created by shenzhuang on 2018/10/13.
 */
import React, {Component} from 'react';
import './index.less'
import {high, createPage, toast, base, getUrlParam, promptBox, getBusinessInfo, print, output} from 'nc-lightapp-front';
import {hrAjax as ajax} from 'src/hrpub/common/utils/utils';
import Transfer from '../../../public/components/transferTable/Transfer';
import referOfJobLevel from '../../../refer/jfref/JobLevelGridRef'
import BackBtn from 'src/hrpub/common/components/hr-back'
import CapaSelAction from "../functions/CapaSelAction";
import {queryDetailAction} from "../functions/queryDetailAction";
import {COMMON} from "../common/common";
import CheckCapaUsedAction from "../functions/CheckCapaUsedAction";
import {THEME} from "../../../public/theme/theme";
import {saveValidate} from "../../../public/functions/orgtools";

let {NCCheckbox, NCSwitch} = base;

const {
    basedetailId,
    jobaimId,
    jobcontentId,
    jobcapaId,
    jobrightId,
    levelrelationId,
    treeId
} = COMMON;

class JobInfo extends Component {
    constructor(props) {
        super(props);
        this.config = props.context;
        this.state = {
            gridrelationTable: [], // 详情页 子集 [{code:'code12234',name:'zhangsan'}]
            templatePageId: null, //模板pageid 公式校验 用
            showMode: 'browse',
            showChangePage: false,
            enablestate: true,
            detail: false,
            pk_filtertype: '',
            //是否启用
            isEnable: {
                scale: '1',
                value: '2'
            },
            // 行信息
            rowInfo: null,
            jobpsndoc: true,
            // 上传需要的参数
            showUploader: false,
            target: null,
            groupLists: [],
            billId: '',
            billNo: '',
            addFlag: false,
            treeData: null,
            leftData: {rows: []},
            rightData: {rows: []},
            copyCheck: false,
            inlt: [],
            json: [],
            referValue: [],
            _searchData: {}
        };
        //原始数据,用来初始化
        this.autoGeneratedCode = '';
        this.oid = '';
        this.rightData = {rows: []};
        this.leftData = {rows: []};
        this.capa = true;
        this.indetail = false;
        //复制的数据
        this.copyData = {
            arr: [],
            category: ''
        };
        this.businessInfo = '';
        // transferData
        this.transferRightData = [];
        this.copyjobData = {
            top1: [],
            left5: {}
        };
        this.treeDataList = [];
        this.templateFormId = [];
    }

    pageInit = ()=>{
        let data = this.props.domTemplate;
        let formRelation;
        // 添加关联项
        if (!data.template.formrelation) {
            data.template.formrelation = {}
        }
        formRelation = data.template.formrelation;

        let template = data.template;
        // table 子集
        let gridrelationTable = [];
        // formrelation中的模板为form 删除table等
        for (let key in formRelation) {
            let formrelationArr = formRelation[key];
            let newArr = formrelationArr.filter(formKey => {
                if (key === basedetailId && template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "table") {
                    // 添加table 子集
                    let {name, code} = template[formKey];
                    gridrelationTable.push({name, code})
                }
                return template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "form"
            });
            formRelation[key] = newArr;
        }

        this.setState({
            buttons: data.button || [],
            context: data.context || {},
            gridrelationTable,
            templatePageId: template.pageid||''
        });
        this.oid = data.template.jobquery.oid;
        for (let key in data.template) {
            let temp = data.template[key];
            if (typeof temp !== "object") {
                continue;
            }
            if (temp.moduletype === 'form') {
                this.templateFormId.push(temp.code)
            }
        }
        data.template.copyinfo2 = JSON.parse(JSON.stringify(data.template.copyinfo));
        this.props.meta.setMeta(data && data.template ? data.template : {});
        this.props.button.setButtons(data && data.button ? data.button : {});
    };

    componentWillMount() {
        let callback = (json, status, inlt) => {
            //console.log(json)
            if (status) {
                this.setState({json: json, inlt: inlt}, () => {
                    this.fetchTreeData();
// this.initTemplate(this.props) //在这里可以进行ceateUIDom
                }) // 保存json和inlt到页面state中并刷新页面
            }
        };
        this.props.MultiInit.getMultiLang({moduleId: 'jf6005', domainName: 'hrjf', callback})
        //console.log(this.state.json)

    }

    //获取左树数据
    fetchTreeData() {
        ajax({
            url: '/nccloud/hrjf/jobtype/JobTypeQueryAction.do',
            data: {
                'showUnUseDataFlag': false,
                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
            },
            success: res => {
                //console.log('res')
                ////console.log(res.data)
                // res.data ? res.data.forEach(v => {
                //     v = Object.assign(v,{value: {editIcon:false}})
                // }) : ''
                const _obj = [{
                    key: '',
                    title: this.state.json['jf6005-000198'],/* 国际化处理： 职务类别*/
                    refname: this.state.json['jf6005-000198'],/* 国际化处理： 职务类别*/
                    refpk: 'nopk',
                    id: '',
                    name: this.state.json['jf6005-000198'],/* 国际化处理： 职务类别*/
                    pid: '',
                    innercode: '',
                    code: '',
                    nodeData: {
                        nodeValue: {
                            jobtypename: this.state.json['jf6005-000198'],/* 国际化处理： 职务类别*/
                            "status": "0",
                            "enablestate": "2",
                            "value": {
                                "editIcon": false,
                                "addIcon": false,
                                "delIcon": false
                            }
                        }
                    },
                    children: res.data || [],
                    "value": {
                        "editIcon": false,
                        "addIcon": false,
                        "delIcon": false
                    }
                }];
                ////console.log(JSON.stringify(res.data))
                this.setState({
                    treeData: res.data || []
                });
                this.treeDataList = this.toList(res.data);
                this.props.syncTree.setSyncTreeData(treeId, _obj);
                this.props.syncTree.hideIcon(treeId, 'nopk', {
                    "editIcon": false,
                    "addIcon": true,
                    "delIcon": false
                })
            }
        })
    }

    onCheckBoxChange(e) {
        //////console.log('thiss checkbox')
        sessionStorage.setItem('showDisabledFlag', e);
        sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId')) : '';
        this.setState({})
    }

    onSelectEve(c, d, e, f) {
        this.setState({
            rowInfo: null
        });
        this.resetData();
        sessionStorage.setItem('treeNodeData', JSON.stringify(d));
        sessionStorage.removeItem('_pk_value');
        sessionStorage.setItem('jobinfo_treeId', c);
        this.fetchTableData(c)
    }

    //获取右侧职务列表数据(右上)
    fetchTableData(c, searchData) {
        let typePk = c;
        if (c === 'nopk') typePk = null;
        searchData = searchData ? searchData : this.state._searchData;
        ajax({
            url: '/nccloud/hrjf/job/queryBaseAction.do',
            data: {
                typePk,
                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                // conditions:searchData&&searchData.conditions || [],
                querycondition: searchData && searchData.querycondition || {},
                "querytype": "tree",
                'showDisable': sessionStorage.getItem('showDisabledFlag') === 'true',
                'oid': this.oid
            },
            success: res => {
                //console.log('明月满街流水远，华灯入望众星高。')
                if (res.success && !!res.data) {
                    this.copyjobData.top1 = res.data !== null ? res.data.baseInfo.rows : [];
                    this.props.cardTable.setTableData('baseInfo', {rows: res.data !== null ? res.data.baseInfo.rows : []});
                    let baseInfoList = this.props.cardTable.getAllRows('baseInfo');
                    if (this.state.rowInfo) {
                        //console.log('hahahahah')
                        //console.log('well')
                        //console.log(this.state.rowInfo)
                        //console.log(baseInfoList)
                        try {
                            let _index = baseInfoList.findIndex((v, index) => v.values.jobcode.value === this.state.rowInfo.values.jobcode.value);
                            //console.log('index')
                            //console.log(_index)
                            this.props.cardTable.focusRowByIndex('baseInfo', _index)
                        } catch (e) {

                        }
                    }
                } else {
                    this.props.cardTable.setTableData('baseInfo', {rows: []})
                }
            }
        })
    }

    /**
     * 获取详情页数据
     * @param pk_job
     */
    fetchFormData(pk_job) {
        return queryDetailAction.call(this, pk_job)
    }

    TableRowClick(c, d, e) {
        //edit 状态下不查询
        if (this.config.nodeType !== 'GLOBE_NODE') {
            if (e.values.pk_org.value === "GLOBLE00000000000000") {
                this.props.button.setButtonDisabled(['edit', 'delete'], true);
            } else {
                this.props.button.setButtonDisabled(['edit', 'delete'], false);
            }
        }
        if (this.props.cardTable.getStatus('baseInfo') === 'browse') {
            this.setState({
                rowInfo: e
            });
            //
            this.resetData(true);
            this.fetchFormData(e.values.pk_job.value);
            sessionStorage.setItem('_pk_value', e.values.pk_job.value)
        }
    }

    tableDubleRowClick(c, d) {
        this.fetchFormData(d.values.pk_job.value).then(v => {
            if (this.config.nodeType !== 'GLOBE_NODE') {
                if (d.values.pk_org.value === "GLOBLE00000000000000") {
                    this.props.button.setButtonDisabled(['edit', 'delete'], true);
                } else {
                    this.props.button.setButtonDisabled(['edit', 'delete'], false);
                }
            }
            sessionStorage.setItem('_pk_value', d.values.pk_job.value);
            this.setState({
                detail: true,
                rowInfo: d
            }, () => {
                this.updateButtonStatus('browse');
                this.props.form.setFormStatus(basedetailId, 'browse');
            });
            this.jobAbility()
        })
    }

    //重置右侧列表数据
    resetData(e) {
        if (!e) {
            this.props.cardTable.setTableData('baseInfo', {rows: []})
        }
    }

    componentDidMount() {
        this.updateButtonStatus('browse');
        this.businessInfo = getBusinessInfo() || {groupId: '0001XY10000000000DD3', groupName: '通讯总部'};
        sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId')) : '';
        this.setState({
            isEnable: {
                display: this.state.json['jf6005-000110'],/* 国际化处理： 已启用*/
                scale: '1',
                value: '2'
            }
        })
        this.pageInit();
    }

    // 统一处理按钮事件
    onButtonClick(prop, btncode, areacode, opt) {
        switch (btncode) {
            case 'add':
                this.props.button.setButtonDisabled('saveadd', false);
                this.beforeAddCase().then(finalRes => this.btnAddCase(finalRes));
                break;
            case 'edit':
                this.props.button.setButtonDisabled('saveadd', true);
                if (!this.state.detail) {
                    if (this.state.rowInfo === null) {
                        toast({color: "warning", content: this.state.json['jf6005-000178']});/* 国际化处理： 请先选择职务!*/
                        return false
                    } else {
                        this.fetchFormData(this.state.rowInfo.values.pk_job.value).then(() => {
                            !this.state.detail ? this.setState({
                                detail: true
                            }) : '';
                            this.letThemEditable();
                            this.jobAbility()
                        })
                    }
                } else {
                    this.letThemEditable();
                    this.jobAbility()
                }
                break;
            case 'cancel':
                if (this.autoGeneratedCode) {
                    ajax({
                        url: '/nccloud/hrjf/job/cancelAction.do',
                        data: {
                            bill_code: this.autoGeneratedCode,
                            pk_org: this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
                        },
                        success: res => {
                            //console.log(res)
                            this.autoGeneratedCode = ''
                        }

                    })
                }
                if (this.state.addFlag && !this.indetail) {
                    this.setState({
                        detail: false,
                        addFlag: false
                    }, () => this.letThemBrowse('addFlag'))
                } else {
                    this.letThemBrowse()
                }
                break;
            case 'save':
                this.saveHYX();
                break;
            case 'job-people':
                break;
            case 'now-people':
                this.queryPeople(true);
                break;
            case 'past-people':
                this.queryPeople(false);
                break;
            case 'file-manage':
                if (this.state.rowInfo === null) {
                    toast({color: "warning", content: this.state.json['jf6005-000178']});/* 国际化处理： 请先选择职务!*/
                    return false
                } else {
                    //
                    let billId = this.state.rowInfo.values.pk_job.value;
                    //console.log(this.state.rowInfo)
                    this.setState({
                        showUploader: true,
                        billId: billId,
                        //billNo: billNo
                    })
                }
                break;
            case 'delete':
                if (this.state.rowInfo === null) {
                    toast({color: "warning", content: this.state.json['jf6005-000178']})/* 国际化处理： 请先选择职务!*/
                } else {
                    // //console.log()
                    promptBox({
                        color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
                        title: this.state.json['jf6005-000153'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 确认删除*/
                        content: this.state.json['jf6005-000154'],             // 提示内容,非必输/* 国际化处理： 您确定要删除么?*/
                        noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
                        noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
                        beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
                        cancelBtnName: this.state.json['jf6005-000008'],         // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
                        hasCloseBtn: true,             //显示“X”按钮，默认不显示，不显示是false，显示是true
                        beSureBtnClick: this.deleteCase.bind(this),   // 确定按钮点击调用函数,非必输
                        // cancelBtnClick: functionCancel,  // 取消按钮点击调用函数,非必输
                        // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
                        closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是true点击关闭，阻止关闭是false
                    })

                }
                break;
            case 'copy':
                this.showDisCopy('N');
                break;
            case 'refresh':
                this.updateButtonStatus('browse');
                sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId')) : '';
                this.fetchTreeData();
                break;
            case 'search':
                // this.props.modal.show('query')
                let meta = this.props.meta.getMeta();
                //console.log(meta)
                let _this = this;
                meta.jobquery.items.map((obj) => {
                    //项目分类参照
                    obj.queryCondition = function () {
                        return {
                            'pk_org': _this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : _this.businessInfo.groupId,
                            'pk_group': _this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : _this.businessInfo.groupId
                        }
                    }
                });
                this.props.meta.setMeta(meta);
                this.props.search.openAdvSearch('jobquery', true);
                break;
            case 'print_group':
                this.state.detail ? this.print_card2() : this.print_card1();
                break;
            case 'output':
                this.state.detail ? this.ouput_card2() : this.ouput_card1();
                break;
            case 'saveadd':
                this.saveHYX('saveAdd');
                break
        }
    }

    //print_card1
    print_card1 = () => {
        //console.log(sessionStorage.getItem('treeNodeData'))
        if (sessionStorage.getItem('treeNodeData') === null || JSON.parse(sessionStorage.getItem('treeNodeData')).refpk === 'nopk') {
            toast({color: "warning", content: this.state.json['jf6005-000177']});/* 国际化处理： 请选择类别!*/
            return false
        }
        let oids = [];
        let formData = this.props.cardTable.getAllRows('baseInfo');
        if (!formData.length) {
            toast({color: "warning", content: this.state.json['jf6005-000314']});/* 国际化处理： 暂无打印数据!*/
            return false
        }
        formData ? formData.forEach(v => {
            oids.push(v.values.pk_job.value)
        }) : '';
        print(
            'pdf',  //支持两类: 'html'为模板打印, 'pdf'为pdf打印
            '/nccloud/hrjf/job/PrintAction.do', //后台服务url
            {
                funcode: '60053030',      //小应用编码
                nodekey: 'tbprint',     //模板节点标识
                oids: oids,    // 功能节点的数据主键   oids含有多个元素(['1001A41000000000A9LR','1001A410000000009JDD'])时为批量打印
                appcode: '60053030', // 必填 应用编码
                //nodekey: '' // 模版标识
            }
        )
    };
    //print_card2
    print_card2 = () => {
        let formData1 = this.props.form.getAllFormValue(basedetailId);
        //console.log(formData1)
        if (formData1.rows && formData1.rows[0].values.pk_job && formData1.rows[0].values.pk_job.value) {
            let oids1 = formData1.rows[0].values.pk_job.value;
            print(
                'pdf',  //支持两类: 'html'为模板打印, 'pdf'为pdf打印
                '/nccloud/hrjf/job/PrintAction.do', //后台服务url
                {
                    funcode: '60053030',      //小应用编码
                    nodekey: 'fmprint',     //模板节点标识
                    oids: [oids1],    // 功能节点的数据主键   oids含有多个元素(['1001A41000000000A9LR','1001A410000000009JDD'])时为批量打印
                    appcode: '60053030', // 必填 应用编码
                    //nodekey: '' // 模版标识
                }
            )
        }
    };

    ouput_card1 = () => {
        let oids = [];
        let formData = this.props.cardTable.getAllRows('baseInfo');
        if (!formData.length) {
            toast({color: "warning", content: this.state.json['jf6005-000314']});/* 国际化处理： 暂无打印数据!*/
            return false;
        }
        formData ? formData.forEach(v => {
            oids.push(v.values.pk_job.value)
        }) : '';
        output({
            url: '/nccloud/hrjf/job/PrintAction.do',
            data: {
                funcode: '60053030',      //小应用编码
                nodekey: 'tbprint',     //模板节点标识
                oids: oids,    // 功能节点的数据主键   oids含有多个元素(['1001A41000000000A9LR','1001A410000000009JDD'])时为批量打印
                outputType: 'output',
                filename: this.config.nodeType === 'GLOBE_NODE' ? '职务信息-全局' : '职务信息-集团'
            }
        })
    };
    ouput_card2 = () => {
        let formData1 = this.props.form.getAllFormValue(basedetailId);
        //console.log(formData1)
        if (formData1.rows && formData1.rows[0].values.pk_job && formData1.rows[0].values.pk_job.value) {
            let oids1 = formData1.rows[0].values.pk_job.value;
            output({
                url: '/nccloud/hrjf/job/PrintAction.do',
                data: {
                    funcode: '60053030',      //小应用编码
                    nodekey: 'fmprint',     //模板节点标识
                    oids: [oids1],    // 功能节点的数据主键   oids含有多个元素(['1001A41000000000A9LR','1001A410000000009JDD'])时为批量打印
                    outputType: 'output',
                    filename: '职务'
                }
            })
        }
    };
    //caseadd
    beforeAddCase = () => {
        let nodeData = sessionStorage.getItem('treeNodeData');
        nodeData = JSON.parse(nodeData);
        let pk_jobtype = nodeData && nodeData.key !== 'nopk' ? nodeData.key : '';
        let pk_org = this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
        //console.log('pk_jobtype'+pk_jobtype)
        let LinDaiYu = new Promise(resolve => {
            ajax({
                url: '/nccloud/hrjf/job/addAction.do',
                data: {
                    pk_jobtype,
                    pk_org
                },
                success: res => {
                    resolve(res)
                }
            })
        });
        return LinDaiYu
    };
    btnAddCase = (res) => {
        this.indetail = this.state.detail;
        let {autoGeneratedCode, [basedetailId]: basedetail, isCodeEditable} = res.data;
        this.autoGeneratedCode = autoGeneratedCode;

        try {
            autoGeneratedCode = autoGeneratedCode ? autoGeneratedCode : basedetail[basedetailId].rows[0].values.jobcode.value
        } catch (e) {

        }
        this.props.form.setFormItemsDisabled(basedetailId, {
            jobcode: !isCodeEditable
        });
        let nodeData = sessionStorage.getItem('treeNodeData');
        nodeData = JSON.parse(nodeData);
        //console.log(nodeData)
        this.letThemEditable();
        this.setState({
            detail: true,
            addFlag: true,
            isEnable: {
                scale: '1',
                value: '2'
            },
            referValue: []
        });
        this.emptyDetail();
        this.props.form.setFormItemsValue(basedetailId, {});
        this.props.form.setAllFormValue({
            [basedetailId]: {
                rows: [{
                    values: {
                        jobcode: {display: autoGeneratedCode, value: autoGeneratedCode, sacle: "-1"},
                        pk_grade_source: {
                            display: nodeData && nodeData.key !== 'nopk' ? nodeData.name : '',
                            scale: "-1",
                            value: nodeData && nodeData.key !== 'nopk' ? nodeData.key : ''
                        },
                        pk_jobtype: {
                            display: basedetail && basedetail[basedetailId] && basedetail[basedetailId].rows[0].values.pk_jobtype.display,
                            scale: "-1",
                            value: basedetail && basedetail[basedetailId] && basedetail[basedetailId].rows[0].values.pk_jobtype.value
                        },
                        "pk_org": {
                            display: this.config.nodeType === 'GLOBE_NODE' ? this.state.json['jf6005-000147'] : this.businessInfo.groupName,
                            value: this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
                        },/* 国际化处理： 全局*/
                        jobname: {display: '', value: ''},
                        ts: {"display": null, "value": null, "scale": "-1"},
                        memo: {display: '', value: ''},
                        enablestate: {
                            "display": this.state.json['jf6005-000110'],/* 国际化处理： 已启用*/
                            "scale": "-1",
                            "value": "2"
                        },
                        pvtjobgrade: {display: null, scale: "-1", value: false},
                        reqexp: {display: '', value: ''},
                        reqother: {display: '', value: ''}
                    }
                }]
            }
        });
        //console.log(nodeData)
        nodeData && nodeData.key ? nodeData.key === 'nopk' ? this.props.button.setButtonDisabled(['table-add', 'table-delete'], true) : this.props.button.setButtonDisabled(['table-add', 'table-delete'], false) : this.props.button.setButtonDisabled(['table-add', 'table-delete'], true);

        this.jobAbility()
    };

    /**
     * 清空详情页 模板数据
     */
    emptyDetail() {
        this.props.form.EmptyAllFormValue(basedetailId);
        this.state.gridrelationTable.forEach(item => {
            let tableId = item.code;
            this.props.cardTable.setTableData(tableId, {rows: []});
        })
    }

    // 删除事件
    deleteCase() {
        let temp = [this.state.rowInfo];
        let modelInfo = {
            model: ({rows: temp})
        };
        ajax({
            url: '/nccloud/hrjf/job/delAction.do',
            type: 'post',
            data: modelInfo,
            success: res => {
                //console.log(res)
                if (res.success) {
                    toast({color: "success", content: this.state.json['jf6005-000164']});/* 国际化处理： 删除成功!*/
                    this.setState({
                        rowInfo: null
                    });
                    this.revertData()
                }
            }
        })
    }


    // 任职人员查询
    queryPeople(boo) {
        if (!this.state.detail) {
            if (this.state.rowInfo === null) {
                toast({color: "warning", content: this.state.json['jf6005-000178']});/* 国际化处理： 请先选择职务!*/
                return false
            }
        }
        this.props.modal.show('addNode');
        this.setState({
            jobpsndoc: boo
        });
        ajax({
            url: '/nccloud/hrjf/job/viewPsnAction.do',
            data: {
                'viewInPos': boo,
                'pk_job': this.state.rowInfo.values.pk_job.value,
            },
            success: res => {
                if (!!res.data) {
                    this.props.cardTable.setTableData('jobpsndoc', {rows: res.data !== null ? res.data.jobpsndoc.rows : []})
                }
            }
        })
    }

    // 关闭弹出框
    closeModal() {
        ////console.log(this)
        this.props.modal.close('addNode')
    }

    // 点击参照前的事件
    onBeforeEvents = (props, moduleId, key, value, changedrows, record, index) => {
        let formData1 = this.props.form.getAllFormValue(basedetailId);
        //console.log(formData1)
        let meta = props.meta.getMeta();
        if (key && key.attrcode === 'pk_jobtype') {
            //console.log(meta)
            meta[moduleId].items.map((obj) => {
                if (obj.attrcode === 'pk_jobtype') {//参照设置为多选
                    obj.queryCondition = () => ({
                        // 'intType': 0,
                        // 'pk_filtertype': JSON.parse(sessionStorage.getItem('treeNodeData')).nodeData.nodeValue.pk_jobtype,
                        // 'pk_joblevel': record.values.pk_joblevel.value
                        'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                        'pk_group': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
                    })
                }
            });
            props.meta.setMeta(meta)
        }
        if (moduleId === levelrelationId) {
            if (!formData1.rows[0].values.pk_jobtype.value) {
                toast({color: "warning", content: this.state.json['jf6005-000179']});/* 国际化处理： 请先选择职务类别!*/
                return false;
            }
            if (key === 'pk_joblevel') {
                meta[moduleId].items.map((obj) => {
                    //项目分类参照
                    obj.queryCondition = function () {
                        return {
                            "pk_filtertype": formData1.rows[0].values.pk_jobtype.value
                        }
                    }
                });
                props.meta.setMeta(meta);
            } else if (key === 'jobrank') {
                meta[moduleId].items.map((obj) => {
                    if (obj.attrcode === 'jobrank') {//参照设置为多选
                        obj.isMultiSelectedEnabled = true;
                        obj.queryCondition = () => ({
                            'intType': 0,
                            //'pk_filtertype': JSON.parse(sessionStorage.getItem('treeNodeData')).nodeData.nodeValue.pk_jobtype,
                            'pk_filtertype': formData1.rows[0].values.pk_jobtype.value,
                            'pk_joblevel': record.values.pk_joblevel.value
                        })
                    }
                });
                props.meta.setMeta(meta);
            } else if (key === 'defaultrank') {
                //console.log(record.values.jobrank.value)
                if (!record.values.jobrank.value) {
                    toast({color: "warning", content: this.state.json['jf6005-000309']});/* 国际化处理： 请先设置职等!*/
                    return false
                }
                const arr_str = record.values.jobrank.value;
                const arr = arr_str.split(',');
                //console.log(arr)
                meta[moduleId].items.map((obj) => {
                    if (obj.attrcode === 'defaultrank') {//参照设置为多选
                        obj.queryCondition = () => ({
                            'intType': 0,
                            //'pk_filtertype': JSON.parse(sessionStorage.getItem('treeNodeData')).nodeData.nodeValue.pk_jobtype,
                            'pk_filtertype': formData1.rows[0].values.pk_jobtype.value,
                            'pk_joblevel': record.values.pk_joblevel.value,
                            "filterPks": arr_str
                        })
                    }
                });
                props.meta.setMeta(meta);
            }
        }
        if (moduleId === basedetailId) {
            if (key === 'pk_jobtype') {
                meta[moduleId].items.map((obj) => {
                    if (obj.attrcode === 'pk_jobtype') {//参照设置为多选

                        obj.queryCondition = () => ({
                            // 'intType': 0,
                            // 'pk_filtertype': JSON.parse(sessionStorage.getItem('treeNodeData')).nodeData.nodeValue.pk_jobtype,
                            // 'pk_joblevel': record.values.pk_joblevel.value
                            'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                            'pk_group': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
                        })
                    }
                });
                props.meta.setMeta(meta);
            }
        }
        return true;
    };
    // 点击后事件
    onAfterEvent = (props, moduleId, key, value, changedrows, index, record) => {
        //能力素质指标子集
        if (moduleId === jobcapaId) {
            this.onTableAfterEvent(props, moduleId, key, value, changedrows, index, record)
        }
        if (moduleId === levelrelationId) {
            if (key === 'jobrank') {
                if (value && value.length === 1) {
                    //console.log('gogogogo')
                    let temp = {
                        display: value[0].values ? value[0].values.jobrankname.value : value[0].display,
                        value: value[0].values ? value[0].values.pk_jobrank.value : value[0].refpk
                    };
                    this.props.cardTable.setValByKeyAndIndex(levelrelationId, index, 'defaultrank', temp)
                } else if (!value || value && value.length === 0) {
                    this.props.cardTable.setValByKeyAndIndex(levelrelationId, index, 'defaultrank', {
                        display: null,
                        value: null
                    })
                }
                let _rank = this.props.cardTable.getValByKeyAndIndex(levelrelationId, index, 'defaultrank');
                !!(_rank.value && value && value.length && value.find(v => v.refpk === _rank.value) === undefined) && (this.props.cardTable.setValByKeyAndIndex(levelrelationId, index, 'defaultrank', {
                    display: null,
                    value: null
                }))
            }
        }
        return true
    };

    // 详情页的按钮统一处理事件
    onDetailButtonClick(c, d, e) {
        if (e === jobcapaId) {
            if (this.capa) {
                toast({color: "warning", content: this.state.json['jf6005-000323']});/* 国际化处理： 未开启能力素质指标!*/
                return false
            }
        }
        switch (d) {
            case 'add-row':
                if (e === levelrelationId) {
                    document.getElementById("referButton").click()
                } else {
                    let index = this.props.cardTable.getVisibleRows(e).length || 0;
                    this.props.cardTable.addRow(e, index, [], true)
                }
                break;
            case 'insert-row':
                if (e === levelrelationId) {
                    return false
                }
                let [selectArr, insertIndex] = [this.props.cardTable.getCheckedRows(e), 0];
                if (selectArr.length > 0) {
                    insertIndex = selectArr[selectArr.length - 1].index
                } else {
                    toast({color: "warning", content: this.state.json['jf6005-000181']});/* 国际化处理： 请选择要插入的行!*/
                    return
                }
                this.props.cardTable.addRow(e, insertIndex);
                break;
            case 'delete-row':
                let deleteArr = this.props.cardTable.getCheckedRows(e);
                if (deleteArr.length <= 0 || !deleteArr) {
                    toast({color: "warning", content: this.state.json['jf6005-000163']});/* 国际化处理： 请选择要删除的行!*/
                    return
                } else {
                    this.props.cardTable.delRowsByIndex(e, deleteArr.map(v => v.index))
                }
                break;
            case 'copy-row':
                if (e === levelrelationId) {
                    return false
                }
                let copyArr = JSON.parse(JSON.stringify(this.props.cardTable.getCheckedRows(e)));
                //console.log(copyArr)
                if (copyArr.length <= 0 || !copyArr) {
                    toast({color: "warning", content: this.state.json['jf6005-000182']});/* 国际化处理： 请选择要复制的行!*/
                    return
                } else {
                    //
                    //console.log('复制行数据')
                    //console.log(copyArr)
                    // return false
                    const arr = copyArr.map(item => {
                        item.data.values.pk_job_sub = {display: null, scale: null, value: ""};
                        item.data.status = 1;
                        item.data.selected = false;
                        return item.data
                    });
                    this.copyData.arr = arr;
                    this.copyData.category = e;
                    //console.log(this.copyData)
                    toast({color: "success", content: this.state.json['jf6005-000183']})/* 国际化处理： 复制成功!*/
                }
                break;
            case 'paste-row':
                if (e === levelrelationId) {
                    return false
                }
                let [selectPasteArr, insertPasteIndex] = [this.props.cardTable.getCheckedRows(e), 0];
                //console.log(selectPasteArr)
                insertPasteIndex = selectPasteArr.length > 0 ? selectPasteArr[selectPasteArr.length - 1].index : 0;
                if (this.copyData.arr.length <= 0) {
                    toast({color: "warning", content: this.state.json['jf6005-000182']});/* 国际化处理： 请选择要复制的行!*/
                    return
                } else if (this.copyData.category !== e) {
                    toast({color: "warning", content: this.state.json['jf6005-000184']})/* 国际化处理： 请复制该表格的数据!*/
                } else {
                    this.copyData.arr ? this.copyData.arr.forEach(item => {
                        let index_ = this.props.cardTable.getVisibleRows(e).length;
                        ////console.log('-----')
                        ////console.log(item)
                        this.props.cardTable.addRow(e, index_, item.values, false)
                    }) : ''
                }
                break;
            case  'table-delete':
                let deleteArr1 = this.props.cardTable.getCheckedRows(e);
                if (deleteArr1.length <= 0 || !deleteArr1) {
                    toast({color: "warning", content: this.state.json['jf6005-000163']});/* 国际化处理： 请选择要删除的行!*/
                    return
                } else {
                    this.props.cardTable.delRowsByIndex(e, deleteArr1.map(v => v.index))
                }
                //console.log(e)
                let data2 = this.props.cardTable.getVisibleRows(levelrelationId);
                //console.log('im data2')
                //console.log(data2)
                this.setState({
                    referValue: data2 && data2.length ? data2.map(v => ({refpk: v.values.pk_joblevel.value})) : []
                });
                break;
            case  'table-add':
                if (e === levelrelationId) {
                    // alert('12332213')
                    document.getElementById("referButton").click()
                }
                break
        }
        //console.log('hehehhehehehe')
    }

    enableOrNot(e) {

        const g = this.props.form.getAllFormValue(basedetailId);

        const url = (e ? '/nccloud/hrjf/job/enableAction.do' : '/nccloud/hrjf/job/disableAction.do');
        // 下面这个true会在之后改成限定条件的...never mind||this.props.cardTable.getStatus('jobaim2') === 'browse'
        if (this.props.cardTable.getStatus(jobaimId) === 'browse') {
            if (this.config.nodeType !== 'GLOBE_NODE') {
                if (this.state.rowInfo.values.pk_org.value === "GLOBLE00000000000000") {
                    toast({
                        color: "warning",
                        content: e ? this.state.json['jf6005-000156'] : this.state.json['jf6005-000155']
                    });
                    return false
                }
            }
            ajax({
                url,
                'type': 'post',
                data: {
                    model: (g)
                },
                success: res => {
                    toast({color: "success"});
                    sessionStorage.getItem('_pk_value') !== null ? this.fetchFormData(sessionStorage.getItem('_pk_value')) : ''
                    //this.onSelectTreeAfter(sessionStorage.getItem('hyx-selectedTreeNode'))
                },
                error: rej => {
                    //console.log(rej)
                    toast({color: "warning", content: rej.message})
                }
            })
        }
    }

    // 让表格和表单都可编辑
    letThemEditable() {
        this.updateButtonStatus('edit');
        this.props.form.setFormStatus(basedetailId, 'edit');
        this.state.gridrelationTable.forEach(item => {
            let tableId = item.code;
            if (tableId === levelrelationId) {
                let inheritflag = this.props.form.getFormItemsValue(basedetailId, 'inheritflag').value;
                this.props.button.setButtonDisabled(['table-add', 'table-delete'], !!inheritflag);
                this.props.cardTable.setStatus(levelrelationId, inheritflag ? 'browse' : 'edit');
                return
            }
            this.props.cardTable.setStatus(tableId, 'edit');
        })

    }

    //设置表格和表单为浏览态,数据的还原稍后完成
    letThemBrowse(e) {
        this.updateButtonStatus('browse');

        let data2 = this.props.cardTable.getVisibleRows(levelrelationId);
        this.setState({
            referValue: data2 ? data2.map(v => ({refpk: v.values.pk_joblevel.value})) : []
        });
        this.browseDetail();
        this.state.gridrelationTable.forEach(item => {
            this.props.cardTable.resetTableData(item.code);
        });
        this.props.form.cancel(basedetailId);

        try {
            if (this.config.nodeType !== 'GLOBE_NODE') {
                if (this.state.rowInfo.values.pk_org.value === "GLOBLE00000000000000") {
                    this.props.button.setButtonDisabled(['edit', 'delete'], true);
                } else {
                    this.props.button.setButtonDisabled(['edit', 'delete'], false);
                }
            }
            if (this.state.rowInfo && this.state.rowInfo.values) {
                this.fetchFormData(this.state.rowInfo.values.pk_job.value);
                sessionStorage.setItem('_pk_value', this.state.rowInfo.values.pk_job.value);
                this.setState({
                    detail: e !== 'addFlag'
                }, () => this.updateButtonStatus('browse'));
                this.jobAbility()
            }
        } catch (err) {
            console.error(err)
        }

    }

    browseDetail() {
        this.props.form.setFormStatus(basedetailId, 'browse');
        this.state.gridrelationTable.forEach(item => {
            let tableId = item.code;
            this.props.cardTable.setStatus(tableId, 'browse');
        })
    }

    // <-- 保存 -->
    saveHYX(target) {
        //form非空
        if (!this.props.form.isCheckNow(basedetailId)) {
            return false
        }
        //表格非空校验
        let tableIdArr = this.state.gridrelationTable.map(item => item.code);
        let tableFalg = this.props.cardTable.checkTableRequired(tableIdArr);
        if (!tableFalg) {
            return false
        }

        let formData1 = this.props.form.getAllFormValue(basedetailId);
        let tempdata = {
            "pageid": "60053030p",
            "head": {
                'baseinfo': {
                    "areacode": basedetailId,
                    "rows": formData1.rows
                }
            },
            "bodys": {}
        };
        let pageid = this.state.templatePageId;
        let bodys_code = this.state.gridrelationTable.map(item => {
            let tableId = item.code;
            let tableData = this.props.cardTable.getAllRows(tableId);
            if (!tableData) return;
            tempdata.bodys[tableId] = {
                "areacode": tableId,
                "rows": tableData
            };
            return tableId
        });
        if (tempdata.bodys.hasOwnProperty(levelrelationId)) {
            if (tempdata.bodys[levelrelationId].rows.some(v => {
                if (v.values && v.values.jobrank.value) {
                    if (!v.values.defaultrank.value) {
                        toast({color: "warning", content: this.state.json['jf6005-000310']});
                        return true
                    }
                }
            })) {
                return false
            }
        }
        saveValidate(this.props, pageid, basedetailId, bodys_code, 'extcard').then(()=>{
            ajax({
                url: '/nccloud/hrjf/job/saveAction.do',
                type: 'post',
                data: tempdata,
                success: res => {
                    if (!res.success) return;
                    toast({color: "success"});
                    if (this.config.nodeType !== 'GLOBE_NODE') {
                        this.props.button.setButtonDisabled(['edit', 'delete'], false);
                    }

                    if (target === 'saveAdd') {
                        this.beforeAddCase().then(finalRes => this.btnAddCase(finalRes))
                        return
                    }

                    this.copyjobData.left5 = res.data;
                    this.state.gridrelationTable.forEach(item => {
                        let tableId = item.code;
                        if (!res.data.bodys.hasOwnProperty(tableId)) {
                            return
                        }
                        let rows = res.data.bodys[tableId].rows;
                        this.props.cardTable.setTableData(tableId, {rows});
                        if (tableId === levelrelationId) {
                            this.setState({
                                referValue: rows.map(v => ({refpk: v.values.pk_joblevel.value}))
                            })
                        }
                    });
                    let formData;
                    if (res.data.head.hasOwnProperty(basedetailId)) {
                        formData = res.data.head[basedetailId];
                        this.props.form.setAllFormValue({[basedetailId]: formData});

                        this.setState({
                            rowInfo: formData && formData.rows[0],
                            isEnable: formData.rows[0].values.enablestate,
                            detail: true
                        });
                    }
                    this.updateButtonStatus('browse');
                    this.browseDetail();
                    sessionStorage.setItem('_pk_value', formData && formData.rows[0].values.pk_job.value)
                }
            })
        })
    }

    // 按钮是否显示，按钮是否可用
    updateButtonStatus(e) {
        let isBrowse = e === 'browse';
        this.props.button.setButtonsVisible({
            add: isBrowse,
            edit: isBrowse,
            delete: isBrowse,
            copy: isBrowse && !this.state.detail,
            search: isBrowse && !this.state.detail,
            refresh: isBrowse && !this.state.detail,
            filter: isBrowse,
            'job-people': isBrowse,
            'job-introduction': isBrowse,
            save: !isBrowse,
            saveadd: !isBrowse,
            cancel: !isBrowse,
            'add-row': !isBrowse,
            'insert-row': !isBrowse,
            'delete-row': !isBrowse,
            'copy-row': !isBrowse,
            'paste-row': !isBrowse,
            'table-add': !isBrowse,
            'table-delete': !isBrowse,
            'file-manage': isBrowse,
            'print_group': isBrowse,
            'print_link': isBrowse,
            'output': isBrowse
        })
    }

    getTableHead = e => {
        if (e === levelrelationId) {
            return this.getTableHead2(e)
        }
        let {button} = this.props;
        let {createButtonApp} = button;
        return (
            <div className="shoulder-definition-area">
                <div className="definition-icons">
                    {createButtonApp({
                        area: 'table',//按钮注册中的按钮区域
                        buttonLimit: 10,
                        onButtonClick: (c, d) => {
                            //this.tableOpt(props, id);
                            this.onDetailButtonClick(c, d, e)
                        }
                    })}
                </div>
            </div>
        )
    };
    //特殊处理
    getTableHead2 = e => {
        let {button} = this.props;
        let {createButtonApp} = button;
        // let button2 =
        return (
            <div className="shoulder-definition-area">
                <div className="definition-icons">
                    <div style={{float: 'left'}}>
                        {createButtonApp({
                            area: 'table2',//按钮注册中的按钮区域
                            buttonLimit: 2,
                            onButtonClick: (c, d) => {
                                this.onDetailButtonClick(c, d, e)
                            }
                        })}
                    </div>
                    <div style={{float: 'left'}}>
                        {createButtonApp({
                            area: 'table22',//按钮注册中的按钮区域
                            buttonLimit: 10,
                            onButtonClick: (c, d) => {
                                //this.tableOpt(props, id);
                                this.onDetailButtonClick(c, d, e)
                            }
                        })}
                    </div>
                </div>
            </div>
        )
    };

    //职务能力素质是否允许新增
    jobAbility = () => {
        CheckCapaUsedAction().then(res => {
            if (!res.success) {
                return
            }

            this.capa = !!(res.data && res.data.isUsered);
            let status = this.props.form.getFormStatus(basedetailId);
            this.props.cardTable.setStatus(jobcapaId, status);
        })
    };
    //上传控件
    //附件的关闭点击
    onHideUploader = () => {
        this.setState({
            showUploader: false,
            groupLists: []
        })
    };

    // 重置数据
    revertData() {
        this.setState({
            detail: false,
            addFlag: false
        }, () => this.updateButtonStatus('browse'));
        this.letThemBrowse();

        //this.updateButtonStatus('browse')
        sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId')) : '';
        this.fetchTreeData()
    }

    //获取当前附件列表
    getGroupList = (list) => {
        //要在state里面顶一个变量，用来存储列表数组
        this.setState({
            groupLists: list
        })
    };

    beforeUpload(billId, fullPath, file, fileList) {

    }

    showDisCopy(e) {
        window.hhh = this;
        ajax({
            url: '/nccloud/hrjf/job/QueryCopyAction.do',
            data: {
                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                'showDisable': e
            },
            success: res => {
                this.leftData = res.data.baseInfo;
                this.props.modal.show('copy');
                this.transferRightData = [];
            }
        })

    }


    // code from jobtype starts
    JTeditRightTable() {
        const formId = 'jobtype';
        const tableId = 'levelrel';
        this.props.form.setFormStatus(formId, 'edit');
        this.props.cardTable.setStatus(tableId, 'edit');
        //设置不可编辑项
        this.props.form.setFormItemsDisabled(formId, {'pk_joblevelsys': !!this.props.form.getFormItemsValue(formId, 'father_pk').value});
        this.props.form.setFormItemsDisabled(formId, {
            'pk_org': true,
            'enablestate': true,
        });
        //设置内容的必输性
        this.props.form.setFormItemsRequired(formId, {'jobtypecode': true, 'jobtypename': true});
    }

    saveAfter() {
        const formId = 'jobtype';
        const tableId = 'levelrel';

        // 加入飞空字段校验
        if (!this.props.form.isCheckNow(formId)) {
            return false
        }
        if (!this.props.cardTable.checkTableRequired(tableId)) {
            return false
        }
        //保存表数据
        let formData = this.props.form.getAllFormValue(formId);
        let tableData = this.props.cardTable.getAllRows(tableId);
        formData.rows[0].values.pk_org.value = this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId;
        //设置传输data
        let tempdata = {
            "pageid": "60053010p",
            "head": {
                'rows': formData.rows
            },
            "body": {
                'rows': tableData
            },
            pk_org: this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
        };
        ajax({
            url: '/nccloud/hrjf/jobtype/JobTypeSaveAction.do',
            type: 'POST',
            data: tempdata,
            success: res => {
                //console.log(res);
                if (res.success) {
                    this.props.modal.close('jobtype');
                    toast({color: "success"});
                    this.fetchTreeData()
                }
            }
        });
    }

    deleteTreeNode(e) {
        ajax({
            url: '/nccloud/hrjf/jobtype/JobTypeDeleteAction.do',
            type: 'post',
            data: {
                'pk_jobtype': e,
                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
            },
            success: res => {
                //console.log(res)
                if (res.success) {
                    toast({color: "success"});
                    sessionStorage.removeItem('jobinfo_treeId');
                    this.fetchTreeData();
                    this.props.cardTable.setTableData('baseInfo', {rows: []})
                }
            }
        })
    }

    valChange(e) {
        //console.log(e)
        this.transferRightData = e.rightData;
        try {
            if (this.transferRightData && this.transferRightData.length) {
                if (this.config.nodeType !== 'GLOBE_NODE') {
                    this.transferRightData.forEach(v => {
                        v.values.pk_org.value = this.businessInfo.groupId;
                        v.values.pk_org.display = this.businessInfo.groupName
                    });
                    //console.log(this.transferRightData)
                    //console.log('this.transferRightData')
                    this.props.editTable.setTableData('copyinfo2', {rows: this.transferRightData})
                }
            }
        } catch (err) {

        }

    }

    //code form jobtypr end


    //tree
    treeAdd = (e) => {

        const formId = 'jobtype';
        const tableId = 'levelrel';
        this.props.modal.show('jobtype');
        this.JTeditRightTable();
        this.props.form.setFormItemsDisabled('jobtype', {//设置不可编辑项
            'pk_grade_source': true
        });
        ajax({
            url: '/nccloud/hrjf/jobtype/JobTypeAddAction.do',
            type: "POST",
            data: {
                'pk_jobtype': e.refpk === 'nopk' ? '' : e.refpk,
                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
            },
            success: res => {
                //重置表内容
                this.fatherNode = res.data.defaultValue.jobtype.rows[0].values.father_pk.value;
                this.props.form.setAllFormValue({'jobtype': res.data.defaultValue.jobtype});
                this.props.cardTable.setTableData(tableId, {rows: []});
                this.JTeditRightTable();//设置表单表格可编辑及禁用状态

                if (this.props.form.getFormItemsValue(formId, 'inheritflag').value !== true) {
                    this.props.button.setButtonDisabled(['grade_set', 'delline'], false);
                    this.props.cardTable.setStatus(tableId, 'browse');
                }
            }
        })

    };

    treeEdit = (e) => {
        //console.log(e)
        // 根目录不可修改
        if (e.refpk === 'nopk') return false;

        if (this.config.nodeType !== 'GLOBE_NODE') {
            if (e.nodeData.nodeValue.pk_org === "GLOBLE00000000000000") {
                toast({color: "warning", content: this.state.json['jf6005-000343']});
                return false
            }
        }

        const formId = 'jobtype';
        const tableId = 'levelrel';
        this.props.form.EmptyAllFormValue(formId);
        this.props.cardTable.setTableData(tableId, {rows: []});

        ajax({
            url: '/nccloud/hrjf/jobtype/JobTypeEditAction.do',
            type: "POST",
            data: {
                'pk_jobtype': e.refpk,
                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
            },
            success: res => {
                if (res.success) {
                    this.props.modal.show('jobtype');
                    try {
                        if (res.data.headValue.jobtype.rows[0].values.inheritflag.value) {
                            res.data.headValue.jobtype.rows[0].values.pk_grade_source = res.data.headValue.jobtype.rows[0].values.father_pk
                        } else {
                            res.data.headValue.jobtype.rows[0].values.pk_grade_source = res.data.headValue.jobtype.rows[0].values.jobtypename;
                            res.data.headValue.jobtype.rows[0].values.pk_grade_source.display = res.data.headValue.jobtype.rows[0].values.pk_grade_source.display ? res.data.headValue.jobtype.rows[0].values.pk_grade_source.display : res.data.headValue.jobtype.rows[0].values.pk_grade_source.value

                        }

                    } catch (e) {

                    }
                    this.JTeditRightTable();//设置表单表格可编辑
                    this.props.form.setFormItemsDisabled(formId, {'pk_joblevelsys': true});
                    //重置表内容
                    this.props.form.setAllFormValue({'jobtype': res.data.headValue.jobtype});
                    //console.log(res)
                    this.props.cardTable.setTableData('levelrel', res.data.bodyValue ? res.data.bodyValue.levelrel : {rows: []});


                    if (this.props.form.getFormItemsValue(formId, 'inheritflag').value === true) {
                        this.props.form.setFormItemsDisabled(formId, {'pk_joblevelsys': true});
                        this.props.button.setButtonDisabled(['grade_set', 'delline'], true);
                        this.props.cardTable.setStatus(tableId, 'browse');
                    } else {
                        this.JTeditRightTable();//设置表单表格可编辑
                    }
                }
            }
        })
    };

    treeDelete = (e) => {

        // 根目录不可修改
        if (e.refpk === 'nopk') return false;

        if (this.config.nodeType !== 'GLOBE_NODE') {
            if (e.nodeData.nodeValue.pk_org === "GLOBLE00000000000000") {
                toast({color: "warning", content: this.state.json['jf6005-000342']});
                return false
            }
        }
        promptBox({
            color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
            title: this.state.json['jf6005-000153'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 确认删除*/
            content: this.state.json['jf6005-000160'],             // 提示内容,非必输/* 国际化处理： 您确定要删除所选数据么?*/
            noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
            noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
            beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
            cancelBtnName: this.state.json['jf6005-000008'],         // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
            hasCloseBtn: true,             //显示“X”按钮，默认不显示，不显示是false，显示是true
            beSureBtnClick: this.deleteTreeNode.bind(this, e.refpk),   // 确定按钮点击调用函数,非必输
            // cancelBtnClick: functionCancel,  // 取消按钮点击调用函数,非必输
            // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
            closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是true点击关闭，阻止关闭是false
        })
    };

    typeOnBeforeEvents = (props, moduleId, key, value, changedrows, record, index) => {
        const formId = 'jobtype';

        let formData1 = this.props.form.getAllFormValue(formId);

        let meta = props.meta.getMeta();
        let child = this.treeDataList.find(v => v.refpk === formData1.rows[0].values.pk_jobtype.value);
        let father = child && child.nodeData && this.treeDataList.find(v => v.refpk === child.nodeData.nodeValue.father_pk);
        let father_pk = formData1.rows[0].values && formData1.rows[0].values.father_pk.value;

        if (key === 'jobrank') {
            meta[moduleId].items.map((obj) => {
                if (obj.attrcode === 'jobrank') {//参照设置为多选
                    //console.log(obj)
                    obj.isMultiSelectedEnabled = true;
                    if (father || father_pk) {
                        obj.queryCondition = () => ({
                            'intType': 0,
                            'pk_filtertype': father_pk || (father && father.nodeData.nodeValue.pk_jobtype) || '',
                            'pk_joblevel': record.values.pk_joblevel.value,
                            'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                            'pk_group': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
                        })
                    } else {
                        obj.queryCondition = () => ({
                            'intType': 4,
                            'pk_filtertype': formData1.rows[0].values.pk_joblevelsys.value,
                            'pk_joblevel': record.values.pk_joblevelsys.value,
                            'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                            'pk_group': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId
                        })
                    }
                }
            });
            props.meta.setMeta(meta);
        } else if (key === 'defaultrank') {
            const arr_str = record.values.jobrank.value;
            if (!arr_str) {
                //toast({ color: "warning", content: '请先选择对应职等' })
                toast({color: "warning", content: this.state.json['jf6005-000309']});/* 国际化处理： 请先设置职等!*/
                return false
            }
            const arr = arr_str ? arr_str.split(',') : [];
            meta[moduleId].items.map((obj) => {
                if (obj.attrcode === 'defaultrank') {//参照设置为多选
                    obj.queryCondition = () => ({
                        'intType': (father || father_pk) ? 0 : 4,
                        //'pk_filtertype': JSON.parse(sessionStorage.getItem('treeNodeData')).nodeData.nodeValue.pk_jobtype,
                        'pk_filtertype': (father || father_pk) ? (father_pk || (father && father.nodeData.nodeValue.pk_jobtype) || '') : formData1.rows[0].values.pk_joblevelsys.value,
                        'pk_joblevel': record.values.pk_joblevel.value,
                        "filterPks": arr_str
                    })
                }
            });
            props.meta.setMeta(meta);
        }
        return true;
    };

    typeOnAfterEvent = (props, moduleId, key, value, changedrows, index, record) => {
        if (key === 'jobrank') {
            if (value && value.length === 1) {
                let temp = {
                    display: value[0].values.jobrankname.value,
                    value: value[0].values.pk_jobrank.value
                };
                this.props.cardTable.setValByKeyAndIndex('levelrel', index, 'defaultrank', temp)
            } else if (!value || value && value.length === 0) {
                this.props.cardTable.setValByKeyAndIndex('levelrel', index, 'defaultrank', {
                    display: null,
                    value: null
                })
            }
            let _rank = this.props.cardTable.getValByKeyAndIndex('levelrel', index, 'defaultrank');
            !!(_rank.value && value && value.length && value.find(v => v.refpk === _rank.value) === undefined) && (this.props.cardTable.setValByKeyAndIndex('levelrel', index, 'defaultrank', {
                display: null,
                value: null
            }))
        }
        moduleId === levelrelationId ? this.props.cardTable.setStatus(levelrelationId, 'edit') : ''

    };

    //递归syncTree数据到列状
    toList = (tar) => {
        let _array = [];

        function dis(foo) {
            if (foo && foo.length) {
                foo.forEach(v => {
                    _array.push(v);
                    if (v.children && v.children.length) {
                        return dis(v.children)
                    }
                })
            }
            return _array
        }

        return dis(tar)
    };

    //表单编辑后事件
    onAfterFormEvent(props, moduleId, key, value, oldValue) {
        const formId = 'jobtype';
        const tableId = 'levelrel';
        let {value: val} = value;
        if (moduleId === 'jobtype') {
            switch (key) {
                case 'father_pk':
                    if (value.display === null || value.display !== oldValue.display) {
                        this.props.cardTable.setTableData(tableId, {rows: []});
                    }
                    if (val !== null) {
                        ajax({
                            url: '/nccloud/hrjf/jobtype/JobTypeQueryOneAction.do',
                            data: {
                                'pk_jobtype': val,
                                'pk_org': this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                            },
                            success: res => {
                                this.props.form.setFormItemsValue('jobtype', {
                                    'pk_joblevelsys': res.data.headValue.jobtype.rows[0].values.pk_joblevelsys
                                });
                                this.props.form.setFormItemsDisabled(formId, {
                                    'pk_joblevelsys': true
                                })
                            }
                        })
                    } else {
                        this.props.form.setFormItemsValue('jobtype', {
                            'pk_joblevelsys': {'display': null, 'value': null}
                        });
                        this.props.form.setFormItemsDisabled(formId, {
                            'pk_joblevelsys': false
                        })
                    }
                    break;
                case 'inheritflag':
                    if (val === true) {
                        this.props.button.setButtonDisabled(['setjoblevel', 'dellevel'], true);
                        this.props.cardTable.setTableData(tableId, {rows: []});
                    } else {
                        this.props.cardTable.setTableData(tableId, {rows: []});
                        this.props.button.setButtonDisabled(['setjoblevel', 'dellevel'], false);
                        //this.editRightTable();//设置表单表格可编辑
                    }
                    break;
                case 'pk_joblevelsys':
                    if (value.display === null) {
                        this.props.cardTable.setTableData(tableId, {rows: []});
                    }
                    break;

                default:
                    break;
            }
        } else if (moduleId === basedetailId) {
            if (key === 'inheritflag') {
                if (val) {
                    this.props.button.setButtonDisabled(['table-add', 'table-delete'], true);
                    this.props.cardTable.setStatus(levelrelationId, 'browse');
                    this.props.cardTable.setTableData(levelrelationId, {rows: []});
                    this.setState({
                        referValue: []
                    })
                } else {
                    this.props.cardTable.setTableData(levelrelationId, {rows: []});
                    this.setState({
                        referValue: []
                    });
                    if (this.props.form.getFormItemsValue(basedetailId, 'pk_jobtype').value) {
                        this.props.button.setButtonDisabled(['table-add', 'table-delete'], false);
                        this.props.cardTable.setStatus(levelrelationId, 'edit');
                    }
                }

            } else if (key === 'pk_jobtype') {
                if (val === null || value.display !== oldValue.display) {
                    this.props.cardTable.setTableData(levelrelationId, {rows: []});
                    this.setState({
                        referValue: []
                    })
                }
                if (val === null) {
                    this.props.button.setButtonDisabled(['table-add', 'table-delete'], true);
                } else if (!this.props.form.getFormItemsValue(basedetailId, 'inheritflag').value) {
                    this.props.button.setButtonDisabled(['table-add', 'table-delete'], false);
                }
            }
        }
    }

    onBeforeFormEvents = (props, moduleId, key, value, changedrows) => {

        let meta = props.meta.getMeta();
        if (key === 'father_pk') {
            meta[moduleId].items.map((obj) => {
                if (obj.attrcode === 'father_pk') {//参照设置为多选
                    obj.queryCondition = () => ({
                        "pk_org": this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                    })
                }
            });
            props.meta.setMeta(meta);
        } else if (key === 'pk_joblevelsys') {
            meta[moduleId].items.map((obj) => {
                if (obj.attrcode === 'pk_joblevelsys') {//参照设置为多选
                    obj.queryCondition = () => ({
                        "pk_org": this.config.nodeType === 'GLOBE_NODE' ? 'GLOBLE00000000000000' : this.businessInfo.groupId,
                    })
                }
            });
            props.meta.setMeta(meta);
        }
        return true;
    };

    /**
     * 查询模块 查询按钮
     */
    goSearch(props, searchData, type, queryInfo) {
        // let data = this.props.search.getAllSearchData('jobquery');
        let data = this.props.search.getQueryInfo('jobquery', true);
        // if (typeof (searchData) !== 'undefined' && data && data.conditions) {
        if (data && data.querycondition) {
            this.setState({
                _searchData: data.querycondition || {}
            }, () => {
                sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId'), data) : ''
            })
        } else {
            this.setState({
                _searchData: {}
            })
        }
        this.props.search.openAdvSearch('jobquery', false);
    }

    /**
     * 能力素质指标子集
     */
    onTableAfterEvent(props, tableid, key, value, record, index, recordval) {
        // 能力素质指标  根据名称 显示或删除
        if (key === "pk_capa") {
            let pk_capa = value.refpk;
            // 当清除人员编码后 本行数据清空
            if (!pk_capa) {
                let values = recordval.values;
                let keys = ['indicode', 'pk_capa', 'pk_indi_type', 'scorestandard', 'pk_capa_grade'];
                for (let key in values) {
                    if (keys.includes(key)) {
                        let item = values[key];
                        item.display = null;
                        item.value = null;
                    }
                }
                props.table.updateDataByIndexs(tableid, [{
                    index: index,
                    data: {status: recordval.status, values: values}
                }]);
                return true
            }
            let model = {
                rows: [recordval]
            };
            CapaSelAction(model, pk_capa).then(res => {
                // 最后的设置的值未确定
                if (res.data[tableid] && res.data[tableid].rows && res.data[tableid].rows[0] && res.data[tableid].rows[0].values) {
                    let values = res.data[tableid].rows[0].values;
                    props.table.updateDataByIndexs(tableid, [{
                        index: index,
                        data: {status: recordval.status, values: values}
                    }]);
                }
            })
        }
        return true
    }

    render() {
        let {button, search, DragWidthCom, modal, form, cardTable, syncTree} = this.props;
        const {createSyncTree} = syncTree;
        const {createForm} = form;//创建表单，需要引入这个
        let {createModal} = modal;  //模态框
        let {createButtonApp} = button;
        let {NCCreateSearch} = search;
        let {createCardTable} = cardTable;
        let {showUploader, target} = this.state;
        const {NCUploader} = high;
        let referButton = <button id="referButton"/>;
        return (
            <div className={'job-info'}>
                <div className={'job-info-content'}>
                    {/* 头部 header*/}
                    <div className="header">
                        {createModal('modal', {noFooter: false})}

                        {this.state.detail ? <BackBtn
                            title={this.state.json['jf6005-000022']/* 国际化处理： 返回*/}
                            onClick={(e) => {
                                this.setState({
                                    detail: false,
                                    addFlag: false
                                }, () => {
                                    this.updateButtonStatus('browse');
                                    this.props.cardTable.setStatus(jobaimId, 'browse');
                                });
                                // this.letThemBrowse()
                                sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId')) : ''
                            }}
                        /> : ''}

                        <div className="title" style={{display: (this.state.detail) ? 'none' : 'block'}}>
                            {/*{this.config.pageTitle}*/}
                            <span className="show-off-checkbox">
                            <NCCheckbox
                                checked={sessionStorage.getItem('showDisabledFlag') === 'true'}
                                onChange={this.onCheckBoxChange.bind(this)}
                            >{this.state.json['jf6005-000130']}</NCCheckbox>{/* 国际化处理： 显示停用*/}
                        </span>

                        </div>
                        {/* 按钮组 btn-group*/}
                        <div className="btn-group">
                            {createButtonApp({
                                area: 'tree',
                                buttonLimit: 3,
                                onButtonClick: this.onButtonClick.bind(this),
                                popContainer: document.querySelector('.header-button-area')
                            })}
                        </div>
                    </div>
                    {/* 树卡区域 */}
                    <div className="tree-card jobinfo_base" style={{display: (this.state.detail) ? 'none' : 'block'}}>
                        <DragWidthCom
                            // 左树区域
                            leftDom={
                                <div className="tree-area">
                                    {createSyncTree({
                                        treeId: treeId,
                                        needEdit: true, //不启用编辑
                                        showLine: false, //显示连线
                                        needSearch: false, //是否需要搜索框
                                        onSelectEve: this.onSelectEve.bind(this),//选择
                                        defaultExpandAll: true,
                                        // onMouseEnterEve:this.onMouseEnterEve.bind(this),
                                        clickEditIconEve: this.treeEdit.bind(this), //编辑点击 回调
                                        clickAddIconEve: this.treeAdd.bind(this), //新增点击 回调
                                        clickDelIconEve: this.treeDelete.bind(this), // 删除点击 回调
                                        showModal: false
                                    })}
                                </div>}
                            // 右卡片区域
                            rightDom={
                                <div className="card-area">
                                    <div className="nc-bill-table-area">
                                        {createCardTable('baseInfo', {
                                            // tableHead:initTableButton,
                                            // onAfterEvent: this.onAfterFormEvent.bind(this),
                                            // onBeforeEvent: this.onAfterFormEvent.bind(this)
                                            // modelSave:this.modelSave.bind(this),
                                            showIndex: true,
                                            onRowClick: this.TableRowClick.bind(this),
                                            onRowDoubleClick: this.tableDubleRowClick.bind(this)
                                            // showCheck:true
                                        })}
                                    </div>
                                </div>
                            }     //右侧区域dom
                            defLeftWid='20%'      // 默认左侧区域宽度，px/百分百
                        />
                    </div>
                    {/* 详情*/}
                    <div className={`jobinfo_basee ${THEME.billCardBg}`} style={{
                        display: (this.state.detail) ? 'block' : 'none'
                    }}>
                        <div className="nc-bill-form-area">
                            <div className={'form-name'}>
                                <div
                                    className={`form-name-label ${THEME.fontc}`}>{this.state.json['jf6005-000199']}</div>
                                {/* 国际化处理： 职务基本情况*/}
                                <NCSwitch
                                    checked={this.state.isEnable.value === '2'}
                                    onChange={(e) => {
                                        this.enableOrNot(e)
                                    }}
                                    // disabled={this.state.stopDis}
                                />
                            </div>
                            {createForm(basedetailId, {
                                onAfterEvent: this.onAfterFormEvent.bind(this),
                                onBeforeEvent: this.onBeforeEvents.bind(this)
                            })}
                        </div>

                        {this.state.gridrelationTable.length > 1 && this.state.gridrelationTable.map(item => {
                            return <div className="nc-bill-table-area">
                                {createCardTable(item.code, {
                                    tableHead: () => this.getTableHead(item.code),
                                    onBeforeEvent: this.onBeforeEvents,
                                    onAfterEvent: this.onAfterEvent,
                                    showCheck: true,
                                })}
                            </div>
                        })}

                    </div>
                </div>
                {createModal('addNode', {
                    title: this.state.jobpsndoc ? this.state.json['jf6005-000142'] : this.state.json['jf6005-000144'],// 弹框表头信息/* 国际化处理： 现任职人员,曾任职人员*/
                    content: <div>
                        <div className={`modalHead ${THEME.labelFontc}`}>
                            <div>
                                <span>{this.state.json['jf6005-000202']}</span>{/* 国际化处理： 职务编码*/}
                                <div
                                    className={`okk ${THEME.inputFontDisabled}`}
                                    disabled>{this.state.rowInfo !== null ? this.state.rowInfo.values.jobcode.value : ''}</div>
                            </div>
                            <div>
                                <span>{this.state.json['jf6005-000203']}</span>{/* 国际化处理： 职务名称*/}
                                <div
                                    className={`okk ${THEME.inputFontDisabled}`}
                                    disabled>{this.state.rowInfo !== null ? this.state.rowInfo.values.jobname.value : ''}</div>
                            </div>
                        </div>
                        <div>
                            {createCardTable('jobpsndoc', {
                                //onBeforeEvent: this.onBeforeEvents,
                                //showCheck:true,
                                hideColSet: () => false,
                                hideSwitch: () => false,
                                showIndex: true,
                            })}
                        </div>
                    </div>, //弹框内容，可以是字符串或dom
                    beSureBtnClick: this.closeModal.bind(this), //点击确定按钮事件
                    // cancelBtnClick: this.closeModal.bind(this), //取消按钮事件回调
                    // closeModalEve: this.closeModal.bind(this), //关闭按钮事件回调
                    userControl: true,  // 点 确定/取消 按钮后，是否自动关闭弹框.true:手动关。false:自动关,默认false
                    size: 'xlg', //  模态框大小 sm/lg/xlg
                    noFooter: false, //是否需要底部按钮,默认有footer,有false,没有true
                    rightBtnName: '', //左侧按钮名称,默认‘取消’
                    leftBtnName: this.state.json['jf6005-000031'], //右侧按钮名称， 默认‘确定’/* 国际化处理： 关闭*/
                    className: '复杂型combine', /*
                               简单型junior -> 宽度410PX 高度210PX .【这个暂时别用，简单提示使用promptBox 或者 this.props.ncmodal的createModal】
                               中型senior -> 宽度520PX 高度根据内容自适应，最小值268，最大高度限制420，如modal主体还要承modal主体区出现滚动条
                               复杂型combine  -> 宽度680PX 高度根据内容自适应，最小值268，最大高度限制570，如modal主体还要承载modal主体区出现滚动条
                               头部和底部固定高度
                               不写的话默认走size设定大小
                              */
                    closeByClickBackDrop: false,//点击遮罩关闭提示框，true是点击关闭，false是阻止关闭,默认是false
                    hasBackDrop: true,//显示遮罩层，显示是true，不显示是false，默认是true
                })}
                {createModal('copy', {
                    title: this.state.json['jf6005-000195'],// 弹框表头信息/* 国际化处理： 复制*/
                    content: <div class="imcopy">
                        <Transfer
                            {...this.props}
                            leftTransferId={'copyinfo'}
                            rightTransferId={'copyinfo2'}
                            //leftTreeData={this.state.treeData}                            // 左边table的数据 同editTable
                            leftTreeData={this.leftData}                            // 左边table的数据 同editTable
                            rightTreeData={this.rightData}                          // 右边table的数据 同editTable
                            leftTreeConfig={{}}
                            onBeforeEvents={this.onBeforeEvents.bind(this)}// 左边table的配置 同editTable
                            rightTreeConfig={{}}                                    // 右边table的配置 同editTable
                            title={{
                                left: this.state.json['jf6005-000196'],
                                right: this.state.json['jf6005-000197']
                            }}      // 左右两边title/* 国际化处理： 选择原职务,复制内容*/
                            valueChange={this.valChange.bind(this)}                 // 穿梭后触发的事件
                            ref="toLeft"
                            disableBtns={false}                                     // 穿梭按钮是否可用
                        />
                        <div className="title">
                            {/*{this.config.pageTitle}*/}
                            <span className="show-off-checkbox">
                                    <NCCheckbox
                                        checked={this.state.copyCheck}
                                        onChange={e => {
                                            //console.log(e)
                                            e ? this.showDisCopy('Y') : this.showDisCopy('N');
                                            this.setState({
                                                copyCheck: e
                                            }, () => {
                                                this.refs.toLeft.allToLeft()
                                            })
                                        }
                                        }
                                    >{this.state.json['jf6005-000130']}</NCCheckbox>{/* 国际化处理： 显示停用*/}
                                    </span>
                        </div>
                    </div>, //弹框内容，可以是字符串或dom
                    beSureBtnClick: () => {
                        //必输项校验
                        if (!this.props.editTable.checkRequired('copyinfo2', this.transferRightData)) {
                            return false
                        }
                        if (this.transferRightData.length > 0) {
                            // let cptransferRightData = JSON.parse(JSON.stringify(this.transferRightData))
                            let cptransferRightData = this.props.editTable.getAllRows('copyinfo2');
                            // 将启用状态改为默认启用
                            cptransferRightData ? cptransferRightData.forEach(v => {
                                v.values.enablestate = {
                                    display: "已启用",
                                    scale: "-1",
                                    value: "2"
                                }
                            }) : '';
                            let modelInfo = {
                                model: ({rows: cptransferRightData})
                            };
                            ajax({
                                url: '/nccloud/hrjf/job/copyAction.do',
                                type: 'post',
                                data: modelInfo,
                                success: res => {
                                    //console.log(res)
                                    this.props.modal.close('copy');
                                    sessionStorage.getItem('jobinfo_treeId') !== null ? this.fetchTableData(sessionStorage.getItem('jobinfo_treeId')) : ''
                                }
                            })
                        }
                    }, //点击确定按钮事件
                    // cancelBtnClick: this.closeModal.bind(this), //取消按钮事件回调
                    // closeModalEve: this.closeModal.bind(this), //关闭按钮事件回调
                    cancelBtnClick: () => {
                        this.props.modal.close('copy');
                        this.setState({
                            copyCheck: false
                        })
                    }, //取消按钮事件回调
                    userControl: true,  // 点 确定/取消 按钮后，是否自动关闭弹框.true:手动关。false:自动关,默认false
                    size: 'xlg', //  模态框大小 sm/lg/xlg
                    noFooter: false, //是否需要底部按钮,默认有footer,有false,没有true
                    rightBtnName: this.state.json['jf6005-000008'], //左侧按钮名称,默认‘取消’/* 国际化处理： 取消*/
                    leftBtnName: this.state.json['jf6005-000036'], //右侧按钮名称， 默认‘确定’/* 国际化处理： 确定*/
                    className: '复杂型combine', /*
                               简单型junior -> 宽度410PX 高度210PX .【这个暂时别用，简单提示使用promptBox 或者 this.props.ncmodal的createModal】
                               中型senior -> 宽度520PX 高度根据内容自适应，最小值268，最大高度限制420，如modal主体还要承modal主体区出现滚动条
                               复杂型combine  -> 宽度680PX 高度根据内容自适应，最小值268，最大高度限制570，如modal主体还要承载modal主体区出现滚动条
                               头部和底部固定高度
                               不写的话默认走size设定大小
                              */
                    closeByClickBackDrop: false,//点击遮罩关闭提示框，true是点击关闭，false是阻止关闭,默认是false
                    hasBackDrop: true,//显示遮罩层，显示是true，不显示是false，默认是true
                })}

                {createModal('jobtype', {
                    title: this.state.json['jf6005-000198'],// 弹框表头信息/* 国际化处理： 职务类别*/
                    content: <div>
                        <div className="card-area">
                            <div className="nc-bill-form-area">
                                {createForm('jobtype', {
                                    onAfterEvent: this.onAfterFormEvent.bind(this),
                                    onBeforeEvent: this.onBeforeFormEvents.bind(this),
                                })
                                }
                            </div>
                            <div className="nc-bill-table-area">
                                {createCardTable('levelrel',
                                    {
                                        tableHead: this.RCgetTableHead,//右侧肩部功能区创建
                                        onBeforeEvent: this.typeOnBeforeEvents,
                                        onAfterEvent: this.typeOnAfterEvent,
                                        // showCheck:true,
                                        // onSelected: this.tableSelected.bind(this),//左侧选择列单个选择框回调
                                        // onSelectedAll: this.tableSelectedAll.bind(this),
                                        // showCheck: true,//显示复选框
                                    }
                                )}
                            </div>
                        </div>
                    </div>, //弹框内容，可以是字符串或dom
                    beSureBtnClick: () => this.saveAfter(), //点击确定按钮事件
                    cancelBtnClick: () => this.props.modal.close('jobtype'), //取消按钮事件回调
                    // closeModalEve: this.closeModal.bind(this), //关闭按钮事件回调
                    userControl: true,  // 点 确定/取消 按钮后，是否自动关闭弹框.true:手动关。false:自动关,默认false
                    size: 'xlg', //  模态框大小 sm/lg/xlg
                    noFooter: false, //是否需要底部按钮,默认有footer,有false,没有true
                    rightBtnName: this.state.json['jf6005-000008'], //左侧按钮名称,默认‘取消’/* 国际化处理： 取消*/
                    leftBtnName: this.state.json['jf6005-000036'], //右侧按钮名称， 默认‘确定’/* 国际化处理： 确定*/
                    className: '复杂型combine', /*
                               简单型junior -> 宽度410PX 高度210PX .【这个暂时别用，简单提示使用promptBox 或者 this.props.ncmodal的createModal】
                               中型senior -> 宽度520PX 高度根据内容自适应，最小值268，最大高度限制420，如modal主体还要承modal主体区出现滚动条
                               复杂型combine  -> 宽度680PX 高度根据内容自适应，最小值268，最大高度限制570，如modal主体还要承载modal主体区出现滚动条
                               头部和底部固定高度
                               不写的话默认走size设定大小
                              */
                    closeByClickBackDrop: false,//点击遮罩关闭提示框，true是点击关闭，false是阻止关闭,默认是false
                    hasBackDrop: true,//显示遮罩层，显示是true，不显示是false，默认是true
                })}
                {
                    referOfJobLevel({
                            onChange: e => {
                                //console.log('eeeee')
                                //console.log(e)
                                let data2 = this.props.cardTable.getVisibleRows(levelrelationId);
                                //console.log(data2)
                                //console.log("~~~~")
                                data2 && data2.forEach((v, index) => {
                                    if (e.find(w => w.refpk === (v && v.values && v.values.pk_joblevel.value)) === undefined) {
                                        //console.log(index)
                                        this.props.cardTable.delRowsByIndex(levelrelationId, index);
                                        data2.splice(index, 1)
                                    }
                                });


                                e ? e.forEach(w => {
                                    if (data2.find(v => v.values.pk_joblevel.value === w.refpk) === undefined) {
                                        let temp = {"display": w.refname, "scale": null, "value": w.refpk, "isEdit": false};
                                        let index_ = this.props.cardTable.getAllData('levelrelation2').rows.length;
                                        this.props.cardTable.addRow(levelrelationId, index_, {pk_joblevel: temp}, false)
                                    }
                                }) : '';

                                this.setState({
                                    referValue: e ? e.map(v => ({refpk: v.refpk})) : []
                                })
                            },
                            clickContainer: referButton,
                            value: this.state.referValue,
                            queryCondition: () => ({
                                "intType": 0,
                                "pk_filtertype": this.props.form.getAllFormValue(basedetailId).rows[0].values.pk_jobtype.value
                            }),
                            isMultiSelectedEnabled: true
                        }
                    )
                }
                {createModal('query', {
                    title: this.state.json['jf6005-000063'],// 弹框表头信息/* 国际化处理： 查询*/
                    content: <div>
                        {NCCreateSearch('jobquery', {
                            clickSearchBtn: this.goSearch.bind(this),
                            onlyShowAdvArea: false,
                            showAdvSearchPlanBtn: true,
                            saveSearchPlan: true,
                            // oid: this.props.queryOid,
                            onlyShowSuperBtn: true,
                            replaceSuperBtn: this.state.json['jf6005-000063']/* 国际化处理： 查询*/
                        })}
                    </div>, //弹框内容，可以是字符串或dom
                    beSureBtnClick: () => {
                        this.querySure()
                    }, //点击确定按钮事件
                    cancelBtnClick: () => {
                        this.props.modal.close('query')
                    }, //取消按钮事件回调
                    // closeModalEve: this.closeModal.bind(this), //关闭按钮事件回调
                    userControl: true,  // 点 确定/取消 按钮后，是否自动关闭弹框.true:手动关。false:自动关,默认false
                    size: 'lg', //  模态框大小 sm/lg/xlg
                    noFooter: false, //是否需要底部按钮,默认有footer,有false,没有true
                    rightBtnName: this.state.json['jf6005-000008'], //左侧按钮名称,默认‘取消’/* 国际化处理： 取消*/
                    leftBtnName: this.state.json['jf6005-000036'], //右侧按钮名称， 默认‘确定’/* 国际化处理： 确定*/
                    className: '复杂型combine', /*
                               简单型junior -> 宽度410PX 高度210PX .【这个暂时别用，简单提示使用promptBox 或者 this.props.ncmodal的createModal】
                               中型senior -> 宽度520PX 高度根据内容自适应，最小值268，最大高度限制420，如modal主体还要承modal主体区出现滚动条
                               复杂型combine  -> 宽度680PX 高度根据内容自适应，最小值268，最大高度限制570，如modal主体还要承载modal主体区出现滚动条
                               头部和底部固定高度
                               不写的话默认走size设定大小
                              */
                    closeByClickBackDrop: false,//点击遮罩关闭提示框，true是点击关闭，false是阻止关闭,默认是false
                    hasBackDrop: true,//显示遮罩层，显示是true，不显示是false，默认是true
                })}
                <div style={{display: "none"}}>
                    {NCCreateSearch('jobquery', {
                        clickSearchBtn: this.goSearch.bind(this),
                        onlyShowAdvArea: false,
                        showAdvSearchPlanBtn: true,
                        saveSearchPlan: true,
                        // oid: this.props.queryOid,
                        onlyShowSuperBtn: true,
                        replaceSuperBtn: this.state.json['jf6005-000063']/* 国际化处理： 查询*/
                    })}
                </div>
                {showUploader && <NCUploader
                    disableDownload={true}
                    billId={this.state.billId}
                    billNo={this.state.billNo}
                    target={target}
                    // customize = {uploadTrpe:'0'}
                    placement={'bottom'}
                    getGroupList={this.getGroupList}
                    onHide={this.onHideUploader} // 关闭功能
                    beforeUpload={this.beforeUpload}/>
                }
            </div>
        )
    }
}

export default JobInfo;
