/**
 * Created by wanghongxiang on 2018/5/8.
 * 岗位信息
 */
import React, {Component} from 'react';

import 'src/hrpub/common/static/fonts/iconfont.css';
import CopyModal from "../components/copyModal";

import "./index.less";
import {
    getBusinessInfo,
    high,
    createPage,
    base,
    getUrlParam,
    promptBox,
    cardCache,
    cacheTools,
    toast,
} from 'nc-lightapp-front';

let {setDefData, getDefData} = cardCache;
import MergeModal from "../components/mergeModal";
import RenameModal from "../components/renameModal";
import StopDeptModal from "../components/stopDeptModal";
import UncancelDeptModal from "../components/uncancelDeptModal";

import ReferSearch from 'src/hrpub/common/components/referSearch/org'
import DetailPage from "../components/detailPage";
import JuniorModal from "../components/juniorModal";
import InposModal from "../components/inposModal";
import OutposModal from "../components/outposModal";
import PostQueryAction from "../functions/PostQueryAction";
import HRDeptQueryAction from "../functions/HRDeptQueryAction";
import PostQueryOneAction from "../functions/PostQueryOneAction";
import PostAddAction from "../functions/PostAddAction";
import AddCondition, {addPkorgRefer} from "../../../public/functions/addCondition";
import PostDeleteAction from "../functions/PostDeleteAction";
import PostCancelAction from "../functions/PostCancelAction";
import PostCurrentStaffQuery from "../functions/PostCurrentStaffQuery";
import PostSubordinateQuery from "../functions/PostSubordinateQuery";
import PostFormerStaffQuery from "../functions/PostFormerStaffQuery";
import PostRenameAction from "../functions/PostRenameAction";
import PostRenameExtAction from "../functions/PostRenameExtAction";
import PostChangeCancelAction from "../functions/PostChangeCancelAction";
import PostChangeCancelExecAction from "../functions/PostChangeCancelExecAction";
import PostUnCancelAction from "../functions/PostUnCancelAction";
import PostUnCancelExecAction from "../functions/PostUnCancelExecAction";
import PostMergeAction from "../functions/PostMergeAction";
import PostMergeExecAction from "../functions/PostMergeExecAction";
import PagePaginationBar from "../../../public/components/pagePaginationBar";
import ViewPostModal from "../components/viewpostModal";
import BatchModifyModal from "../components/batchModifyModal";
import JobBatchAddModal from "../components/jobBatchAddModal";
import PoststdBatchAddModal from "../components/poststdBatchAddModal";
import PostEditAction from "../functions/PostEditAction";
import tableRowAddLink from "../../../public/functions/tableRowAddLink";
import CheckCapaUsedAction from "../functions/CheckCapaUsedAction";
import {COMMON, htmlOutput, htmlPrint} from "../common/common";
import {createBillinfoPage} from "../../../public/functions/createBillinfoPage";
import getPageParam from "../functions/getPageParam";

const {NCCheckbox, NCButtonGroup, NCButton} = base;
const {NCUploader} = high;

const buttonGroup = 'head';
const searchId = 'postquery';
const formId = 'om_post';
const treeId = 'leftTree';
const tableId = 'postlist';

let defaultPageInfo = {
    pageIndex: 1,
    pageSize: 10,
    total: 0,
    totalPage: 0
};
let pageidObj = {};

class HrPost extends Component {
    constructor(props) {
        super(props);
        this.props = props;
        this.config = {
            pagecode: '60054030p',
            appcode: '60054030'
        };
        this.businessInfo = {}; // 业务信息
        this.pk_post = ''; // 选择的pk_post
        this.pk_postseries = null; // 岗位序列 主键
        this.autoGeneratedCode = null; // 设置编码的值
        this.tableOrg = '';
        this.tablePost = '';
        this.pk_dept = ''; // 选择的pk_dept
        this.pk_org = ''; // 选择的pk_org
        this.billNo = ''; // 选择的编码
        // 编辑页面选择的行
        this.state = {
            gridrelationTable: [],                  // 详情页子集 table
            detailLoading: false,                    // 详情页请求数据标志
            json: {},
            isShowDetail: false,                    // 是否展示详情页 true: 展示；  false：不展示
            isDetailEdit: false,                    // 详情页是否是编辑态 false: 浏览态；  true：编辑态
            isNewAddFlag: false,                    // 是否是新增 false: 否；  true：是
            hrDeptTreeRef: '',                      // 人力资源部门参照 列表页 搜索框值
            treeType: 'adminOrg',                   // 左树 类型选择 adminOrg：行政组织；  psnType：岗位序列
            enablestate: false,                     // 左树是否包含撤销  false：不包含
            tableEnablestate: false,                // 右表是否包含撤销  false：不包含
            newAddPageFlag: false,                  // 新增    true: 新增;    false: 非新增

            // 弹窗 打开/关闭 标志
            copyModalVisible: false,                // 复制弹窗    true: 显示;    false: 隐藏
            batchModifyVisible: false,              // 批改弹窗    true: 显示;    false: 隐藏
            jobBatchAddVisible: false,              // 按职务批量新增    true: 显示;    false: 隐藏
            poststdBatchAddVisible: false,          // 按基准岗位批量新增    true: 显示;    false: 隐藏
            renameModalVisible: false,              // 部门更名弹窗    true: 显示;    false: 隐藏
            stopDeptModalVisible: false,            // 撤销弹窗    true: 显示;    false: 隐藏
            uncancelDeptModalVisible: false,        // 取消撤销弹窗    true: 显示;    false: 隐藏
            mergeModalVisible: false,               // 合并弹窗    true: 显示;    false: 隐藏
            inposVisible: false,                    // 在职人员弹窗    true: 显示;    false: 隐藏
            outposVisible: false,                   // 曾任职人员弹窗    true: 显示;    false: 隐藏
            juniorVisible: false,                   // 下级人员弹窗    true: 显示;    false: 隐藏
            viewPostVisible: false,            // 岗位关系树弹窗    true: 显示;    false: 隐藏


            queryActionPkorg: null,                   // 查询左树的数据 主组织
            // 查询模板参数
            searchModalValue: null,
            currentSelectDepartment: '',
            humanResourceOrganizationValue: {},
            include_child_depts: false,
            include_child_orgs: false,

            // 附件管理
            groupLists: [],                         // 上传list
            pk_post: '',                            // billId
            billNo: '',                             // billNo

            // 全局参数
            allpks: [],                             // 右边所有的keys 上下翻页用
            // 分页
            pageInfo: defaultPageInfo,

            // editTable Height
            tableHeight: null,

            //
            isUsered: false,  //岗位能力素质是否可修改  false：可修改 ；  true： 不可修改

            templatePageId: null, //模板pageid 公式校验 用
        };
    }

    /**
     * 查询主组织 节点信息
     */
    searchChange(val) {
        if (!this.state.queryOid) {
            this.setState({
                hrDeptTreeRef: null
            });
            return
        }
        this.setState({
            hrDeptTreeRef: val,
            queryActionPkorg: val.refpk
        });
        addPkorgRefer(this.props, {pk_org: val.refpk});
        // 设置按钮状态
        this.setBtnDisSta({
            copy: !val.hasOwnProperty('refpk'),          // 复制
            viewpost: !val.hasOwnProperty('refpk'),          // 岗位关系树
            batchadd: !val.hasOwnProperty('refpk'),          //按职务新增
            batchaddByPStd: !val.hasOwnProperty('refpk'),    //按基准岗位新增
        });
        if (!val || !val.refpk) {
            this.pageParamsInit(() => {
                this.HRDeptQueryAction();
                this.emptyDetailPage();
                this.pk_dept = null;
                this.pk_org = null;
                this.pk_postseries = null;
                this.props.editTable.setTableData(tableId, {rows: []});
                this.setBtnDisSta({print: true, output: true});
                this.PostQueryAction(true);
            });
            return
        }
        getPageParam(val.refpk).then(res => {
            defaultPageInfo.pageSize = Number(res.data[COMMON.sysPrarms]);
            this.pageParamsInit(() => {
                this.HRDeptQueryAction();
                this.emptyDetailPage();
                this.pk_dept = null;
                this.pk_org = null;
                this.pk_postseries = null;
                this.props.editTable.setTableData(tableId, {rows: []});
                this.setBtnDisSta({print: true, output: true});
                this.PostQueryAction(true);
            });
        })
    }

    /**
     * 返回按钮  返回到列表页
     */
    backButtonClick = () => {
        this.updateState({
            isNewAddFlag: false,
            isDetailEdit: false,
            isShowDetail: false
        });
        // 设置按钮状态
        this.setBtnDisSta({
            file: true              // 附件
        });
        this.setDetailPageStatus('browse');
        // 查询列表页
        this.PostQueryAction();
    };

    /**
     * 左树是否包含撤销
     * @param val
     */
    onCheckShowDisable(val) {
        if (!this.state.queryActionPkorg) return;
        this.setState({
            enablestate: val
        }, () => {
            this.HRDeptQueryAction();
            this.emptyDetailPage();
            this.pk_dept = null;
            this.pk_org = null;
            this.pk_postseries = null;
            this.props.editTable.setTableData(tableId, {rows: []});
            this.PostQueryAction(true);
        })
    }

    /**
     * 左树 展现方式的选择
     * @param treeType
     */
    onChangeTreeType(treeType) {
        if (treeType === 'psnType') {
            this.root.title = this.root.refname = this.state.json['jf6005-000322']/* 国际化处理：     岗位序列*/
        } else if (treeType === 'adminOrg') {
            this.root.title = this.root.refname = this.state.json['jf6005-000321']/* 国际化处理： 行政组织*/
        }
        this.updateState({
            treeType
        }, () => {
            this.pageParamsInit(() => {
                this.HRDeptQueryAction();
                this.emptyDetailPage();
                this.pk_dept = null;
                this.pk_org = null;
                this.pk_postseries = null;
                this.props.editTable.setTableData(tableId, {rows: []});
                this.PostQueryAction(true);
            });
        })
    }

    /**
     * 右表是否包含撤销
     * @param val
     */
    onCheckTableShowDisable(val) {
        if (!this.state.queryActionPkorg) return;
        this.updateState({
            pageIndex: 0,
            tableEnablestate: val
        }, () => {
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
        })
    }

    /**
     * 用户列表 头部 button点击事件
     * @param prop
     * @param btncode
     * @param areacode
     * @param opt
     */
    onButtonClick(prop, btncode, areacode, opt) {
        this.addCondition(this.state.queryActionPkorg);
        if (areacode === 'body') {
            switch (btncode) {
                case 'edit':
                    // 编辑
                    this.tableOrg = opt.pk_org.value;
                    this.tablePost = opt.pk_post.value;
                    this.postEditAction(this.tablePost, () => {
                        this.updateState({
                            isDetailEdit: true,
                            isShowDetail: true
                        }, () => {
                            this.setDetailPageStatus('edit');
                            this.PostQueryOneAction(this.tablePost, () => {
                            });
                        });
                    });
                    break;
                case 'delete':
                    promptBox({
                        color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
                        title: this.state.json['jf6005-000050'],           // 提示标题, 国际化处理： 请注意*/
                        content: `${this.state.json['jf6005-000057']}`,   // 提示内容,非必输/* 国际化处理： 您确定要删除吗？*/
                        noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
                        noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
                        beSureBtnName: this.state.json['jf6005-000036'],  // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
                        cancelBtnName: this.state.json['jf6005-000008'],  // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
                        hasCloseBtn: false,             //显示“X”按钮，默认不显示，不显示是false，显示是true
                        beSureBtnClick: () => {
                            // 删除
                            this.PostDeleteAction(opt.pk_post.value, opt.rowid);
                        },   // 确定按钮点击调用函数,非必输
                        // cancelBtnClick: functionCancel,  // 取消按钮点击调用函数,非必输
                        // closeBtnClick:functionClose, //关闭按钮点击调用函数，非必输
                        closeByClickBackDrop: false,//点击遮罩关闭提示框，默认是false点击不关闭,点击关闭是true
                    });

                    break;
                default:
                    break;
            }
        } else {
            switch (btncode) {
                case 'copy':
                    // 复制
                    this.updateState({
                        copyModalVisible: true
                    });
                    break;
                case 'batchaddByPStd':
                    // 按基准岗位批量新增
                    this.updateState({
                        poststdBatchAddVisible: true
                    });
                    break;
                case 'batchadd':
                    // 按职务批量新增
                    this.updateState({
                        jobBatchAddVisible: true
                    });
                    break;
                case 'batchEdit':
                    // 批改
                    this.batchModifyModal.postBatchEditAction();
                    this.updateState({
                        batchModifyVisible: true
                    });
                    break;
                case 'add':
                    this.addPost();
                    break;
                case 'query':
                    // 点击查询按钮
                    this.props.search.openAdvSearch(searchId, true);
                    break;
                case 'change':
                    // 部门变更
                    break;
                case 'change_grp':
                    //

                    break;
                case 'rename':
                    // 重命名查询请求
                    this.postRenameAction();
                    break;
                case 'merge':
                    // 合并
                    this.postMergeAction();
                    break;
                case 'cancel':
                    // 撤销 查询
                    this.postChangeCancelAction();
                    break;
                case 'uncancel':
                    // 取消撤销 查询
                    this.postUnCancelAction();
                    break;
                case 'viewpost':
                    // 岗位关系树查询
                    this.viewpostModal.viewPostTreeAction();
                    // 岗位关系树
                    this.updateState({
                        viewPostVisible: true
                    });
                    break;
                case 'more':
                    // 更多
                    break;
                case 'viewinpos':
                    // 在职人员
                    // 在职人员查找
                    this.postCurrentStaffQuery();
                    break;
                case 'viewoutpos':
                    // 曾任职人员
                    this.postFormerStaffQuery();
                    break;
                case 'junior':
                    // 下级人员
                    this.postSubordinateQuery();
                    break;
                case 'file':
                    // 附件
                    this.updateState({
                        showUploader: true
                    });
                    break;
                case 'print':
                    htmlPrint(prop, this.state.json, "card-area-table-box");
                    break;
                case 'output':
                    htmlOutput(prop, this.state.json);
                    break;
                case 'refresh':
                    this.refresh();
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * 刷新右表
     */
    refresh() {
        // 点击刷新按钮
        let rootFlag = !this.pk_dept && !this.pk_org;
        this.PostQueryAction(rootFlag);
    }

    /**
     * 新增
     */
    addPost() {
        // 如果左树为岗位序列 则 fun_type值为3  否则 根据PK Dept 计算
        let queryActionPkorg = this.state.queryActionPkorg;
        let func_type = this.state.treeType === 'psnType' ? 3 : this.pk_dept ? 2 : 1;
        let pk_org = this.state.treeType === 'psnType' ? queryActionPkorg : this.pk_org;
        let typePk = this.state.treeType === 'psnType' ? this.pk_postseries : this.pk_dept || this.pk_org;
        // 新增时 当pk_org / typePk 为空时 其值设置为 queryActionPkorg；
        PostAddAction.call(this, func_type, pk_org || queryActionPkorg, typePk || queryActionPkorg);
    }

    /**
     * 取消增加
     */
    postCancelAction() {
        let pk_org = this.state.treeType === 'psnType' ? this.state.queryActionPkorg : this.pk_org;
        let autoGeneratedCode = this.autoGeneratedCode;
        PostCancelAction.call(this, autoGeneratedCode, pk_org).then(res => {

        });
    }

    /**
     * 设置详情页状态
     * @param val    'edit': 编辑态；   browse：'浏览态'
     */
    setDetailPageStatus(val) {
        this.props.form.setFormStatus('om_post', val);
        this.props.form.setFormStatus("post_jq", val);
        this.state.gridrelationTable.forEach(item => {
            if (item.moduletype !== 'table') return;
            let tableId = item.code;
            // 关闭table
            this.props.cardTable.toggleCardTable(tableId, false);
            // 设置table状态
            this.props.cardTable.setStatus(tableId, val);
        });
    }

    /**
     *  左边导航栏 鼠标滑过节点 事件
     * @param key
     */
    onMouseEnterEve(key) {
        let isRoot = false;
        if (key === this.root.key) {
            isRoot = true
        }
        // 如果是跟组件则 icon 全部隐藏
        let obj = {
            delIcon: false, //false:隐藏； true:显示; 默认都为true显示
            editIcon: false,
            addIcon: false
        };
        this.props.syncTree.hideIcon(treeId, key, obj)
    }

    /**
     * 点击树节点
     * @param refpk
     */
    onSelectTree(refpk, item, isChange, node) {
        // 清空表单
        if (refpk === '~' || refpk === 'ROOT') {
            this.emptyDetailPage();
            let nodeVal = item.children[0].nodeData.nodeValue;
            this.setDeptOrgPostseries(nodeVal);
            this.props.editTable.setTableData(tableId, {rows: []});
            this.pageParamsInit(() => {
                /********************************
                 * ajax 请求选择的树节点数据
                 ********************************/
                this.PostQueryAction(true);
            });
            return;
        }
        // 如果没有改变则返回
        let nodeVal = item.nodeData.nodeValue;
        this.setDeptOrgPostseries(nodeVal);
        this.pageParamsInit(() => {
            /********************************
             * ajax 请求选择的树节点数据
             ********************************/
            this.PostQueryAction();
        });

        this.addCondition(this.pk_org);
    }


    setDeptOrgPostseries(nodeVal) {
        // 设置按钮状态
        this.setBtnDisSta({
            add: false,               // 新增
            copy: false,              //复制
            file: true,              // 附件
        });
        if (nodeVal === null || !nodeVal) {
            this.pk_dept = null;
            this.pk_org = null;
            this.pk_postseries = null;
            return
        }
        this.pk_dept = nodeVal.hasOwnProperty('pk_dept') ? nodeVal.pk_dept : null;
        this.pk_org = nodeVal.hasOwnProperty('pk_org') ? nodeVal.pk_org : null;
        this.pk_postseries = nodeVal.hasOwnProperty('pk_postseries') ? nodeVal.pk_postseries : null;
    }

    pageParamsInit(cb) {
        this.updateState({
            pageInfo: defaultPageInfo
        }, () => {
            if (cb) {
                cb()
            }
        })
    }

    addCondition(pk_org) {
        let meta = this.props.meta.getMeta();
        AddCondition(meta[formId], {
            pk_org
        }, 'pk_dept');

        // 按基准岗位批增确认岗位 直接上级参照当前组织的岗位
        AddCondition(meta['confirmByStdStep'], {
            "pk_hrorg": this.state.queryActionPkorg,
            GridRefActionExt: 'nccloud.web.hrjf.post.sqlbuilder.SuporiorSQLBuilder',
            isShowDisable: false,
            pk_org
        }, 'suporior');
        // 按职务批增确认岗位 直接上级参照当前组织的岗位
        AddCondition(meta['confirmByJobStep'], {
            "pk_hrorg": this.state.queryActionPkorg,
            GridRefActionExt: 'nccloud.web.hrjf.post.sqlbuilder.SuporiorSQLBuilder',
            isShowDisable: false,
            pk_org
        }, 'suporior');
        this.props.meta.setMeta(meta);
    }

    /**
     * 右表单击
     */
    onRowClick(props, index, record, e) {
        this.tablePost = record.values.pk_post.value;
        this.updateState({
            billNo: record.values.postcode.value || '',
            pk_post: record.values.pk_post.value || ''
        }, () => {
            // 设置按钮状态 可用
            //    是否撤销
            let hrcanceled = record.values.hrcanceled.value;
            this.setBtnDisSta({
                viewinpos: false,         //在职人员
                viewoutpos: false,        //曾在职人员
                junior: false,            //下级人员
                merge: hrcanceled,             //合并
                file: false               // 文件管理
            });
            let meta = this.props.meta.getMeta();
            // 岗位合并接收岗位参照只能是本组织的岗位
            AddCondition(meta["post_merge"], {
                isShowDisable: false,
                TreeRefActionExt: "nccloud.web.hrjf.post.sqlbuilder.MergePostSQLBuilder",
                pk_post: this.state.pk_post,
                pk_org: this.state.queryActionPkorg
            }, 'mergePost');
            this.props.meta.setMeta(meta);
        });
    }

    /**
     * 右边双击
     */
    onRowDoubleClick = (record, index, e) => {
        setDefData('hr_post_table_record', record);
        // 获取部门
        // let pk_org = "0001HR10000000002MD5";
        // let pk_post = "1002HR100000000003TV";
        this.tableOrg = record.values.pk_org.value;
        this.tablePost = record.values.pk_post.value;

        this.PostQueryOneAction(this.tablePost, () => {
            // 显示详情页
            this.updateState({
                isShowDetail: true
            });
        });
    };

    /**
     * 选择框有变动的钩子函数
     */
    selectedChange() {
        let selectRows = this.props.editTable.getCheckedRows(tableId);
        this.setBtnDisSta({
            rename: selectRows.length < 1 || !this.getUncancelPost(),         //更名
            cancel: selectRows.length < 1 || !this.getUncancelPost(),         //撤销
            uncancel: selectRows.length < 1 || !this.getCancelPost(),         //取消撤销批改
            batchEdit: selectRows.length < 1,         //批改
        });
    }

    /**
     * 获取 撤销的 post
     * @returns {*}
     */
    getCancelPost() {
        let postArr = [];
        let selectRows = this.props.editTable.getCheckedRows(tableId);
        selectRows.map(item => {
            if (item.data.values.hrcanceled.value) {
                postArr.push(item.data.values.pk_post.value);
            }
        });
        if (postArr.length < 1) {
            return false
        }
        return postArr.join(',')
    }

    /**
     * 获取 未撤销的 post
     * @returns {*}
     */
    getUncancelPost() {
        let postArr = [];
        let selectRows = this.props.editTable.getCheckedRows(tableId);
        selectRows.map(item => {
            if (!item.data.values.hrcanceled.value) {
                postArr.push(item.data.values.pk_post.value);
            }
        });
        if (postArr.length < 1) {
            return false
        }
        return postArr.join(',')
    }

    //每页显示条数
    pageSizeSelect = (val) => {
        defaultPageInfo.pageSize = val;
        this.state.pageInfo.pageSize = val;
        this.state.pageInfo.pageIndex = 1;
        this.updateState(this.state.pageInfo, () => {
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
            rootFlag = null;
        });
    };
    //分页事件
    paginationEve = (key) => {
        this.state.pageInfo.pageIndex = key;
        this.updateState(this.state.pageInfo, () => {
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
            rootFlag = null;
        });
    };

    /**
     * 保存新增
     */
    saveAdd() {
        // 表单验证
        if (!this.props.form.isCheckNow(formId)) {
            return
        }
        promptBox({
            color: 'warning',               // 提示类别默认"success"， "success"/"info"/"warning"/"danger",非必输
            title: this.state.json['jf6005-000050'],                // 提示标题, 默认不同类别下分别为："已成功"/"帮助信息"/"请注意"/"出错啦",非必输/* 国际化处理： 请注意*/
            content: this.state.json['jf6005-000055'],             // 提示内容,非必输/* 国际化处理： 确认要保存新增吗？*/
            noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输
            noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输
            beSureBtnName: this.state.json['jf6005-000036'],          // 确定按钮名称, 默认为"确定",非必输/* 国际化处理： 确定*/
            cancelBtnName: this.state.json['jf6005-000008'],           // 取消按钮名称, 默认为"取消",非必输/* 国际化处理： 取消*/
            beSureBtnClick: () => {
                // 重新加载数据
                // todo 保存新增

            },   // 确定按钮点击调用函数,非必输
            cancelBtnClick: null  // 取消按钮点击调用函数,非必输
        });
    }

    /**
     * 更新state对象
     * @param data
     * @param callback
     */
    updateState(data, callback = () => {
    }) {
        this.setState(data, callback);
    }

    /**
     * 设置 按钮的禁用状态
     * @param buttonState
     * {
            autogen: true,
            firstrow: true,
            prerow: true,
            nextrow: true,
            lastrow: true,
            add: true, //新增
            edit: true, //编辑
            delete: true, //删除
            copy: true, //复制
            query: true, //查询
            refresh: true, //刷新
            showdisa: true, //显示停用
            print_group: true, //打印
            more: true //更多
        }
     */
    setBtnDisSta(buttonState) {
        this.props.button.setButtonDisabled(buttonState)
    }

    initUIDom = () => {
        let data = this.props.domTemplate;

        // template 添加字段
        let template = data.template;
        //将分支上的模版 放到 template对象中
        for (let key in data) {
            if (key === 'button' || key === 'context' || key === 'template') {
                continue
            }
            let batchData = data[key];
            for (let templateId in batchData) {
                // 在职人员模板 / 曾任职人员模板 / 下级人员模版 / 变更 / 批量修改
                let tempData = batchData[templateId];
                if (typeof tempData !== 'object') continue;
                if (!tempData.hasOwnProperty('moduletype')) continue;
                template[templateId] = tempData
                pageidObj[templateId] = batchData.pageid || '';
            }
        }

        // 添加关联项
        if (!template.formrelation) {
            template.formrelation = {}
        }
        let formRelation = template.formrelation;
        // table 子集
        let gridrelationTable = [];
        // formrelation中的模板为form 删除table等
        for (let key in formRelation) {
            let formrelationArr = formRelation[key];
            if (key === formId) {
                let {moduletype, name, code} = template[formId];
                gridrelationTable.push({moduletype, name, code})
            }
            let newArr = formrelationArr.filter(formKey => {
                if (key === formId && template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "table") {
                    // 添加table 子集
                    let {moduletype, name, code} = template[formKey];
                    gridrelationTable.push({moduletype, code, name})
                }
                return template.hasOwnProperty(formKey) && template[formKey]["moduletype"] === "form"
            });
            formRelation[key] = newArr;
        }

        gridrelationTable.forEach((item) => {
            if (item.moduletype !== 'table') return;
            let tableId = item.code;
            data.template.gridrelation[tableId] = {
                "srcAreaCode": tableId,
                "destBrowseAreaCode": null,
                "destEditAreaCode": null,
                "tabRelation": [tableId]
            };
        });
        if (data.template.gridrelation.hasOwnProperty('postlist')) {
            delete data.template.gridrelation.postlist
        }

        // 设置状态
        this.setState({
            buttons: data.button || [],
            context: data.context || {},
            queryOid: template.postquery.oid,
            deptOid: template.deptquery.oid,
            gridrelationTable,
            templatePageId: template.pageid || ''
        });

        this.tableAddOpr(data.template[tableId], data.context.currentLangSeq);
        this.props.meta.setMeta(data && data.template ? data.template : {});
        this.props.button.setButtons(data && data.button ? data.button : [], () => {
            // 初始化页面数据
            this.initData();
        });
    };

    /**
     * 表格添加操作列
     */
    tableAddOpr = (tabledata, currentLangSeq = "1") => {
        let langName = currentLangSeq === "1" ? "" : currentLangSeq;
        // 列表页 的组织名称 添加超链接
        tableRowAddLink(tabledata, 'postname', this.onRowDoubleClick, 'value',langName);
        let _this = this;
        //添加表格操作列
        let event = {
            label: '操作',
            attrcode: 'opr',
            itemtype: 'customer',
            //className: "table-opr",
            fixed: 'right',
            width: '220px',
            visible: true,
            render(text, record, index) {
                let recordVal = record.values;
                return (
                    <div className="currency-opr-col">
                        {_this.props.button.createOprationButton(
                            ['edit', 'delete'],
                            {
                                area: 'body',
                                buttonLimit: 3,
                                onButtonClick: (props, id, e) => {
                                    setDefData('hrjf_hrpost', 'hr_post_table_record', record);
                                    _this.onButtonClick(props, id, 'body', recordVal)
                                },
                                popContainer: document.querySelector('.header2')
                            }
                        )}
                    </div>
                );
            }
        };
        tabledata.items.push(event);
    };

    /**
     * 初始化数据
     */
    initData() {
        // 设置按钮禁用状态
        this.setBtnDisSta({
            add: true,               //新增
            copy: true,              //复制
            batchEdit: true,         //批改
            batchadd: !this.state.queryActionPkorg,          //按职务新增
            batchaddByPStd: !this.state.queryActionPkorg,    //按基准岗位新增
            rename: true,            //更名
            merge: true,             //合并
            cancel: true,            //撤销
            uncancel: true,          //取消撤销
            viewinpos: true,         //在职人员
            viewoutpos: true,        //曾在职人员
            junior: true,            //下级人员
            viewpost: true,          //岗位关系树
            file: true,              // 附件
            print: true,             // 打印
            output: true             // 输出
        });

        // 清空数据
        this.emptyDetailPage();
        this.props.editTable.setTableData(tableId, {rows: []});

        // 查询左树
        this.HRDeptQueryAction();
    }

    /**
     * 清空详情页数据
     */
    emptyDetailPage() {
        this.props.form.EmptyAllFormValue("om_post");
        this.state.gridrelationTable.forEach(item => {
            if (item.moduletype !== 'table') return;
            let tableId = item.code;
            this.props.cardTable.toggleCardTable(tableId, false);
            this.props.cardTable.setTableData(tableId, {rows: []})
        });
    }

    /**
     * 查询左树
     * @constructor
     */
    HRDeptQueryAction() {
        // 取消当前选中所有节点
        this.props.syncTree.cancelSelectedNode(treeId);
        // 设置按钮状态
        this.setBtnDisSta({
            file: true              // 附件
        });
        this.updateState({
            pageInfo: {
                pageIndex: 1,
                pageSize: 10,
                total: 0,
                totalPage: 0
            },
            isDetailEdit: false,
            isShowDetail: false
        });
        this.props.editTable.setTableData(tableId, {rows: []});
        HRDeptQueryAction.call(this);
    }

    /**
     * 创建左边导航栏
     */
    creatLeftTree(navData) {
        let root = Object.assign({}, this.root);
        if (navData) {
            root.children = navData;
        }
        let treeData = [root];
        this.props.syncTree.setSyncTreeData(treeId, treeData);
        if (navData) {
            this.props.syncTree.setNodeSelected(treeId, root.refpk);
            this.setDeptOrgPostseries(null);
        }
        root = null;
    }

    /**
     * 获取数据
     * @param rootFlag 是否是全部请求
     * @constructor
     */
    PostQueryAction(rootFlag = false) {
        // 清空列表
        this.props.editTable.setTableData(tableId, {rows: []});
        // 清空点击右边事件
        this.updateState({
            billNo: '',
            pk_post: ''
        }, () => {
            this.setBtnDisSta({
                merge: true,             //合并
            });
            this.tablePost = '';
        });

        // 点击左树 查询右边数据
        // 如果左树为岗位序列则 fun_type值为3  否则 根据PK Dept 计算
        let func_type = this.state.treeType === 'psnType' ? 3 : this.pk_dept ? 2 : 1;
        let pk_org = this.state.treeType === 'psnType' || rootFlag ? this.state.queryActionPkorg : this.pk_org;
        let showDisable = this.state.tableEnablestate;
        let typePk = this.state.treeType === 'psnType' ? this.pk_postseries : this.pk_dept || this.pk_org;
        (!pk_org) && (pk_org = this.state.queryActionPkorg);
        let pageInfo = {
            "pageSize": this.state.pageInfo.pageSize + '',
            "pageIndex": this.state.pageInfo.pageIndex
        };
        // 右表未选中，则下面按钮不可用
        this.setBtnDisSta({
            viewinpos: true,         //在职人员
            viewoutpos: true,        //曾在职人员
            junior: true,            //下级人员
            merge: true,             //合并
            print: true,             // 打印
            output: true,            // 输出
            file: true               // 文件管理
        });
        PostQueryAction.call(this, func_type, pk_org, showDisable, typePk, pageInfo, tableId);
    }

    /**
     * 删除table row
     * @constructor
     */
    PostDeleteAction(pk_post, rowid) {
        PostDeleteAction.call(this, pk_post).then((res) => {
            let record = getDefData('hrjf_hrpost', 'hr_post_table_record');
            this.props.editTable.deleteTableRowsByRowId(tableId, record.rowid, true)
        })
    }

    /**
     * 在职人员查找
     */
    postCurrentStaffQuery() {
        this.updateState({
            inposVisible: true
        });
        PostCurrentStaffQuery(this.state.pk_post).then(res => {
            if (!res.data) return;
            let headObj, bodyObj;
            headObj = res.data.head;
            bodyObj = res.data.bodys;
            // 表单
            if (headObj && headObj.CurrentStaff_info) {
                let formdata = {
                    'CurrentStaff_info': {
                        rows: headObj.CurrentStaff_info.rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                formdata = null;
            }
            // 表格
            if (bodyObj && bodyObj.CurrentStaff_query) {
                this.props.editTable.setTableData('CurrentStaff_query', bodyObj.CurrentStaff_query);
            }
            headObj = null;
            bodyObj = null;
        })
    }

    /**
     * 下级人员查询
     * @param lever -1 :所有下级岗位，1 :下一级，2 :下两级，3 :下三级
     */
    postSubordinateQuery(lever = 1) {
        if (!this.state.juniorVisible) {
            this.updateState({
                juniorVisible: true
            });
        }
        PostSubordinateQuery(this.state.pk_post, lever).then(res => {
            if (!res.data) return;
            let headObj, bodyObj;
            headObj = res.data.head;
            bodyObj = res.data.bodys;
            // 表单
            if (headObj && headObj.Subordinate_info) {
                let formdata = {
                    'Subordinate_info': {
                        rows: headObj.Subordinate_info.rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                formdata = null;
            }
            // 表格
            if (bodyObj && bodyObj.Subordinate_query) {
                this.props.editTable.setTableData('Subordinate_query', bodyObj.Subordinate_query);
            }
            headObj = null;
            bodyObj = null;
        })
    }

    /**
     * 曾任职人员查询
     */
    postFormerStaffQuery(lever = 3) {
        this.updateState({
            outposVisible: true
        });
        PostFormerStaffQuery(this.state.pk_post, lever).then(res => {
            if (!res.data) return;
            let headObj, bodyObj;
            headObj = res.data.head;
            bodyObj = res.data.bodys;
            // 表单
            if (headObj && headObj.FormerStaff_info) {
                let formdata = {
                    'FormerStaff_info': {
                        rows: headObj.FormerStaff_info.rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                formdata = null;
            }
            // 表格
            if (bodyObj && bodyObj.FormerStaff_query) {
                this.props.editTable.setTableData('FormerStaff_query', bodyObj.FormerStaff_query);
            }
            headObj = null;
            bodyObj = null;
        })
    }

    /**
     * 更名查询
     */
    postRenameAction() {
        this.updateState({
            renameModalVisible: true
        });
        let pk_post = this.getUncancelPost();
        PostRenameAction(pk_post).then(res => {
            if (!res.data) return;
            let headObj;
            headObj = res.data;
            // 表单
            if (headObj && headObj.rename) {
                let formdata = {
                    'rename': {
                        rows: headObj.rename.rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                this.props.form.setFormStatus('rename', 'edit');
                formdata = null;
            }
            headObj = null;
        })
    }

    /**
     * 确认重命名
     */
    renameDeptExecAction(cb) {
        let formdata = this.props.form.getAllFormValue('rename');
        let pk_post = this.getUncancelPost();
        // 确认重命名
        PostRenameExtAction(formdata, pk_post).then(res => {
            toast({
                color: "success",
                content: this.state.json['jf6005-000393']/* 国际化处理： 更名成功！*/
            });
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
            if (cb && typeof cb === 'function') {
                cb();
            }
        })
    }

    /**
     * 撤销查询
     */
    postChangeCancelAction() {
        this.updateState({
            stopDeptModalVisible: true
        });
        let pk_post = this.getUncancelPost();
        PostChangeCancelAction(pk_post).then(res => {
            if (!res.data) return;
            let headObj;
            headObj = res.data;
            // 表单
            if (headObj && headObj.post_cancel) {
                let formdata = {
                    'post_cancel': {
                        rows: headObj.post_cancel.rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                this.props.form.setFormStatus('post_cancel', 'edit');
                formdata = null;
            }
            headObj = null;
        })
    }

    /**
     * 确认撤销
     */
    postChangeCancelExecAction(cb) {
        let formdata = this.props.form.getAllFormValue('post_cancel');
        let pk_post = this.getUncancelPost();
        // 确认撤销
        PostChangeCancelExecAction(formdata, pk_post).then(res => {
            toast({
                color: "success",
                content: this.state.json['jf6005-000394']/* 国际化处理： 撤销成功！*/
            });
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
            if (cb && typeof cb === 'function') {
                cb();
            }
        })
    }

    /**
     * 取消撤销查询
     */
    postUnCancelAction() {
        this.updateState({
            uncancelDeptModalVisible: true
        });
        let pk_post = this.getCancelPost();
        PostUnCancelAction(pk_post).then(res => {
            if (!res.data) return;
            let headObj;
            headObj = res.data;
            // 表单
            if (headObj && headObj.post_uncancel) {
                let formdata = {
                    'post_uncancel': {
                        rows: headObj.post_uncancel.rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                this.props.form.setFormStatus('post_uncancel', 'edit');
                formdata = null;
            }
            headObj = null;
        })
    }

    /**
     * 确认取消撤销
     */
    postUnCancelExecAction(cb) {
        let formdata = this.props.form.getAllFormValue('post_uncancel');
        let pk_post = this.getCancelPost();
        // 确认重命名
        PostUnCancelExecAction(formdata, pk_post).then(res => {
            toast({
                color: "success",
                content: this.state.json['jf6005-000395']/* 国际化处理： 取消撤销成功！*/
            });
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
            if (cb && typeof cb === 'function') {
                cb();
            }
        })
    }

    /**
     * 合并查询
     */
    postMergeAction() {
        this.updateState({
            mergeModalVisible: true
        });
        PostMergeAction(this.state.pk_post).then(res => {
            if (!res.data) return;
            let headObj, thisformid = 'post_merge';
            headObj = res.data;
            // 表单
            if (headObj && headObj[thisformid]) {
                let formdata = {
                    [thisformid]: {
                        rows: headObj[thisformid].rows
                    }
                };
                this.props.form.setAllFormValue(formdata);
                this.props.form.setFormStatus(thisformid, 'edit');
                formdata = null;
            }
            headObj = null;
        })
    }

    /**
     * 确认合并
     */
    postMergeExecAction(cb) {
        let formdata = this.props.form.getAllFormValue('post_merge');
        let pkd_post = formdata.rows[0].values.mergePost.value;
        // 确认合并
        PostMergeExecAction(formdata, this.state.pk_post, pkd_post).then(res => {
            toast({
                color: "success",
                content: this.state.json['jf6005-000348']/* 国际化处理： 合并成功！*/
            });
            let rootFlag = !this.pk_dept && !this.pk_org;
            this.PostQueryAction(rootFlag);
            if (cb && typeof cb === 'function') {
                cb();
            }
        })
    }

    /**
     * ajax 请求详情页数据
     * @param post
     * @constructor
     */
    PostQueryOneAction(post, cb) {
        let pk_org = this.tableOrg;
        let pk_post = post || this.tablePost;
        this.props.cardPagination.setCardPaginationId({id: pk_post, status: 1});
        // 查询列表页
        PostQueryOneAction.call(this, pk_post, pk_org, cb);
    }

    /**
     * 编辑请求
     */
    postEditAction = (post, callback) => {
        let pk_org = this.tableOrg;
        let pk_post = post || this.tablePost;
        PostEditAction(pk_post, pk_org).then(res => {
            //能力素质是否可编辑
            CheckCapaUsedAction().then(res => {
                this.updateState({
                    isUsered: res.data.isUsered
                })
            });

            if (callback && typeof callback === 'function') {
                callback()
            }
            // 设置主键是否可以编辑
            if (res.data.hasOwnProperty('isCodeEditable')) {
                // 设置编码的可编辑性
                this.props.form.setFormItemsDisabled('om_post', {postcode: !res.data.isCodeEditable});
            }
        })
    };

    componentDidMount() {
        let callback = (json, status, inlt) => {
            if (status) {
                this.setState({json, inlt}, () => {
                    this.root = {//为人员类别树创建一个根节点
                        "isleaf": false,
                        "select": true,
                        "key": "ROOT",
                        "title": this.state.json['jf6005-000046'], /* 国际化处理： 行政组织*/
                        "id": "ROOT",
                        "innercode": "ROOT",
                        "pid": "",
                        "refname": this.state.json['jf6005-000046'], /* 国际化处理： 行政组织*/
                        "refpk": "ROOT",
                        "iconBox": {addIcon: false, delIcon: false, editIcon: false}
                    };

                    this.pageInit();
// this.initTemplate(this.props) //在这里可以进行ceateUIDom
                }) // 保存json和inlt到页面state中并刷新页面
            }
        };
        this.props.MultiInit.getMultiLang({moduleId: 'jf6005', domainName: 'hrjf', callback})
    }


    /**
     * 页面初始化
     */
    pageInit() {
        this.onWindowResize();
        window.addEventListener('resize', this.onWindowResize);
        this.businessInfo = getBusinessInfo() || {groupId: '0001HR100000000005M3'};
        this.initUIDom();
    }

    /**
     * 检测屏幕高度变化，修改table高度
     */
    onWindowResize = () => {
        this.updateState({
            tableHeight: window.innerHeight - 166 + 'px'
        })
    };

    // 附件的关闭点击
    onHideUploader = () => {
        this.setState({
            showUploader: false,
            groupLists: []
        })
    };
    //获取当前附件列表
    getGroupList = (list) => {
        //要在state里面顶一个变量，用来存储列表数组
        this.setState({
            groupLists: list
        })
    };

    beforeUpload(billId, fullPath, file, fileList) {
        // 参数：单据id，当前选中分组path、当前上传文件对象，当前文件列表

        // const isJPG = file.type === 'image/jpeg';
        //
        // const isLt2M = file.size / 1024 / 1024 < 2;
        // if (!isLt2M) {
        //     alert(this.state.json['jf6005-000059'])
        //     /* 国际化处理： 上传大小小于2M*/
        // }
        // return isJPG && isLt2M;
        return true
        // 备注： return false 不执行上传  return true 执行上传
    }

    /**
     * 搜索dom点击查找
     */
    goSearch(props, searchData, type, queryInfo) {
        // searchData.conditions  []
        let data = this.props.search.getQueryInfo(searchId, true);

        this.updateState({
            searchModalValue: data
        }, () => {
            this.pageParamsInit(() => {
                this.PostQueryAction(!this.pk_org);
            });
            // 关闭查询区
            this.props.search.openAdvSearch(searchId, false);
        });
    }

    render() {
        let {button, search, DragWidthCom, editTable, syncTree} = this.props;
        const {createSyncTree} = syncTree;
        let {createEditTable} = editTable;
        let {createButtonApp} = button;
        const {
            copyModalVisible,
            renameModalVisible,
            mergeModalVisible,
            stopDeptModalVisible,
            uncancelDeptModalVisible,
            inposVisible,
            outposVisible,
            juniorVisible,
            viewPostVisible,
            jobBatchAddVisible,
            poststdBatchAddVisible,
            batchModifyVisible,
            showUploader,
            pageInfo,
            queryOid,
            deptOid
        } = this.state;

        const showType = [
            {
                key: 'adminOrg',
                text: this.state.json['jf6005-000321']/* 国际化处理： 行政组织*/
            },
            {
                key: 'psnType',
                text: this.state.json['jf6005-000322']/* 国际化处理： 人员类别*/
            }
        ];
        let commonProps = {
            ...this.props,
            json: this.state.json,
            inlt: this.state.inlt,
            pageidObj: pageidObj,
            updateState: this.updateState.bind(this),
        };
        return (
            <div className={'hrDeptPage'}>
                {/* search */}
                <div style={{display: 'none'}}>
                    {search.NCCreateSearch(searchId, {
                        clickSearchBtn: this.goSearch.bind(this),
                        onlyShowAdvArea: false,
                        showAdvSearchPlanBtn: true,
                        saveSearchPlan: true,
                        onlyShowSuperBtn: true,
                        replaceSuperBtn: this.state.json['jf6005-000063']/* 国际化处理： 查询*/
                    })}
                </div>

                {/* file */}
                <div className="nc-faith-demo-div2">
                    {/* 这里是附件上传组件的使用，需要传入三个参数 */}
                    {showUploader && <NCUploader
                        disableDownload={true}
                        billId={this.state.pk_post}
                        billNo={this.state.billNo}
                        // target={target}
                        customize={{uploadTrpe: '0'}}
                        placement={'bottom'}
                        getGroupList={this.getGroupList}
                        uploadTitle={this.state.json['jf6005-000062']}/* 国际化处理： 附件管理*/
                        onHide={this.onHideUploader} // 关闭功能
                        beforeUpload={this.beforeUpload}/>
                    }
                </div>

                {/* copy */}
                <CopyModal
                    {...commonProps}
                    queryActionPkorg={this.state.queryActionPkorg}
                    copyModalVisible={copyModalVisible}
                    refresh={this.refresh.bind(this)}
                />

                <RenameModal
                    {...commonProps}
                    renameDeptExecAction={this.renameDeptExecAction.bind(this)}
                    renameModalVisible={renameModalVisible}
                />
                <MergeModal
                    {...commonProps}
                    postMergeExecAction={this.postMergeExecAction.bind(this)}
                    mergeModalVisible={mergeModalVisible}
                />
                <StopDeptModal
                    {...commonProps}
                    pk_post={this.pk_post}
                    pk_org={this.pk_org}
                    postChangeCancelExecAction={this.postChangeCancelExecAction.bind(this)}
                    stopDeptModalVisible={stopDeptModalVisible}
                />
                <UncancelDeptModal
                    {...commonProps}
                    pk_post={this.pk_post}
                    pk_org={this.pk_org}
                    postUnCancelExecAction={this.postUnCancelExecAction.bind(this)}
                    uncancelDeptModalVisible={uncancelDeptModalVisible}
                />

                <InposModal
                    {...commonProps}
                    inposVisible={inposVisible}
                />
                <OutposModal
                    {...commonProps}
                    outposVisible={outposVisible}
                />
                <JuniorModal
                    {...commonProps}
                    juniorVisible={juniorVisible}
                    postSubordinateQuery={this.postSubordinateQuery.bind(this)}
                />
                {/*按职务批量新增*/}
                <JobBatchAddModal
                    {...commonProps}
                    jobBatchAddVisible={jobBatchAddVisible}
                    queryOid={deptOid}
                    queryActionPkorg={this.state.queryActionPkorg}
                    refresh={this.refresh.bind(this)}
                />
                {/*按基准岗位批量新增*/}
                <PoststdBatchAddModal
                    {...commonProps}
                    poststdBatchAddVisible={poststdBatchAddVisible}
                    queryOid={deptOid}
                    queryActionPkorg={this.state.queryActionPkorg}
                    refresh={this.refresh.bind(this)}
                />
                {/*批改*/}
                <BatchModifyModal
                    {...commonProps}
                    batchModifyVisible={batchModifyVisible}
                    refresh={this.refresh.bind(this)}
                    ref={(node) => {
                        this.batchModifyModal = node;
                    }}
                />
                {/*岗位关系树*/}
                <ViewPostModal
                    {...commonProps}
                    viewPostVisible={viewPostVisible}
                    queryActionPkorg={this.state.queryActionPkorg}
                    ref={(node) => {
                        this.viewpostModal = node;
                    }}
                />

                {/*列表页面*/}
                <div className={'hrDeptPageList'} style={{display: this.state.isShowDetail ? 'none' : ''}}>
                    {/* 头部 header*/}
                    <div className="header">
                        <div className={'leftDepartmentChoose'}>
                            {queryOid && <ReferSearch
                                orgVal={this.state.hrDeptTreeRef}
                                getOrgData={this.searchChange.bind(this)}
                                queryCondition={
                                    () => {
                                        return {
                                            controlType: 1
                                        }
                                    }
                                }
                                delay={true}
                            />}
                        </div>
                        {/* 标题 title*/}
                        <div className="title">

                            <span className="show-off-checkbox">
                                <NCCheckbox checked={this.state.tableEnablestate} onChange={
                                    this.onCheckTableShowDisable.bind(this)
                                }>{this.state.json['jf6005-000023']}</NCCheckbox>{/* 国际化处理： 显示撤销*/}
                            </span>

                        </div>
                        {/* 按钮组 btn-group*/}
                        <div className="btn-group">
                            {
                                createButtonApp({
                                    area: buttonGroup,
                                    buttonLimit: 3,
                                    onButtonClick: (props, btncode) => {
                                        this.onButtonClick(props, btncode, buttonGroup, this);
                                    },
                                    popContainer: document.querySelector('.header-button-area')
                                })
                            }
                        </div>
                    </div>
                    {/* 树卡区域 */}
                    <div className="tree-card">
                        <DragWidthCom
                            // 左树区域
                            leftDom={
                                <div className="tree-area">
                                    <div className='show-type'>
                                        {/*英文显示问题 先去掉标题*/}
                                        {/*<div className={`title ${THEME.fontc}`}> {this.state.json['jf6005-000320']}：
                                        </div>*/}
                                        {/* 国际化处理：展示方式*/}
                                        <NCButtonGroup>
                                            {showType.map(item => {
                                                return <NCButton
                                                    colors={this.state.treeType === item.key ? "primary" : ""}
                                                    key={item.key}
                                                    onClick={() => this.onChangeTreeType(item.key)}>{item.text}</NCButton>
                                            })}
                                        </NCButtonGroup>
                                    </div>
                                    <div className={'tree-warp'} key={this.state.treeType}>
                                        {createSyncTree({
                                            treeId: treeId,
                                            needSearch: false, //是否需要搜索框
                                            needEdit: true, //不启用编辑
                                            showLine: false, //显示连线
                                            defaultSelectedKeys: ["ROOT"],
                                            onSelectEve: this.onSelectTree.bind(this),//选择
                                            onMouseEnterEve: this.onMouseEnterEve.bind(this), // 鼠标滑过事件
                                            // clickAddIconEve: () => {
                                            //     console.log('dsd')
                                            // }, //新增点击 回调
                                            // clickDelIconEve: this.onDelTreeClick.bind(this), // 删除点击 回调
                                            // clickEditIconEve: this.onEditTreeClick.bind(this), //编辑点击 回调
                                            onSelectedChange: (node) => {
                                                if (!node) {
                                                    this.props.syncTree.openNodeByPk(treeId, this.root.key)
                                                }
                                            },
                                            showModal: false //是否使用弹出式编辑
                                        })}
                                    </div>
                                    <div className={'enablestate'}>
                                        {this.state.treeType === 'adminOrg' ?
                                            <NCCheckbox checked={this.state.enablestate} onChange={
                                                this.onCheckShowDisable.bind(this)
                                            }>{this.state.json['jf6005-000038']}</NCCheckbox> : null}
                                    </div>
                                </div>
                            }
                            // 右卡片区域
                            rightDom={
                                <div className="card-area">
                                    <div className={'card-area-table-box'}>
                                        {
                                            createEditTable(tableId, {
                                                // onRowDoubleClick: this.onRowDoubleClick.bind(this),
                                                showPagination: false, //是否展示分页
                                                height: this.state.tableHeight,
                                                showCheck: true,
                                                selectedChange: this.selectedChange.bind(this),
                                                onRowClick: this.onRowClick.bind(this)
                                            })
                                        }
                                    </div>

                                    <PagePaginationBar
                                        pageInfo={pageInfo}
                                        paginationEve={this.paginationEve.bind(this)}
                                        pageSizeSelect={this.pageSizeSelect.bind(this)}
                                    />
                                </div>
                            }     //右侧区域dom
                            defLeftWid='20%'      // 默认左侧区域宽度，px/百分百
                        />
                    </div>
                </div>

                {/*详情页*/}
                {this.state.gridrelationTable.length > 1 && <DetailPage
                    {...commonProps}
                    tablePost={this.tablePost}
                    gridrelationTable={this.state.gridrelationTable}
                    detailLoading={this.state.detailLoading}
                    setDetailPageStatus={this.setDetailPageStatus.bind(this)}
                    addPost={this.addPost.bind(this)}
                    PostQueryOneAction={this.PostQueryOneAction.bind(this)}
                    postEditAction={this.postEditAction.bind(this)}
                    postCancelAction={this.postCancelAction.bind(this)}
                    isNewAddFlag={this.state.isNewAddFlag}
                    isShowDetail={this.state.isShowDetail}
                    isDetailEdit={this.state.isDetailEdit}
                    templatePageId={this.state.templatePageId}
                    backButtonClick={this.backButtonClick}
                    allpks={this.state.allpks}
                    isUsered={this.state.isUsered}
                />}

            </div>
        )
    }
}

let condition = {
    pagecodeValues: COMMON.pagecodeValues
};
if (window.location.href.match(/(localhost|127\.0\.0\.1):3006/g)) {
    condition.config = COMMON.config;
}
createBillinfoPage(condition, HrPost).then(res => res = null);
export default HrPost
