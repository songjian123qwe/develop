{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"nc-lightapp-front\"","webpack://[name]/./src/uapbd/pmbase/projecttype_base/main/index.js","webpack://[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_react","_ncLightappFront","NCCheckbox","base","NCMessage","urls","loadTreeDataUrl","queryCardUrl","enablestateUrl","addCardUrl","deleteUrl","saveUrl","pageCode","ProjectType","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","config","assign","title","treeId","formId","nodeType","primaryKey","isleaf","id","innercode","pid","refname","refpk","initButtonStatus","changeButtonStatus","onStartProjectType","onStopProjectType","dealTreeData","state","checked","curSelectedNode","Component","data","forEach","e","deleteDataChildrenProp","node","children","length","isLeaf","_this2","requestParam","showOff","ajax","url","success","result","_extends","syncTree","setSyncTreeData","openNodeByPk","button","setButtonVisible","_this3","form","getFormStatus","pk_projectclass","headData","head","rows","values","enablestateValue","enablestate","EmptyAllFormValue","setAllFormValue","setFormItemsDisabled","index","_this4","selectedTreeNode","getSelectNode","content","color","modal","show","beSureBtnClick","toast","cancelBtnClick","setFormItemsValue","selectNode","_this5","setState","setFormStatus","setNodeDisable","_this6","_this7","formData","getAllFormValue","areacode","model","pageid","pk","nonPk","addNodeSuccess","editNodeSuccess","setNodeSelected","_this8","pk_parent","_this9","delNodeSuceess","_this10","_this11","asyncTree","getSelectNodeAsync","refreshTreeNode","_this12","res","val","param","map","field","firstvalue","linkTo","_ref","visible","setDisabled","save","saveAdd","cancel","_this13","_this14","_this15","hideIcon","delIcon","editIcon","addIcon","_this16","_this17","initLeaf","_props","search","DragWidthCom","createSyncTree","createAsyncTree","createForm","createButton","createModal","NCCreateSearch","_react2","default","createElement","Menu","onSelect","onMoreSelect","Item","noFooter","className","defaultChecked","onChange","onCheckBoxChange","onClick","onCheckBoxClick","size","buttonColor","style","height","line-height","width","font-size","font-family","onButtonClick","onSaveProjectType","onSaveAddProjectType","onCancelProjectType","leftDom","needEdit","showLine","needSearch","onSelectEve","onSelectTree","onMouseEnterEve","clickEditIconEve","onEditProjectType","clickAddIconEve","onAddProjectType","clickDelIconEve","onDeleteProjectType","showModal","rightDom","onAfterEvent","onAfterFormEvent","defLeftWid","setFormEnableStateProp","meta","getMeta","toString","slice","formMeta","items","item","attrcode","createPage","initTemplate","pagecode","setMeta","ReactDOM","render","document","querySelector"],"mappings":"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","file":"uapbd/pmbase/projecttype_base/main/index.ffa8208c.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"nc-lightapp-front\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"nc-lightapp-front\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"uapbd/pmbase/projecttype_base/main/index\"] = factory(require(\"nc-lightapp-front\"), require(\"react\"));\n\telse\n\t\troot[\"uapbd/pmbase/projecttype_base/main/index\"] = factory(root[\"nc-lightapp-front\"], root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 181);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import React, { Component } from 'react';\nimport { createPage, base, ajax ,NCCreateSearch,toast} from 'nc-lightapp-front';\nconst {NCCheckbox,NCMessage} = base;\n\n/****************默认参数  开始***********************/\nlet formId = 'head';//卡片组件Id\nlet urls={\n    loadTreeDataUrl:\"/nccloud/uapbd/projecttype/loadtreedata.do\",\n    queryCardUrl:\"/nccloud/uapbd/projecttype/querycard.do\",\n    enablestateUrl:\"/nccloud/uapbd/projecttype/enablestate.do\",\n    addCardUrl:\"/nccloud/uapbd/projecttype/addcard.do\",\n    deleteUrl:'/nccloud/uapbd/projecttype/deltreenode.do',\n    saveUrl:'/nccloud/uapbd/projecttype/savenode.do'\n};\nlet pageCode=\"10140PRJTG\";//默认集团\n/***************默认参数  结束********************/\n\n/**\n * 项目类型\n */\nclass ProjectType extends Component {\n    constructor(props){\n        super(props)\n        this.config =Object.assign({\n            title: '项目类型-集团',\n            treeId:\"projectTypeTree\",\n            formId:\"head\",\n            pageCode:pageCode,\n            nodeType:'GROUP_NODE',\n            primaryKey:'pk_projectclass',//主键\n            urls:urls\n        },props.config);\n\n        //自定义根节点\n        this.root = {\n            \"isleaf\": false,\n            \"key\":\"~\",\n            \"title\":this.config.title,\n            \"id\":\"~\",\n            \"innercode\":\"~\",\n            \"pid\": \"\",\n            \"refname\": this.config.title,\n            \"refpk\": \"~\"\n        };\n\n\n\n        //主动事件，绑定this指针\n        this.initButtonStatus = this.initButtonStatus.bind(this);\n        this.changeButtonStatus = this.changeButtonStatus.bind(this);\n        this.onStartProjectType = this.onStartProjectType.bind(this);\n        this.onStopProjectType = this.onStopProjectType.bind(this);\n        this.dealTreeData = this.dealTreeData.bind(this);\n\n        //显示停用复选框的状态标志\n        this.state = {\n            checked: false,//判断 显示停用按钮是否选中\n            curSelectedNode: null //直接点击树节点操作按钮时 用于记录selectedNode\n        }\n\n    }\n\n    /**\n     * 处理树数据\n     * @param data\n     * @returns {*}\n     */\n    dealTreeData(data){\n        let deleteDataChildrenProp = function(node){\n            if(!node.children || node.children.length == 0) {\n\n                delete node.children;\n            }\n            else{\n                node.isLeaf = false;\n                node.children.forEach( (e) => {\n                    deleteDataChildrenProp(e);\n                } );\n            }\n        };\n        data.forEach( (e) => {\n            deleteDataChildrenProp(e);\n        });\n        return data;\n    }\n\n    /**\n     * react 生命周期函数 组件渲染完后触发事件\n     */\n    componentDidMount(){\n\n        /**************\n         * 构造请求参数\n         * @type {{checked: boolean}}\n         *************/\n        let requestParam = { showOff:this.state.checked };\n\n        /*************\n         * ajax请求 加载树数据\n         *************/\n        ajax({\n\n            url:this.config.urls.loadTreeDataUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n\n                    let data = [Object.assign( {...this.root} , {children : result.data} )];\n                    //同步树  加载全部数据\n                    this.props.syncTree.setSyncTreeData(this.config.treeId , this.dealTreeData(data));\n                    //展开节点  设置默认展开项\n                    this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n                }\n            }\n        });\n        //修改按钮状态\n        this.initButtonStatus();\n\n    }\n\n    /**\n     * 页面初始设置button状态\n     * @param props\n     */\n    initButtonStatus(){\n        //设置保存按钮不显示\n        this.props.button.setButtonVisible('save',false);\n        //设置取消按钮不显示\n        this.props.button.setButtonVisible('cancel',false);\n        //设置保存新增按钮不显示\n        this.props.button.setButtonVisible('saveAdd',false);\n    }\n\n    /**\n     * 点击树节点\n     * @param refpk\n     */\n    onSelectTree(refpk){\n\n        //编辑态  树节点操作无效  应该提供一个接口，编辑态任何操作都不能动\n        let status = this.props.form.getFormStatus(this.config.formId);\n        if(status == 'edit'){\n            return;\n        }\n\n        if(refpk == this.root.refpk){\n            //清空表单\n            this.props.form.EmptyAllFormValue(this.config.formId);\n            return;\n        }\n        /********************************\n         * ajax 请求选择的树节点数据\n         ********************************/\n        ajax({\n            url:this.config.urls.queryCardUrl,\n            data:{pk_projectclass:refpk},\n            success:(result)=>{\n                \n                if(result.success){\n                    //表单数据\n                    let headData = result.data.head.rows[0].values;\n                    if(headData.hasOwnProperty('enablestate')){\n                        let enablestateValue = headData.enablestate.value;\n                        //根据表单项enablestate的值修改开关状态\n                        if(enablestateValue == '2'){\n                            result.data.head.rows[0].values.enablestate.value = true;\n                        }else{\n                            result.data.head.rows[0].values.enablestate.value = false;\n                        }\n                    }\n                    \n                    // if(headData.pk_parent.display == this.root.refpk){\n                    //     result.data.head.rows[0].values.pk_parent.display = '';\n                    //     result.data.head.rows[0].values.pk_parent.value='';\n                    // }\n                    //清空表单\n                    this.props.form.EmptyAllFormValue(this.config.formId);\n                    //设置表单为所选树节点数据\n                    this.props.form.setAllFormValue(result.data);\n                    //设置表单项enablestate可用\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:false});\n\n                }\n            }\n        });\n    }\n\n\n    /**\n     * 表单编辑事件\n     * @param props\n     * @param moduleId\n     * @param key\n     * @param value\n     * @param index\n     */\n    onAfterFormEvent(props, moduleId, key, value, index){\n        switch(key){\n            case \"enablestate\":\n\n                //获得选中节点\n                let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n                if(!selectedTreeNode){\n                    let content = value.value?\"请选中需要启用的树节点\":\"请选中需要停用的树节点\";\n                    NCMessage.create({content: content, color: 'warning'});//默认top\n                    return;\n                }\n                let requestParam = {pk_projectclass:selectedTreeNode.refpk,enablestate:value.value?'2':'1'};\n\n                props.modal.show('modal',{\n                    color:\"warning\",\n                    title:'提示',\n                    content:value.value?\"确认启用该数据？\":\"确认停用该数据？\",\n                    beSureBtnClick:()=>{\n                        ajax({\n                            url:this.config.urls.enablestateUrl,\n                            data:requestParam,\n                            success:(result)=>{\n                                /****\n                                 * 启用停用，只是启用停用 与树节点的显示隐藏没有关系\n                                 * 想根据启用状态显示或隐藏树节点，需要通过更改显示停用check框来实现\n                                 */\n                                // let checked = this.state.checked;\n                                //\n                                // if(value.value){\n                                //     //启用成功，设置表单数据\n                                //     props.form.setAllFormValue(result.data);\n                                // }\n                                // if(!checked){\n                                //     props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                                //     //不显示停用数据时，需要删除该节点\n                                //     props.syncTree.delNodeSuceess(this.config.treeId,selectedTreeNode.refpk);\n                                //     props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});//设置表单项可用\n                                // }\n\n                                toast({content:value.value?\"启用成功\":\"停用成功\",title:\"提示\"});\n\n                            }\n                        });\n                    },\n                    cancelBtnClick:()=>{\n\n                        props.form.setFormItemsValue(this.config.formId,{enablestate:true});\n                        return;\n                    }\n                });\n\n\n                \n                break;\n            default:\n                break;\n        }\n        //some code\n    }\n\n    /**\n     * 新增\n     */\n    onAddProjectType(selectNode){\n        this.setState({curSelectedNode:selectNode});\n        let requestParam = {};//请求参数对象\n        \n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n\n            requestParam['pk_parent'] = selectNode.refpk;\n        }else{\n            //不存在选中节点，设置父节点为根节点refpk\n            requestParam['pk_parent'] = this.root.refpk;\n        }\n\n        ajax({\n            url:this.config.urls.addCardUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    //清空表单数据\n                    this.props.form.EmptyAllFormValue(this.config.formId);\n                    //设置表单为编辑态\n                    this.props.form.setFormStatus(this.config.formId, 'edit');\n                    //设置新增默认值\n                    this.props.form.setAllFormValue(result.data);\n                    //设置表单项不可用\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});\n\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n                }\n            }\n        })\n        this.changeButtonStatus(selectNode,'add');\n\n\n    }\n\n    /**\n     * 编辑\n     */\n    onEditProjectType(selectedTreeNode){\n        this.setState({curSelectedNode:selectedTreeNode});\n        /**************************************************\n         *\n         * 编辑：\n         *      1、构造请求参数\n         *      2、ajax请求，后台查询需要编辑的对象\n         *      3、回调，设置表单数据为编辑的对象\n         *\n         * 编辑状态下：\n         *      只有 保存  取消 按钮 显示\n         *\n         *\n         **************************************************/\n        /****未选中提示***/\n        if (!selectedTreeNode) {\n\n            NCMessage.create({content: '请选中需要编辑的节点', color: 'warning'});//默认top\n            return;\n\n        }\n        /***ajax请求***/\n        ajax({\n            url:this.config.urls.queryCardUrl,\n            data:{pk_projectclass:selectedTreeNode.refpk},\n            success:(result)=>{\n\n                if(result.success){\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n\n                    //设置表单数据\n                    this.props.form.setAllFormValue(result.data);\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});//设置表单项不可用\n                    //设置表单状态为编辑态\n                    this.props.form.setFormStatus(this.config.formId, 'edit');\n\n                }\n            }\n        });\n        this.changeButtonStatus(selectedTreeNode,'edit');\n\n    }\n\n    /**\n     * 保存\n     */\n    onSaveProjectType(){\n\n\n        let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        if(!selectedTreeNode){\n            selectedTreeNode = this.state.curSelectedNode;\n        }\n        // if(!selectedTreeNode){\n        //     alert('请选中节点');\n        //     return;\n        // }\n\n\n        let requestParam= {};\n        /**************************************************\n         *\n         * 保存：\n         *     1、获取表单对象\n         *     2、构造请求参数模型\n         *     3、ajax请求，后台根据表单对象主键执行保存或更新操作\n         *     4、回调，刷新当前树节点的父节点\n         *\n         * 保存状态下：\n         *      恢复到浏览态，根据当前选中的树节点决定按钮的可见性和可操作性\n         *\n         **************************************************/\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n\n\n        /**\n         * 表单校验区域\n         */\n\n\n\n        /****\n         * 构造参数\n         * @type {string}\n         */\n        formData.areacode = this.config.formId;//添加表单的areacode编码\n        formData.rows['status'] = '2';//设置状态\n\n        /***设置请求参数***/\n        requestParam = {\n            model: formData,\n            pageid: this.config.pageCode//pageid : 我们导出的模板的名字  也就是 json数据的最外层的code值\n            //pcode: selectedTreeNode.nodeData.pcode\n        };\n\n        /****判断刷新父节点，还是刷新选中节点****/\n        /************************************\n         * 如果是新增，就刷新当前选中节点\n         * 如果是编辑，就刷新当前节点的父节点\n         *\n         ************************************/\n        var pk = null;\n        if(formData.rows[0].values.hasOwnProperty(this.config.primaryKey)){\n\n            pk = formData.rows[0].values.pk_projectclass.value;//当前表单有pk:update 刷新父节点；没有pk:save 刷新当前节点\n\n        }\n        let nonPk = false;//没有主键  false时就是有主键  即编辑 即刷新父节点\n        if(pk == null || pk ==''){\n            nonPk = true;// true时 就是无主键 即 新增  即刷新当前节点\n        }\n        //ajax请求\n        ajax({\n            url: this.config.urls.saveUrl,\n            data: requestParam,\n            success: (result) => {\n                if(result.success){\n                    //设置表单浏览态\n                    \n                    this.props.form.setFormStatus(this.config.formId, 'browse');\n                    //设置树可用\n                    this.props.syncTree.setNodeDisable(this.config.treeId,false);\n                    if(!result.data[0].children || result.data[0].children.length == 0 ){\n                        delete result.data[0].children;\n                    }\n                    if(nonPk){\n\n                        //新增回调后添加\n                        this.props.syncTree.addNodeSuccess(this.config.treeId,result.data);\n                    }else{\n                        \n                        //修改回调后修改\n                        this.props.syncTree.editNodeSuccess(this.config.treeId,result.data[0]);\n                    }\n                    //展开树节点\n                    this.props.syncTree.openNodeByPk(this.config.treeId, result.data[0].pid);\n\n                    this.props.syncTree.setNodeSelected(this.config.treeId, result.data[0].refpk);\n                    //设置表单项可用\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:false});\n                    //清空自定已选中项\n                    this.setState({curSelectedNode:null});\n                }\n\n            }\n        });\n        this.changeButtonStatus(selectedTreeNode,'save');\n\n    }\n\n    /**\n     * 保存新增\n     */\n    onSaveAddProjectType(){\n        \n        let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        let requestParam= {};\n        /**************************************************\n         *\n         * 保存：\n         *     1、获取表单对象\n         *     2、构造请求参数模型\n         *     3、ajax请求，后台根据表单对象主键执行保存或更新操作\n         *     4、回调，刷新当前树节点的父节点\n         *\n         * 保存状态下：\n         *      恢复到浏览态，根据当前选中的树节点决定按钮的可见性和可操作性\n         *\n         **************************************************/\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n        formData.areacode = this.config.formId;//添加表单的areacode编码\n        formData.rows['status'] = '2';//设置状态\n\n        /***设置请求参数***/\n        requestParam = {\n            model: formData,\n            pageid: '10140EPSG'//pageid : 我们导出的模板的名字  也就是 json数据的最外层的code值\n        };\n\n        /****判断刷新父节点，还是刷新选中节点****/\n        /************************************\n         * 如果是新增，就刷新当前选中节点\n         * 如果是编辑，就刷新当前节点的父节点\n         *\n         ************************************/\n        var pk = null;\n        \n        if(formData.rows[0].values.hasOwnProperty(this.config.primaryKey)){\n\n            pk = formData.rows[0].values[this.config.primaryKey].value;//当前表单有pk:update 刷新父节点；没有pk:save 刷新当前节点\n\n        }\n        let nonPk = false;//没有主键  false时就是有主键  即编辑 即刷新父节点\n        if(pk == null || pk ==''){\n            nonPk = true;// true时 就是无主键 即 新增  即刷新当前节点\n\n        }\n\n        /***ajax请求***/\n        ajax({\n            url: this.config.urls.saveUrl,\n            data: requestParam,\n            success: (result) => {\n                /**********\n                 *\n                 * 这里的代码可以精简，临时先这样，逻辑思路是一样的\n                 *\n                 *\n                 *********/\n                if(result.success){\n                    //设置表单为浏览态\n                    this.props.form.setFormStatus(this.config.formId, 'browse');\n                    if(!result.data[0].children || result.data[0].children.length == 0 ){\n                        delete result.data[0].children;\n                    }\n                    //新增回调后添加\n                    this.props.syncTree.addNodeSuccess(this.config.treeId,result.data);\n                    this.props.syncTree.openNodeByPk(this.config.treeId, result.data[0].pid);\n\n                    //判断 选中节点如果消失，重新设置新增节点的父节点为选中节点，然后重新获取选中节点\n                    if(!selectedTreeNode){\n                        this.props.syncTree.setNodeSelected(this.config.treeId,result.data[0].pid);\n                        selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n                    }\n\n                    //重新设置整棵树不可用\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);\n\n                    //判断是否有选中节点\n                    if (!selectedTreeNode) {\n                        //如果没有默认加载根节点下面\n                        requestParam = {\n                            pk_parent:this.root.refpk\n                        };\n                    } else {\n                        requestParam = {\n                            pk_parent:selectedTreeNode.refpk\n                        };\n                    }\n                    //ajax请求\n                    ajax({\n                        url: this.config.urls.addCardUrl,\n                        data: requestParam,\n                        success: (result) => {\n                            if(result.success){\n                                \n                                //清空表单数据\n                                this.props.form.EmptyAllFormValue(this.config.formId);\n                                //新增成功，设置表单默认值\n                                this.props.form.setAllFormValue(result.data);\n                                //设置表单为编辑态\n                                this.props.form.setFormStatus(this.config.formId, 'edit');\n                            }\n                        }\n\n                    })\n                }\n\n\n            }\n        });\n        this.changeButtonStatus(selectedTreeNode,'saveAdd');\n\n    }\n\n    /**\n     * 删除\n     */\n    onDeleteProjectType(selectedTreeNode){\n\n        let requestParam = {};\n        /*******************************************\n         *\n         * 删除：\n         *      1、根据选中的树节点做出相应的提示\n         *      2、弹出删除确认提示\n         *      3、构造请求参数\n         *      4、ajax请求，后台执行删除\n         *      5、回调，执行前台删除动作\n         *\n         * 删除状态下：\n         *      清空表单对象数据，按钮全成Disabled状态\n         *\n         *******************************************/\n        if (!selectedTreeNode) {\n\n            NCMessage.create({content: '请选中需要删除的节点', color: 'warning'});//默认top\n            return;\n\n        }\n        if(selectedTreeNode.refpk == this.root.refpk){\n            NCMessage.create({content: '根节点不能删除', color: 'warning'});//默认top\n            return;\n\n        }\n        let message = \"确定要删除所选数据吗？\"\n        if(selectedTreeNode.hasOwnProperty('children') && selectedTreeNode.children.length>0){\n            NCMessage.create({content: '该节点包含子节点，不允许删除！', color: 'warning'});//默认top\n            return;\n        }\n        this.props.modal.show('modal', {\n            color:'warning',\n            title: '删除',\n            content: message,\n            beSureBtnClick: () => {\n                \n                requestParam = {\n                    pk_projectclass:selectedTreeNode.refpk\n                }\n                let pid = selectedTreeNode.pid;\n                ajax({\n                    url:this.config.urls.deleteUrl,\n                    data:requestParam,\n                    success:(result)=>{\n                        if(result.success){\n                            \n                            this.props.form.EmptyAllFormValue(this.config.formId);\n                            //调用异步树的接口，删除该树节点\n                            this.props.syncTree.delNodeSuceess(this.config.treeId,selectedTreeNode.refpk);\n                            toast({content:\"删除成功！\",title:\"提示\"});\n                            //删除成功提示\n                            // NCMessage.create({content: '删除成功！', color: 'success'});//默认top\n                        }\n\n                    }\n                })\n            }\n        });\n        this.changeButtonStatus(selectedTreeNode,'del');\n\n    }\n\n    /**\n     * 取消\n     */\n    onCancelProjectType(){\n\n        //同步树 取消的逻辑\n        let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        /**********************************************************\n         *\n         * 取消：\n         *      1、重新根据选中的树节点查询表单对象\n         *      2、回调，设置表单对象\n         *      3、设置按钮状态\n         *\n         **********************************************************/\n        this.props.form.EmptyAllFormValue(this.config.formId);\n        this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});//设置表单项不可用\n        if(selectedTreeNode){\n            //查询节点信息\n            ajax({\n                url:this.config.urls.queryCardUrl,\n                data:{pk_projectclass:selectedTreeNode.refpk},\n                success:(result)=>{\n\n                    if(result.success){\n                        \n                        this.props.form.setAllFormValue(result.data);\n\n\n                    }\n                }\n            });\n        }else{\n            //没有选中项  清空所有数据\n            this.props.form.EmptyAllFormValue(this.config.formId);\n        }\n        this.props.form.setFormStatus(this.config.formId, 'browse');\n        //设置树可用\n        this.props.syncTree.setNodeDisable(this.config.treeId,false);\n        //设置按钮状态\n        this.changeButtonStatus(selectedTreeNode,'cancel');\n    }\n\n    /**\n     * 启用\n     */\n    onStartProjectType(){\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n        let selectedTreeNode = this.props.asyncTree.getSelectNodeAsync(this.config.treeId);//获得选中节点\n        let requestParam = {};\n        /**************************************************\n         *\n         * 启用/停用\n         *      1、判断选中树节点的状态，做出相应的提示\n         *      2、构造请求参数\n         *      3、ajax请求，后台执行更新\n         *\n         * 启用/停用状态下：\n         *      按钮的可见性和可操作性不变\n         *\n         *\n         **************************************************/\n\n        if(!selectedTreeNode){\n\n            NCMessage.create({content: '请选中需要启用的树节点', color: 'warning'});//默认top\n        }else if(formData.rows[0].values.enablestate.value == '2'){\n            NCMessage.create({content: '该数据已启用，无需多次启用', color: 'warning'});//默认top\n            return;\n        }\n        requestParam = {\n            pk_projectclass:formData.rows[0].values[this.config.primaryKey].value,\n            enablestate:'2'\n        }\n        ajax({\n            url:this.config.urls.enablestateUrl,\n            data:requestParam,\n            success:(result)=>{\n                //启用成功，设置表单数据\n                this.props.form.setAllFormValue(result.data);\n                //关闭 展开，可以做一个refreshTreeNode方法\n\n                this.refreshTreeNode(\"epsTree\",selectedTreeNode.pid);\n                // this.props.asyncTree.closeNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n                // this.props.asyncTree.openNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n            }\n        });\n        this.changeButtonStatus('start');\n    }\n\n    /**\n     * 停用\n     */\n    onStopProjectType(){\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n        let selectedTreeNode = this.props.asyncTree.getSelectNodeAsync(this.config.treeId);//获得选中节点\n        let requestParam = {};\n\n        if(!selectedTreeNode){\n\n            NCMessage.create({content: '请选中需要停用的树节点', color: 'warning'});//默认top\n        }else if(formData.rows[0].values.enablestate.value == '1'){\n            NCMessage.create({content: '该数据已停用，无需多次停用', color: 'warning'});//默认top\n            return;\n        }\n        requestParam = {\n            pk_projectclass:formData.rows[0].values[this.config.primaryKey].value,\n            enablestate:'1'\n        }\n        \n        ajax({\n            url:this.config.urls.enablestateUrl,\n            data:requestParam,\n            success:(res)=>{\n                if(res.success){\n\n                    this.props.form.EmptyAllFormValue(this.config.formId);\n\n                    this.refreshTreeNode(\"epsTree\",selectedTreeNode.pid);\n                    // this.props.asyncTree.closeNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n                    // this.props.asyncTree.openNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n                }\n            }\n        });\n        this.changeButtonStatus('stop');\n    }\n\n    /*****button group end*****/\n\n    /**\n     * 查询按钮点击事件\n     * @param props\n     * @param val\n     */\n    onClickSearchBtn(props,val){\n        let url = \"/uapbd/eps/main/list/index.html\";\n        //获得查询区域条件\n        // let data = props.search.getAllSearchData(\"epsQryTemp\");\n        let param = {};\n        if(val!=null){\n            val.map((e)=>{\n                \n                param[e.field] = e.value.firstvalue;\n            });\n        }\n\n\n        props.linkTo(\n            url,param\n        );\n    }\n\n    /**\n     * 更多按钮点击更多选项时触发事件\n     * @param key\n     */\n    onMoreSelect({ key }) {\n        if(key == 'start'){\n            this.onStartProjectType();\n        }else if(key == 'stop'){\n            this.onStopProjectType();\n        }\n\n    }\n\n    /**\n     * 更多选项，切换选项时触发事件\n     * @param visible\n     */\n    onVisibleChange(visible) {\n    }\n\n    /**\n     * 更多按钮占位事件\n     */\n    onMore(){\n    }\n\n    /**\n     * 按钮点击状态切换监听事件\n     * @param id\n     */\n    changeButtonStatus(selectedTreeNode,id){\n        // let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        switch(id){\n            case 'add':\n            case 'saveAdd':\n                //this.props.button.setButtonVisible('add',false);\n                //this.props.button.setButtonVisible('edit',false);\n                //this.props.button.setButtonVisible('del',false);\n                // this.props.button.setButtonVisible('stop',false);\n                this.props.button.setButtonVisible('save',true);\n                this.props.button.setButtonVisible('saveAdd',true);\n                this.props.button.setButtonVisible('cancel',true);\n                this.props.button.setDisabled({\n                    save:false,\n                    saveAdd:false,\n                    cancel:false\n                });\n                //设置树不可用\n                // this.props.syncTree.setNodeDisable(this.config.treeId,true);\n                // this.props.asyncTree.setAsyncNodeDisable(this.config.treeId, true);\n                break;\n            case 'edit':\n                // this.props.button.setButtonVisible('add',false);\n                // this.props.button.setButtonVisible('edit',false);\n                // this.props.button.setButtonVisible('del',false);\n                //this.props.button.setButtonVisible('stop',false);\n                this.props.button.setButtonVisible('save',true);\n                this.props.button.setButtonVisible('saveAdd',false);\n                this.props.button.setButtonVisible('cancel',true);\n                this.props.button.setDisabled({\n                    save:false,\n                    cancel:false\n                });\n                // this.props.syncTree.setNodeDisable(this.config.treeId,true);\n                // this.props.asyncTree.setAsyncNodeDisable(this.config.treeId, true);\n                break;\n            case 'del':\n                // this.props.button.setButtonVisible('add',true);\n                // this.props.button.setButtonVisible('edit',true);\n                // this.props.button.setButtonVisible('del',true);\n                //this.props.button.setButtonVisible('stop',true);\n                this.props.button.setButtonVisible('save',false);\n                this.props.button.setButtonVisible('saveAdd',false);\n                this.props.button.setButtonVisible('cancel',false);\n                // this.props.button.setDisabled({\n                //     add:false,\n                //     edit:false,\n                //     del:false,\n                // });\n                break;\n            case 'save':\n            case 'cancel':\n                // this.props.button.setButtonVisible('add',true);\n                // this.props.button.setButtonVisible('edit',true);\n                // this.props.button.setButtonVisible('del',true);\n                //this.props.button.setButtonVisible('stop',true);\n                this.props.button.setButtonVisible('save',false);\n                this.props.button.setButtonVisible('saveAdd',false);\n                this.props.button.setButtonVisible('cancel',false);\n                if(!selectedTreeNode){\n                    //无选中节点，按钮不可用\n                    // this.props.button.setDisabled({\n                    //     add:true,\n                    //     edit:true,\n                    //     del:true,\n                    // });\n                }else if(selectedTreeNode.refpk ==this.root.refpk){\n                    //选中根节点，只有新增可用\n                    // this.props.button.setDisabled({\n                    //     add:false,\n                    //     edit:true,\n                    //     del:true,\n                    // });\n                }else{\n                    //选中非根节点，显示状态的按钮都可用\n                    // this.props.button.setDisabled({\n                    //     add:false,\n                    //     edit:false,\n                    //     del:false,\n                    // });\n                }\n            // this.props.syncTree.setNodeDisable(this.config.treeId,true);\n            // this.props.asyncTree.setAsyncNodeDisable(this.config.treeId, false);\n            default :\n                break;\n        }\n    }\n\n\n    /**\n     * 同步树：新增回调   【目前废弃】\n     * @param data\n     * @param pk\n     * @param node\n     */\n    onAddNodeCallBack(data,pk,node){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n        let requestParam = {};//请求参数对象\n\n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n\n            requestParam['pid'] = selectNode.refpk;\n        }else{\n            //不存在选中节点，设置父节点为根节点refpk\n            requestParam['pid'] = this.root.refpk;\n        }\n\n        ajax({\n            url:this.config.urls.addCardUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                    this.props.form.setAllFormValue(result.data);//设置新增默认值\n                    this.props.form.setFormStatus(this.config.formId, 'edit');//设置表单为编辑态\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n                }\n            }\n        })\n\n\n\n    }\n\n    /**\n     * 编辑回调   【目前废弃】\n     * @param data\n     * @param pk\n     * @param node\n     */\n    onEditNodeCallBack(data,pk,node){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n        let requestParam = {};//请求参数对象\n\n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n\n            requestParam[this.config.primaryKey] = selectNode.refpk;\n        }else{\n            NCMessage.create({content: '请选中需要编辑的节点', color: 'warning'});//默认top\n            return;\n        }\n        ajax({\n            url:this.config.urls.queryCardUrl,\n            data:requestParam,\n            success:(result)=>{\n                this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                this.props.form.setAllFormValue(result.data);//设置新增默认值\n                this.props.form.setFormStatus(this.config.formId, 'edit');//设置表单为编辑态\n                this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n            }\n        })\n    }\n\n    /**\n     * 删除回调   【目前废弃】\n     * @param data\n     * @param pk\n     * @param node\n     */\n    onDelNodeCallBack(data,pk,node){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n        let requestParam = {};//请求参数对象\n\n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n\n            requestParam[this.config.primaryKey] = selectNode.refpk;\n        }else{\n            NCMessage.create({content: '请选中需要删除的节点', color: 'warning'});//默认top\n            return;\n        }\n        ajax({\n            url:this.config.urls.deleteUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    // this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                    // this.props.form.setAllFormValue(result.data);//设置新增默认值\n                    // this.props.form.setFormStatus(this.config.formId, 'edit');//设置表单为编辑态\n                    // this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n                    //删除成功事件\n                    this.props.syncTree.delNodeSuceess(this.config.treeId,selectNode.refpk);\n                }\n\n            }\n        })\n    }\n\n    /**\n     * 鼠标进入树节点事件\n     * @param key\n     */\n    onMouseEnterEve(key){\n        //设置\n        if(key === this.root.refpk){\n            let obj = {\n                delIcon:false, //false:隐藏； true:显示; 默认都为true显示\n                editIcon:false,\n                addIcon:true\n            };\n            this.props.syncTree.hideIcon(this.config.treeId, key, obj );\n        }else{\n            //非根节点 操作按钮全部隐藏\n            let obj = {\n                delIcon:true, //false:隐藏； true:显示; 默认都为true显示\n                editIcon:true,\n                addIcon:false\n            }\n            this.props.syncTree.hideIcon(this.config.treeId, key, obj );\n        }\n\n    }\n\n    /**\n     * enablestate change 事件\n     * @param checked\n     */\n    onChange(checked){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得树节点选中项\n        let requestParam = {};\n        if(!selectNode ){\n            NCMessage.create({content: '请选中树节点', color: 'warning'});//默认top\n        }\n        requestParam[this.config.primaryKey] = selectNode.refpk;\n        requestParam['enablestate'] = checked?'2':'1';\n        ajax({\n            url:this.config.urls.enablestateUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success) {\n                    if (checked) {\n                        //如果是选中 那就把数据再加载到表单\n                        this.props.form.setAllFormValue(result.data);\n                    } else {\n                        //如果不是选中那就清空表单\n                        this.props.form.EmptyAllFormValue(this.config.formId);\n                        this.props.syncTree.delNodeSuceess(this.config.treeId, selectNode.refpk);\n                    }\n                }\n\n            }\n        });\n    }\n\n    /**\n     * checkbox change 事件\n     */\n    onCheckBoxChange(){\n        let checked = this.state.checked;\n        let requestParam = {\n            showOff:this.state.checked\n        };\n        ajax({\n            url:this.config.urls.loadTreeDataUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    var data = [Object.assign( {...this.root} , {children : result.data} )],\n                        initLeaf = function(node){\n                            if(!node.children || node.children.length == 0) {\n                                \n                                delete node.children;\n                            }\n                            else{\n                                node.isLeaf = false;\n                                node.children.forEach( (e) => {\n                                    initLeaf(e);\n                                } );\n                            }\n                        };\n\n                    data.forEach( (e) => {\n                        initLeaf(e);\n                    });\n\n                    //同步树 加载全部数据\n                    this.props.syncTree.setSyncTreeData(this.config.treeId , data);\n                    //展开节点  设置默认展开项\n                    this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n                }\n\n            }\n        })\n    }\n\n    /**\n     * checkbox 选中事件\n     */\n    onCheckBoxClick(){\n\n        this.setState({checked:!this.state.checked});\n        this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n    }\n\n    /**\n     * 渲染\n     * @returns {*}\n     */\n    render(){\n        \n\n        /**\n         *  经过createPage方法后，初始对象都放到了props中\n         *  例如 asyncTree,syncTree,form,table……\n         *  我们用的话直接从props里取就可以了\n         * */\n        const {asyncTree,syncTree,form,button,modal,search,DragWidthCom} = this.props;\n        //DragWidthCom 平台出的左右布局的组件  专用于树卡和树表\n        const {createAsyncTree} = asyncTree;//创建异步树，需要引入这个\n        const {createSyncTree} = syncTree;//创建同步树 需要引入这个\n        const {createForm} = form;//创建表单，需要引入这个\n\n        const {createButton}=button;\n\n        let { createModal } = modal;  //模态框\n\n        const {NCCreateSearch} = search;\n        const menu1 = (\n            <Menu\n                onSelect={this.onMoreSelect.bind(this)}>\n                <Item key=\"start\">启用</Item>\n                <Item key=\"stop\">停用</Item>\n            </Menu>\n        );\n        return(\n\n            <div>\n                {createModal('modal',{noFooter:false})}\n                {/* 头部 header*/}\n                <div className=\"header\">\n                    {/* 标题 title*/}\n                    <div className=\"title\">{this.config.title}</div>\n                    <span className=\"showOff\">\n                        <NCCheckbox\n\n                            defaultChecked={false}\n                            checked={this.state.checked}\n                            onChange={this.onCheckBoxChange.bind(this)}\n                            onClick={this.onCheckBoxClick.bind(this)}\n                            size=\"lg\"\n                        >\n                            显示停用\n                        </NCCheckbox>\n\t\t\t        </span>\n\n                    {/* 按钮组 btn-group*/}\n                    <div className=\" btn-group\">\n                        { createButton('save', {name: '保存',buttonColor:'main-button',style:{height:'32px','line-height':'33px',width:'68px','font-size':'13px','font-family':'PingFangHk'},onButtonClick: this.onSaveProjectType.bind(this) })}\n                        { createButton('saveAdd', {name: '保存新增',buttonColor:'secondary-button',style:{height:'32px','line-height':'33px',width:'80px','font-size':'13px','font-family':'PingFangHk'}, onButtonClick: this.onSaveAddProjectType.bind(this) })}\n                        { createButton('cancel', {name: '取消',buttonColor:'secondary-button', style:{height:'32px','line-height':'33px',width:'68px','font-size':'13px','font-family':'PingFangHk'},onButtonClick: this.onCancelProjectType.bind(this) })}\n\n                    </div>\n                </div>\n                {/* 树卡区域 */}\n                <div className=\"tree-card\">\n                    <DragWidthCom\n                        // 左树区域\n                        leftDom = {\n                            <div className=\"tree-area\">\n                                {createSyncTree({\n                                    treeId :this.config.treeId,\n                                    needEdit: true, //不启用编辑\n                                    showLine: false, //显示连线\n                                    needSearch: true, //是否需要搜索框\n                                    onSelectEve: this.onSelectTree.bind(this),//选择\n                                    onMouseEnterEve:this.onMouseEnterEve.bind(this),\n                                    clickEditIconEve: this.onEditProjectType.bind(this), //编辑点击 回调\n                                    clickAddIconEve: this.onAddProjectType.bind(this), //新增点击 回调\n                                    clickDelIconEve: this.onDeleteProjectType.bind(this), // 删除点击 回调\n                                    showModal:false\n\n                                })}\n                            </div>}     //左侧区域dom\n                        // 右卡片区域\n                        rightDom = {\n                            <div className=\"card-area\">\n                                {createForm(this.config.formId, {\n                                    onAfterEvent: this.onAfterFormEvent.bind(this)\n\n                                })\n                                }\n                            </div> }     //右侧区域dom\n\n                        defLeftWid = '20%'      // 默认左侧区域宽度，px/百分百\n                    />\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\n/**\n * 单据模板\n * @param props\n */\nconst initTemplate = (props)=>{\n    // pageCode = props.config.pageCode?props.config.pageCode:pageCode;\n    //请求元数据模板\n    ajax({\n        url: \"/nccloud/platform/templet/querypage.do\",\n        data:{pagecode:pageCode},\n        success: function (res) {\n            //设置元数据\n            props.meta.setMeta(res.data);\n\n            //初始页面设置enablestate不可编辑\n            setFormEnableStateProp(props);\n        }\n    });\n\n}\n\n\n\n/**\n * 设置表单启用状态属性可以编辑\n * @param props\n */\nconst setFormEnableStateProp=(props)=>{\n\n    //获得元数据\n    let meta = props.meta.getMeta();\n    // formId = props.config.formId?props.config.formId:formId;\n    //判断元数据中有我的表单元数据\n    if(Object.prototype.toString.call(meta).slice(8, -1) === 'Object' && meta.hasOwnProperty(formId)){\n        //获得表单元数据\n        let formMeta = props.meta.getMeta()[formId];\n        //判断表单元数据有属性\n        if(formMeta.hasOwnProperty(\"items\")){\n            //获得属性\n            let items = formMeta.items;\n            if(Object.prototype.toString.call(items).slice(8, -1) === 'Array'){\n                items.map((item)=>{\n                    //查找enablestate属性\n                    if(item.hasOwnProperty(\"attrcode\") && item.attrcode == 'enablestate'){\n                        //设置enablestate属性不可用\n                        props.form.setFormItemsDisabled(formId,{enablestate:true});\n                    }\n                });\n            }\n        }\n    }\n}\n\n/**\n * 更新元数据 设置参照\n * @param meta\n * @param props\n * @returns {*}\n */\nfunction  modifierMeta(meta,props) {\n    // props.renderItem('form',formId,'parent_id',refer('parent_id'));\n    // props.renderItem('form',formId,'pk_group',refer('pk_group'));\n    return meta;\n\n}\n\n/**\n * 创建页面\n */\nexport default ProjectType = createPage({\n    initTemplate: initTemplate,\n})(ProjectType)\n\nReactDOM.render(<ProjectType {...{config:config}}/>, document.querySelector('#app'));\n\n\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;"],"sourceRoot":""}