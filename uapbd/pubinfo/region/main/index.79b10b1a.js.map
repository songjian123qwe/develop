{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"nc-lightapp-front\"","webpack://[name]/./src/uapbd/public/utils/BDCreateUIDom.js","webpack://[name]/./src/uapbd/pubinfo/region/main/index.js","webpack://[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://[name]/./src/uapbd/refer/pubinfo/CountryExDefaultGridRef/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","props","pageCfg","arguments","length","undefined","langCfg","callback","count","result","hander","templateData","langData","inlt","console","log","newLangCfg","data","success","_ncLightappFront","toast","content","color","MultiInit","getMultiLang","createUIDom","_react","NCMenu","base","NCCheckbox","NCDropdown","NCMessage","NCPopconfirm","Item","NCCol","NCRow","NCButton","NCTooltip","NCMenuGroup","PrintOutput","high","formId","urls","loadTreeDataUrl","queryTemplet","addCardUrl","queryCardUrl","enablestateUrl","deleteUrl","printUrl","checkUrl","saveUrl","listmeta","RegionClass","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","_initialiseProps","config","assign","title","treeId","pageCode","nodeType","isGlbGrp","isleaf","id","innercode","pid","refname","refpk","initButtonStatus","changeButtonStatus","onStartRegion","onStopRegion","dealTreeData","state","disabledSearch","checked","ids","json","disabledShowOff","curCountry","curSelectedNode","initTemplate","getTreeData","Component","forEach","e","iconBox","delIcon","editIcon","addIcon","deleteDataChildrenProp","node","children","isLeaf","formStatus","form","getFormStatus","onbeforeunload","button","setButtonVisible","_this2","EmptyAllFormValue","setFormItemsDisabled","enablestate","ajax","url","pk_region","formulamsg","Array","dealFormulamsg","_defineProperty","headData","head","rows","values","enablestateValue","pk_father","display","setAllFormValue","index","meta","getMeta","items","map","obj","attrcode","queryCondition","pk_country","setMeta","_this3","selectedTreeNode","syncTree","getSelectNode","requestParam","res","promptBox","beSureBtnClick","cancelBtnClick","setFormItemsValue","selectNode","_this4","setState","setFormStatus","setNodeDisable","_this5","_this6","formData","getAllFormValue","areacode","model","pageid","pk","nonPk","validateToSave","tree","addNodeSuccess","editNodeSuccess","openNodeByPk","setNodeSelected","_this7","_this8","message","delNodeSuceess","_this9","_this10","asyncTree","getSelectNodeAsync","refreshTreeNode","_this11","_ref","visible","treeNodeData","getSyncTreeValue","pks","getTreeAllPks","setDisabled","print","output","save","saveAdd","cancel","_this12","_this13","_this14","hideIcon","_this15","_extends","setSyncTreeData","_this16","_this17","initLeaf","_this18","onRefresh","onSaveRegion","onSaveAddRegion","onCancelRegion","funcode","oids","onOutput","_this19","setTimeout","loadRegionTreeData","_this20","loading","_props","modal","DragWidthCom","treeTable","createButtonApp","createTreeTable","createForm","createSyncTree","createModal","createAsyncTree","_react2","default","createElement","onSelect","onMoreSelect","noFooter","className","style","width","_CountryExDefaultGridRef2","onChange","onCountryChange","disabled","defaultChecked","onCheckBoxChange","size","area","buttonLimit","onButtonClick","popContainer","document","querySelector","leftDom","needEdit","showLine","needSearch","onSelectEve","onSelectTree","onMouseEnterEve","clickEditIconEve","onEditRegion","clickAddIconEve","onAddRegion","clickDelIconEve","onDeleteRegion","showModal","rightDom","cancelPSwitch","onBeforeEvent","onBeforerFormEvent","onAfterEvent","onAfterFormEvent","defLeftWid","ref","outputType","_BDCreateUIDom2","pagecode","domainName","_this21","template","modifierMeta","setButtons","allNodeData","pks1","refs","printOutput","open","treeData","loop","push","createPage","billinfo","billtype","headcode","ReactDOM","render","React","Refer","multiLang","currentLocale","refType","refName","placeholder","refCode","queryGridUrl","isMultiSelectedEnabled","columnConfig","code","description","timezonename","formatname","iseucountry"],"mappings":"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","file":"uapbd/pubinfo/region/main/index.79b10b1a.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"nc-lightapp-front\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"nc-lightapp-front\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"uapbd/pubinfo/region/main/index\"] = factory(require(\"nc-lightapp-front\"), require(\"react\"));\n\telse\n\t\troot[\"uapbd/pubinfo/region/main/index\"] = factory(root[\"nc-lightapp-front\"], root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 198);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","//   pagecode:props.config.pageCode?props.config.pageCode:pagecode\r\n//  getMultiLang({moduleId: \"10140ADRB\",domainName: 'uapbd',callback})\r\n\r\n\r\nimport { toast} from 'nc-lightapp-front';\r\nexport default function(props){\r\n     return ( pageCfg = {} , langCfg = {}, callback ) => {\r\n\r\n         var count = 0;\r\n         var result = {};\r\n\r\n         var hander = () => {\r\n             if(count == 2){\r\n                 callback && callback(result.templateData || {} , result.langData || {},result.inlt||{});\r\n             }\r\n         }\r\n         if(langCfg.callback){\r\n             console.log('咱们自己createUIDom会同时获取多语和单据模板,并通过一个回调函数返回, langCfg中的回调函数将被忽略');\r\n         }\r\n\r\n         var newLangCfg = { ...langCfg, callback: (data, success,inlt) => {\r\n                    count = count + 1;\r\n                 if(!success){\r\n                     toast({content:'load muti lang error',color:'warning'});\r\n                 }\r\n                 result.langData = data || {};\r\n                 result.inlt = inlt || {};\r\n                 hander();\r\n         }};\r\n         props.MultiInit.getMultiLang(newLangCfg);\r\n\r\n         props.createUIDom(pageCfg, (data) => {\r\n             count = count + 1;\r\n             result.templateData = data || {};\r\n             hander();\r\n         });\r\n    };\r\n};","import React, { Component } from 'react';\nimport { createPage, base, ajax ,NCCreateSearch,toast,print,cacheTools,high,promptBox,getMultiLang} from 'nc-lightapp-front';\nimport CountryExDefaultGridRef from '../../../refer/pubinfo/CountryExDefaultGridRef'\nimport createUIDom from '../../../public/utils/BDCreateUIDom'\nconst {NCMenu,NCDropdown,NCCheckbox,NCPopconfirm, NCMessage,NCCol,NCRow,NCButton,NCTooltip} = base;\nconst {NCMenuGroup} = NCMenu;\nconst { Item } = NCMenu;\nconst {PrintOutput}=high;\n\n\n\n/****************默认参数  开始***********************/\nlet formId = \"head\";//卡片组件Id\nconst urls={\n    loadTreeDataUrl:\"/nccloud/uapbd/region/loadtreedata.do\",\n    queryTemplet : '/nccloud/platform/templet/querypage.do',\n    addCardUrl:\"/nccloud/uapbd/region/addcard.do\",\n    queryCardUrl:\"/nccloud/uapbd/region/querycard.do\",\n    enablestateUrl:\"/nccloud/uapbd/region/enablestate.do\",\n    deleteUrl:'/nccloud/uapbd/region/deltreenode.do',\n    printUrl: '/nccloud/uapbd/region/print.do',\n    checkUrl: '/nccloud/uapbd/region/regioncheck.do',\n    saveUrl:'/nccloud/uapbd/region/savenode.do'\n};\nlet pageCode=\"10140REG_region\";\nlet listmeta;//单据模板json数据\n/***************默认参数  结束********************/\n\n/**\n * 客户销售分类\n */\nclass RegionClass extends Component {\n    constructor(props){\n        super(props)\n        this.config =Object.assign({\n            title: '10140REG-000000',/* 国际化处理： 行政区划*/\n            treeId:'regionTree',\n            formId:formId,\n            pageCode:'10140REG_region',\n            nodeType:'GROUP_NODE',\n            isGlbGrp:'0',\n            urls:urls\n        },props.config);\n\n        //自定义根节点\n        this.root = {\n            \"isleaf\": false,\n            \"key\":\"~\",\n            \"title\":this.config.title,\n            \"id\":\"~\",\n            \"innercode\":\"~\",\n            \"pid\": \"\",\n            \"refname\": this.config.title,\n            \"refpk\": \"~\"\n        };\n\n\n\n        //主动事件，绑定this指针\n        this.initButtonStatus = this.initButtonStatus.bind(this);\n        this.changeButtonStatus = this.changeButtonStatus.bind(this);\n        this.onStartRegion = this.onStartRegion.bind(this);\n        this.onStopRegion = this.onStopRegion.bind(this);\n        this.dealTreeData = this.dealTreeData.bind(this);\n\n        //显示停用复选框的状态标志\n        this.state = {\n            disabledSearch:false,\n            checked: false,//判断 显示停用按钮是否选中\n            ids:[],\n            json:{},\n            disabledShowOff:false,//禁用复选框\n            curCountry: '' ,//国家地区\n            curSelectedNode: null //直接点击树节点操作按钮时 用于记录selectedNode\n        }\n        this.initTemplate(props,()=>{\n            this.getTreeData()\n        })\n\n    }\n\n\n    /**\n * 单据模板\n * @param props\n */\n    initTemplate = (props,callback)=>{\n        createUIDom(props)(\n            {\n                pagecode : pageCode\n            },\n            {\n                moduleId: \"10140REG\",domainName: 'uapbd'\n            },\n            (data, langData)=>{\n                if(langData){\n                    this.state.json = langData\n                }\n                if(data){\n                    listmeta = data.template;\n                    listmeta = this.modifierMeta(listmeta, props)\n                    props.meta.setMeta(listmeta);\n                    data.button && props.button.setButtons(data.button);\n                    props.button.setDisabled({\n                        print: true,\n                        output: true\n                    });\n                    callback&&callback()\n                }\n            }\n        )\n    }\n\n    /**\n * 更新元数据 设置参照\n * @param meta\n * @param props\n * @returns {*}\n */\n    modifierMeta=(meta,props) =>{\n        // props.renderItem('form',formId,'parent_id',refer('parent_id'));\n        // props.renderItem('form',formId,'pk_group',refer('pk_group'));\n        return meta;\n\n    }\n\n    /**\n     * 处理树数据\n     * @param data\n     * @returns {*}\n     */\n    dealTreeData(data){\n        let deleteDataChildrenProp = function(node){\n            node.iconBox = {\n                delIcon:true,\n                editIcon:true,\n                addIcon:true\n            }\n            if(!node.children || node.children.length == 0) {\n\n                delete node.children;\n            }\n            else{\n                node.isLeaf = false;\n                node.children.forEach( (e) => {\n                    deleteDataChildrenProp(e);\n                } );\n            }\n        };\n        data.forEach( (e) => {\n            e.iconBox = {\n                delIcon:true,\n                editIcon:true,\n                addIcon:true\n            }\n            deleteDataChildrenProp(e);\n        });\n        return data;\n    }\n\n    /**\n     * react 生命周期函数 组件渲染完后触发事件\n     */\n    getTreeData=()=>{\n\n        /**************\n         * 构造请求参数\n         * @type {{checked: boolean}}\n         *************/\n        let requestParam = { \n            checked:this.state.checked,\n            pk_country:this.state.curCountry.refpk\n         };\n\n        /*************\n         * ajax请求 加载树数据\n         *************/\n        ajax({\n\n            url:this.config.urls.loadTreeDataUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    let data = [Object.assign( {...this.root} , {title:this.state.json[this.root.title],refname:this.state.json[this.root.refname]},{children : result.data} )];\n                    //同步树  加载全部数据\n                    this.props.syncTree.setSyncTreeData(this.config.treeId , this.dealTreeData(data));\n                    //展开节点  设置默认展开项\n                    this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n                }\n            }\n        });\n        //修改按钮状态\n        this.initButtonStatus();\n\n    }\n\n    componentWillMount() {\n\t\t// let callback = (json) => {\n\t\t// \tthis.setState({json})\n\t\t// \t}\n\t\t// getMultiLang({moduleId: '10140REG', domainName: 'uapbd',callback})\n    }\n    \n    componentDidUpdate(){\n        let formStatus = this.props.form.getFormStatus(this.config.formId)\n\t\tif(formStatus != 'add' && formStatus != 'edit'){\n\t\t\twindow.onbeforeunload = null;\n\t\t}else{\n\t\t\twindow.onbeforeunload = () => {//编辑态关闭页签或浏览器的提示\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}\n\n    /**\n     * 页面初始设置button状态\n     * @param props\n     */\n    initButtonStatus(){\n        //设置保存按钮不显示\n        this.props.button.setButtonVisible('save',false);\n        this.props.button.setButtonVisible('saveAdd',false);\n        this.props.button.setButtonVisible('cancel',false);\n        this.props.button.setButtonVisible('print',true);\n        this.props.button.setButtonVisible('output',true);\n        this.props.button.setButtonVisible('refresh',true);\n    }\n\n    /**\n     * 点击树节点\n     * @param refpk\n     */\n    onSelectTree(refpk){\n\n        //编辑态  树节点操作无效  应该提供一个接口，编辑态任何操作都不能动\n        let status = this.props.form.getFormStatus(this.config.formId);\n        if(status == 'edit'){\n            return;\n        }\n\n        if(refpk == this.root.refpk){\n            //清空表单\n            this.props.form.EmptyAllFormValue(this.config.formId);\n            this.props.form.setFormItemsDisabled(this.config.formId,{'enablestate':true});\n            return;\n        }\n        /********************************\n         * ajax 请求选择的树节点数据\n         ********************************/\n        ajax({\n            url:this.config.urls.queryCardUrl,\n            data:{pk_region:refpk,isGlbGrp: this.config.isGlbGrp},\n            success:(result)=>{\n\n                if(result.success){\n\n                    //查询时执行显示公式前端适配\n                    if (result.formulamsg && result.formulamsg instanceof Array && result.formulamsg.length > 0) {\n                        props.dealFormulamsg(\n                            result.formulamsg,  //参数一：返回的公式对象\n                            {                //参数二：界面使用的表格类型\n                                [this.config.formId]:\"form\"\n                            }\n                        );\n                    }\n\n                    //表单数据\n                    let headData = result.data.head.rows[0].values;\n                    if(headData.hasOwnProperty('enablestate')){\n                        let enablestateValue = headData.enablestate.value;\n                        //根据表单项enablestate的值修改开关状态\n                        if(enablestateValue == '2'){\n                            result.data.head.rows[0].values.enablestate.value = true;\n                        }else{\n                            result.data.head.rows[0].values.enablestate.value = false;\n                        }\n                    }\n                    \n                    if(headData.pk_father.display == this.root.refpk){\n                        result.data.head.rows[0].values.pk_father.display = '';\n                        result.data.head.rows[0].values.pk_father.value='';\n                    }\n                    //清空表单\n                    this.props.form.EmptyAllFormValue(this.config.formId);\n                    //设置表单为所选树节点数据\n                    this.props.form.setAllFormValue({head:result.data.head});\n                    //设置表单项enablestate可用\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:false});\n\n                }\n            }\n        });\n    }\n\n    onBeforerFormEvent(props, moduleId, key, value, index){\n        switch(key){\n            case \"pk_father\":\n                let meta = props.meta.getMeta()\n                meta[\"head\"].items.map((obj)=>{\n                    if(obj.attrcode == 'pk_father'){\n                        obj.queryCondition = function () {\n                            return {\n                                \"pk_country\": index.pk_country.value\n                            }\n                        }\n                    }\n                 })\n                 props.meta.setMeta(meta)\n                 return true;\n                break;\n            default:\n                return true;\n                break;\n        }\n    }\n\n    /**\n     * 表单编辑事件\n     * @param props\n     * @param moduleId\n     * @param key\n     * @param value\n     * @param index\n     */\n    onAfterFormEvent(props, moduleId, key, value, index){\n        switch(key){\n            case \"enablestate\":\n\n                //获得选中节点\n                let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n                if(!selectedTreeNode){\n                    let content = value.value?this.state.json['10140REG-000001']:this.state.json['10140REG-000002'];/* 国际化处理： 请选中需要启用的树节点,请选中需要停用的树节点*/\n                    NCMessage.create({content: content, color: 'warning'});//默认top\n                    return;\n                }\n                let requestParam = {pk_region:selectedTreeNode.refpk,enablestate:value.value?'2':'1'};\n\n                ajax({\n                    data: requestParam,\n                    url: '/nccloud/uapbd/region/regionenablecheck.do',\n                    success: (res) => {\n                        promptBox({\n                            color:\"warning\",\n                            title:value.value?this.state.json['10140REG-000027']:this.state.json['10140REG-000028'],\n                            content:value.value?this.state.json['10140REG-000004']:this.state.json['10140REG-000005'],/* 国际化处理： 确认启用该数据？,确认停用该数据？*/\n                            beSureBtnClick:()=>{\n                                ajax({\n                                    url:this.config.urls.enablestateUrl,\n                                    data:requestParam,\n                                    success:(result)=>{\n                                        /****\n                                         * 启用停用，只是启用停用 与树节点的显示隐藏没有关系\n                                         * 想根据启用状态显示或隐藏树节点，需要通过更改显示停用check框来实现\n                                         */\n                                        // let checked = this.state.checked;\n                                        //\n                                        // if(value.value){\n                                        //     //启用成功，设置表单数据\n                                        //     props.form.setAllFormValue(result.data);\n                                        // }\n                                        // if(!checked){\n                                        //     props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                                        //     //不显示停用数据时，需要删除该节点\n                                        //     props.syncTree.delNodeSuceess(this.config.treeId,selectedTreeNode.refpk);\n                                        //     props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});//设置表单项可用\n                                        // }\n                                        toast({title:value.value?this.state.json['10140REG-000006']:this.state.json['10140REG-000007'],color:'success'});/* 国际化处理： 启用成功！,停用成功！*/\n        \n                                    }\n                                });\n                            },\n                            cancelBtnClick:()=>{\n        \n                                //props.form.setFormItemsValue(this.config.formId,{enablestate:true});\n                                props.form.setFormItemsValue(this.config.formId,{enablestate:{value:!value.value,display:!value.value}});\n                                return;\n                            }\n                        });\n                    }\n                });    \n                break;\n            default:\n                break;\n        }\n        //some code\n    }\n\n    /**\n     * 新增\n     */\n    onAddRegion(selectNode){\n\n        if(!this.state.curCountry.refpk){\n            toast({content: this.state.json['10140REG-000008'], color: 'warning'});//默认top/* 国际化处理： 请选择国家地区*/\n            return;\n        }\n        this.setState({curSelectedNode:selectNode});\n        let requestParam = {pk_country:this.state.curCountry.refpk,pk_father:selectNode?selectNode.refpk:this.root.refpk};\n        ajax({\n            url:this.config.urls.addCardUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    //清空表单数据\n                    this.props.form.EmptyAllFormValue(this.config.formId);\n\n                    //查询时执行显示公式前端适配\n                    if (result.formulamsg && result.formulamsg instanceof Array && result.formulamsg.length > 0) {\n                        props.dealFormulamsg(\n                            result.formulamsg,  //参数一：返回的公式对象\n                            {                //参数二：界面使用的表格类型\n                                [this.config.formId]:\"form\"\n                            }\n                        );\n                    }\n\n                    //设置表单为编辑态\n                    this.props.form.setFormStatus(this.config.formId, 'edit');\n                    //设置新增默认值\n                    this.props.form.setAllFormValue({head:result.data.head});\n                    //设置表单项不可用\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});\n\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n                    this.setState({\n                        disabledSearch:true,\n                        disabledShowOff:true\n                    });\n                     this.changeButtonStatus(selectNode,'add');\n\n                }\n            }\n        })\n       \n\n    }\n\n    /**\n     * 编辑\n     */\n    onEditRegion(selectedTreeNode){\n        this.setState({curSelectedNode:selectedTreeNode});\n        /**************************************************\n         *\n         * 编辑：\n         *      1、构造请求参数\n         *      2、ajax请求，后台查询需要编辑的对象\n         *      3、回调，设置表单数据为编辑的对象\n         *\n         * 编辑状态下：\n         *      只有 保存  取消 按钮 显示\n         *\n         *\n         **************************************************/\n        /****未选中提示***/\n        if (!selectedTreeNode) {\n\n            NCMessage.create({content: this.state.json['10140REG-000009'], color: 'warning'});//默认top/* 国际化处理： 请选中需要编辑的节点*/\n            return;\n\n        }\n        // if(this.config.nodeType==='ORG_NODE' && selectedTreeNode.nodeData.isGroup){\n        //     NCMessage.create({content: '业务单元不能操作集团级数据', color: 'warning'});//默认top\n        //     return;\n        // }\n        /***ajax请求***/\n        ajax({\n            url:this.config.urls.checkUrl,\n            data:{pk_region:selectedTreeNode.refpk,isGlbGrp: this.config.isGlbGrp},\n            success:(result)=>{\n\n                if(result.success){\n\n                     //查询时执行显示公式前端适配\n                     if (result.formulamsg && result.formulamsg instanceof Array && result.formulamsg.length > 0) {\n                        props.dealFormulamsg(\n                            result.formulamsg,  //参数一：返回的公式对象\n                            {                //参数二：界面使用的表格类型\n                                [this.config.formId]:\"form\"\n                            }\n                        );\n                    }\n\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n\n                    //设置表单数据\n                    this.props.form.setAllFormValue({head:result.data.head});\n                    this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});//设置表单项不可用\n                    //设置表单状态为编辑态\n                    this.props.form.setFormStatus(this.config.formId, 'edit');\n                    this.changeButtonStatus(selectedTreeNode,'edit');\n                    this.setState({\n                        disabledSearch:true,\n                        disabledShowOff:true\n                    });\n\n                }\n            }\n        });\n        \n\n    }\n\n    /**\n     * 保存\n     */\n    onSaveRegion(){\n\n\n        let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        if(!selectedTreeNode){\n            selectedTreeNode = this.state.curSelectedNode;\n        }\n        // if(!selectedTreeNode){\n        //     alert('请选中节点');\n        //     return;\n        // }\n        \n\n        let requestParam= {};\n        /**************************************************\n         *\n         * 保存：\n         *     1、获取表单对象\n         *     2、构造请求参数模型\n         *     3、ajax请求，后台根据表单对象主键执行保存或更新操作\n         *     4、回调，刷新当前树节点的父节点\n         *\n         * 保存状态下：\n         *      恢复到浏览态，根据当前选中的树节点决定按钮的可见性和可操作性\n         *\n         **************************************************/\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n\n\n        /**\n         * 表单校验区域\n         */\n\n\n   \n        /****\n         * 构造参数\n         * @type {string}\n         */\n        formData.areacode = this.config.formId;//添加表单的areacode编码\n        formData.rows['status'] = '2';//设置状态\n\n        // formData.rows[0].values.eps_code.value = selectedTreeNode.nodeData.pcode + formData.rows[\"0\"].values.eps_code.value;\n        /***设置请求参数***/\n        requestParam = {\n            model: formData,\n            pageid: this.config.pageCode//pageid : 我们导出的模板的名字  也就是 json数据的最外层的code值\n            //pcode: selectedTreeNode.nodeData.pcode\n        };\n\n        /****判断刷新父节点，还是刷新选中节点****/\n        /************************************\n         * 如果是新增，就刷新当前选中节点\n         * 如果是编辑，就刷新当前节点的父节点\n         *\n         ************************************/\n        var pk = null;\n        if(formData.rows[0].values.hasOwnProperty('pk_region')){\n\n            pk = formData.rows[0].values.pk_region.value;//当前表单有pk:update 刷新父节点；没有pk:save 刷新当前节点\n\n        }\n        let nonPk = false;//没有主键  false时就是有主键  即编辑 即刷新父节点\n        if(pk == null || pk ==''){\n            nonPk = true;// true时 就是无主键 即 新增  即刷新当前节点\n        }\n\n        //校验公式\n        this.props.validateToSave(requestParam,()=>{\n            //ajax请求\n            ajax({\n                url: this.config.urls.saveUrl,\n                data: requestParam,\n                success: (result) => {\n                    if(result.success){\n                        \n                        //设置表单浏览态  \n                        this.props.form.setFormStatus(this.config.formId, 'browse');\n                        //设置树可用\n                        this.props.syncTree.setNodeDisable(this.config.treeId,false);\n                        if(!result.data.tree[0].children || result.data.tree[0].children.length == 0 ){\n                            delete result.data.tree[0].children;\n                        }\n                        if(nonPk){\n\n                            //新增回调后添加\n                            this.props.syncTree.addNodeSuccess(this.config.treeId,result.data.tree[0]);\n                        }else{\n                            \n                            //修改回调后修改\n                            this.props.syncTree.editNodeSuccess(this.config.treeId,result.data.tree[0]);\n                        }\n                        //展开树节点\n                        this.props.syncTree.openNodeByPk(this.config.treeId, result.data.tree[0].pid);\n\n                        this.props.syncTree.setNodeSelected(this.config.treeId, result.data.tree[0].refpk);\n\n                        /**************************************************************\n                         * 设置表单为浏览态\n                         **************************************************************/\n                        this.props.form.setFormStatus(this.config.formId, 'browse');\n                        /**************************************************************\n                         * 清空表单数据\n                         **************************************************************/\n                        this.props.form.EmptyAllFormValue(this.config.formId);\n                        /**************************************************************\n                         * 重置表单数据为当前选中节点的表单数据\n                         **************************************************************/\n                         this.props.form.setAllFormValue({[this.config.formId]:result.data.form[this.config.formId]});\n\n                        //设置表单项可用\n                        this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:false});\n                        //清空自定已选中项\n                        this.setState({curSelectedNode:null,disabledSearch:false,disabledShowOff:false});\n                        //toast({content:\"保存成功！\",title:\"提示\"});\n                        toast({title:this.state.json['10140REG-000010'],color:'success'});/* 国际化处理： 保存成功！*/\n                        this.changeButtonStatus(selectedTreeNode,'save');\n                    }\n                    \n                }\n            });\n        },{[this.config.formId]:'form'} , 'form' );\n       \n\n    }\n\n    /**\n     * 保存新增\n     */\n    onSaveAddRegion(){\n        \n        let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        let requestParam= {};\n        /**************************************************\n         *\n         * 保存：\n         *     1、获取表单对象\n         *     2、构造请求参数模型\n         *     3、ajax请求，后台根据表单对象主键执行保存或更新操作\n         *     4、回调，刷新当前树节点的父节点\n         *\n         * 保存状态下：\n         *      恢复到浏览态，根据当前选中的树节点决定按钮的可见性和可操作性\n         *\n         **************************************************/\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n        formData.areacode = this.config.formId;//添加表单的areacode编码\n        formData.rows['status'] = '2';//设置状态\n\n        /***设置请求参数***/\n        requestParam = {\n            model: formData,\n            pageid: '10140REG_region'//pageid : 我们导出的模板的名字  也就是 json数据的最外层的code值\n        };\n\n        /****判断刷新父节点，还是刷新选中节点****/\n        /************************************\n         * 如果是新增，就刷新当前选中节点\n         * 如果是编辑，就刷新当前节点的父节点\n         *\n         ************************************/\n        var pk = null;\n        \n        if(formData.rows[0].values.hasOwnProperty('pk_region')){\n\n            pk = formData.rows[0].values.pk_region.value;//当前表单有pk:update 刷新父节点；没有pk:save 刷新当前节点\n\n        }\n        let nonPk = false;//没有主键  false时就是有主键  即编辑 即刷新父节点\n        if(pk == null || pk ==''){\n            nonPk = true;// true时 就是无主键 即 新增  即刷新当前节点\n\n        }\n\n        //校验公式\n        this.props.validateToSave(requestParam,()=>{\n            /***ajax请求***/\n            ajax({\n                url: this.config.urls.saveUrl,\n                data: requestParam,\n                success: (result) => {\n                    /**********\n                     *\n                     * 这里的代码可以精简，临时先这样，逻辑思路是一样的\n                     *\n                     *\n                     *********/\n                    if(result.success){\n                        //设置表单为浏览态\n                        this.props.form.setFormStatus(this.config.formId, 'browse');\n                        if(!result.data.tree[0].children || result.data.tree[0].children.length == 0 ){\n                            delete result.data.tree[0].children;\n                        }\n                        //新增回调后添加\n                        this.props.syncTree.addNodeSuccess(this.config.treeId,result.data.tree[0]);\n                        this.props.syncTree.openNodeByPk(this.config.treeId, result.data.tree[0].pid);\n\n                        //判断 选中节点如果消失，重新设置新增节点的父节点为选中节点，然后重新获取选中节点\n                        if(!selectedTreeNode){\n                            this.props.syncTree.setNodeSelected(this.config.treeId,result.data.tree[0].pid);\n                            selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n                        }\n\n                        //重新设置整棵树不可用\n                        this.props.syncTree.setNodeDisable(this.config.treeId,true);\n\n                        //判断是否有选中节点\n                        if (!selectedTreeNode) {\n                            //如果没有默认加载根节点下面\n                            requestParam = {\n                                pk_father:this.root.refpk\n                            };\n                        } else {\n                            requestParam = {\n                                pk_father:selectedTreeNode.refpk\n                            };\n                        }\n                        //ajax请求\n                        ajax({\n                            url: this.config.urls.addCardUrl,\n                            data: requestParam,\n                            success: (result) => {\n                                if(result.success){\n                                    \n                                    //清空表单数据\n                                    this.props.form.EmptyAllFormValue(this.config.formId);\n                                    //新增成功，设置表单默认值\n                                    this.props.form.setAllFormValue({head:result.data.head});\n                                    //设置表单为编辑态\n                                    this.props.form.setFormStatus(this.config.formId, 'edit');\n                                    //toast({content:\"保存成功！\",title:\"提示\"});\n                                    toast({title:this.state.json['10140REG-000010'],color:'success'});/* 国际化处理： 保存成功！*/\n                                    this.changeButtonStatus(selectedTreeNode,'saveAdd');\n                                }\n                            }\n\n                        })\n                    }\n\n                    //控制树上搜索框不能编辑\n                    this.setState({\n                        disabledSearch:true,\n                        disabledShowOff:true\n                    });\n                }\n            });\n        },{[this.config.formId]:'form'} , 'form' );\n       \n\n    }\n\n    /**\n     * 删除\n     */\n    onDeleteRegion(selectedTreeNode){\n\n        let requestParam = {};\n        /*******************************************\n         *\n         * 删除：\n         *      1、根据选中的树节点做出相应的提示\n         *      2、弹出删除确认提示\n         *      3、构造请求参数\n         *      4、ajax请求，后台执行删除\n         *      5、回调，执行前台删除动作\n         *\n         * 删除状态下：\n         *      清空表单对象数据，按钮全成Disabled状态\n         *\n         *******************************************/\n        if (!selectedTreeNode) {\n\n            NCMessage.create({content: this.state.json['10140REG-000011'], color: 'warning'});//默认top/* 国际化处理： 请选中需要删除的节点*/\n            return;\n\n        }\n        // if(this.config.nodeType==='ORG_NODE' && selectedTreeNode.nodeData.isGroup){\n        //     NCMessage.create({content: '业务单元不能操作集团级数据', color: 'warning'});//默认top\n        //     return;\n        // }\n        if(selectedTreeNode.refpk == this.root.refpk){\n            NCMessage.create({content: this.state.json['10140REG-000012'], color: 'warning'});//默认top/* 国际化处理： 根节点不能删除*/\n            return;\n\n        }\n        let message = this.state.json['10140REG-000013']/* 国际化处理： 确认要删除所选数据吗？*/\n        if(selectedTreeNode.hasOwnProperty('children') && selectedTreeNode.children!=null && selectedTreeNode.children.length>0){\n            NCMessage.create({content: this.state.json['10140REG-000014'], color: 'warning'});//默认top/* 国际化处理： 该节点包含子节点，不允许删除！*/\n            return;\n        }\n        promptBox({\n            color: 'warning', // 提示类别默认\"success\"， \"success\"/\"info\"/\"warning\"/\"danger\",非必输\n            title: this.state.json['10140REG-000015'],/* 国际化处理： 确认删除*/\n            content: message,\n            beSureBtnClick: () => {\n                \n                requestParam = {\n                    pk_region:selectedTreeNode.refpk\n                }\n                let pid = selectedTreeNode.pid;\n                \n                ajax({\n                    url:this.config.urls.deleteUrl,\n                    data:requestParam,\n                    success:(result)=>{\n                        if(result.success){\n                            \n                            this.props.form.EmptyAllFormValue(this.config.formId);\n                            //调用异步树的接口，删除该树节点\n                            this.props.syncTree.delNodeSuceess(this.config.treeId,selectedTreeNode.refpk);\n                            toast({title:this.state.json['10140REG-000016'],color:'success'});/* 国际化处理： 删除成功！*/\n                            //删除成功提示\n                            // Message.create({content: '删除成功！', color: 'success'});//默认top\n                            this.changeButtonStatus(selectedTreeNode,'del');\n                        }\n\n                    }\n                })\n            }\n        });\n        \n\n    }\n\n    /**\n     * 取消\n     */\n    onCancelRegion(){\n\n        //同步树 取消的逻辑\n        let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        /**********************************************************\n         *\n         * 取消：\n         *      1、重新根据选中的树节点查询表单对象\n         *      2、回调，设置表单对象\n         *      3、设置按钮状态\n         *\n         **********************************************************/\n        this.props.form.EmptyAllFormValue(this.config.formId);\n        this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});//设置表单项不可用\n        if(selectedTreeNode && selectedTreeNode.refpk != '~'){\n            //查询节点信息\n            ajax({\n                url:this.config.urls.queryCardUrl,\n                data:{pk_region:selectedTreeNode.refpk,isGlbGrp: this.config.isGlbGrp},\n                success:(result)=>{\n\n                    if(result.success){\n                        \n                        this.props.form.setAllFormValue({head:result.data.head});\n\n\n                    }\n                }\n            });\n        }else{\n            //没有选中项  清空所有数据\n            this.props.form.EmptyAllFormValue(this.config.formId);\n        }\n        this.props.form.setFormStatus(this.config.formId, 'browse');\n        //设置树可用\n        this.props.syncTree.setNodeDisable(this.config.treeId,false);\n        //设置按钮状态\n        this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:false});\n        this.changeButtonStatus(selectedTreeNode,'cancel');\n        //控制树上搜索框不能编辑\n        this.setState({\n            disabledSearch:false,\n            disabledShowOff:false\n        });\n    }\n\n    /**\n     * 启用\n     */\n    onStartRegion(){\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n        let selectedTreeNode = this.props.asyncTree.getSelectNodeAsync(this.config.treeId);//获得选中节点\n        let requestParam = {};\n        /**************************************************\n         *\n         * 启用/停用\n         *      1、判断选中树节点的状态，做出相应的提示\n         *      2、构造请求参数\n         *      3、ajax请求，后台执行更新\n         *\n         * 启用/停用状态下：\n         *      按钮的可见性和可操作性不变\n         *\n         *\n         **************************************************/\n\n        if(!selectedTreeNode){\n\n            NCMessage.create({content: this.state.json['10140REG-000001'], color: 'warning'});//默认top/* 国际化处理： 请选中需要启用的树节点*/\n        }else if(formData.rows[0].values.enablestate.value == '2'){\n            NCMessage.create({content: this.state.json['10140REG-000017'], color: 'warning'});//默认top/* 国际化处理： 该数据已启用，无需多次启用*/\n            return;\n        }\n        requestParam = {\n            pk_region:formData.rows[0].values.pk_region.value,\n            enablestate:'2'\n        }\n        ajax({\n            url:this.config.urls.enablestateUrl,\n            data:requestParam,\n            success:(result)=>{\n                //启用成功，设置表单数据\n                this.props.form.setAllFormValue({head:result.data.head});\n                //关闭 展开，可以做一个refreshTreeNode方法\n                this.refreshTreeNode(this.config.treeId,selectedTreeNode.pid);\n                this.changeButtonStatus('start');\n               // this.refreshTreeNode(\"epsTree\",selectedTreeNode.pid);\n                // this.props.asyncTree.closeNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n                // this.props.asyncTree.openNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n            }\n        });\n       \n    }\n\n    /**\n     * 停用\n     */\n    onStopRegion(){\n        let formData = this.props.form.getAllFormValue(this.config.formId);//获得表单信息\n        let selectedTreeNode = this.props.asyncTree.getSelectNodeAsync(this.config.treeId);//获得选中节点\n        let requestParam = {};\n\n        if(!selectedTreeNode){\n\n            NCMessage.create({content: this.state.json['10140REG-000002'], color: 'warning'});//默认top/* 国际化处理： 请选中需要停用的树节点*/\n        }else if(formData.rows[0].values.enablestate.value == '1'){\n            NCMessage.create({content: this.state.json['10140REG-000018'], color: 'warning'});//默认top/* 国际化处理： 该数据已停用，无需多次停用*/\n            return;\n        }\n        requestParam = {\n            pk_region:formData.rows[0].values.pk_region.value,\n            enablestate:'1'\n        }\n        \n        ajax({\n            url:this.config.urls.enablestateUrl,\n            data:requestParam,\n            success:(res)=>{\n                if(res.success){\n\n                    this.props.form.EmptyAllFormValue(this.config.formId);\n                    this.refreshTreeNode(this.config.treeId,selectedTreeNode.pid);\n                    this.changeButtonStatus('stop');\n                    //this.refreshTreeNode(\"epsTree\",selectedTreeNode.pid);\n                    // this.props.asyncTree.closeNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n                    // this.props.asyncTree.openNodeByPkAsync(this.config.treeId, selectedTreeNode.pid);\n                }\n            }\n        });\n        //this.changeButtonStatus('stop');\n    }\n\n    /*****button group end*****/\n\n    /**\n     * 查询按钮点击事件\n     * @param props\n     * @param val\n     */\n    // onClickSearchBtn(props,val){\n    //     let url = \"/uapbd/eps/main/list/index.html\";\n    //     //获得查询区域条件\n    //     // let data = props.search.getAllSearchData(\"epsQryTemp\");\n    //     let param = {};\n    //     if(val!=null){\n    //         val.map((e)=>{\n    //             \n    //             param[e.field] = e.value.firstvalue;\n    //         });\n    //     }\n\n\n    //     props.linkTo(\n    //         url,param\n    //     );\n    // }\n\n    /**\n     * 更多按钮点击更多选项时触发事件\n     * @param key\n     */\n    onMoreSelect({ key }) {\n        if(key == 'start'){\n            this.onStartRegion();\n        }else if(key == 'stop'){\n            this.onStopRegion();\n        }\n\n    }\n\n    /**\n     * 更多选项，切换选项时触发事件\n     * @param visible\n     */\n    onVisibleChange(visible) {\n    }\n\n    /**\n     * 更多按钮占位事件\n     */\n    onMore(){\n    }\n\n    /**\n     * 按钮点击状态切换监听事件\n     * @param id\n     */\n    changeButtonStatus(selectedTreeNode,id){\n        // let selectedTreeNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得选中节点\n        let treeNodeData = this.props.syncTree.getSyncTreeValue(this.config.treeId);\n        if(treeNodeData){\n            let pks = this.getTreeAllPks(treeNodeData);\n            if(!pks||pks.length === 0){\n                this.props.button.setDisabled({\n                    print:true,\n                    output:true\n                });\n            }else{\n                this.props.button.setDisabled({\n                    print:false,\n                    output:false\n                });\n            }\n        }\n        switch(id){\n            case 'add':\n\t\t\t\t//this.props.form.setFormItemsValue(formId, { 'enablestate': { value: true, display:'已启用'} });\n            case 'saveAdd':\n                //this.props.button.setButtonVisible('add',false);\n                //this.props.button.setButtonVisible('edit',false);\n                //this.props.button.setButtonVisible('del',false);\n                // this.props.button.setButtonVisible('stop',false);\n                //this.props.form.setFormItemsValue(formId, { 'enablestate': { value: true, display:'已启用'} });\n                this.props.button.setButtonVisible('save',true);\n                this.props.button.setButtonVisible('saveAdd',true);\n                this.props.button.setButtonVisible('cancel',true);\n                this.props.button.setButtonVisible('print',false);\n                this.props.button.setButtonVisible('output',false);\n                this.props.button.setButtonVisible('refresh',false);\n                this.props.button.setDisabled({\n                    save:false,\n                    saveAdd:false,\n                    cancel:false\n                });\n                //设置树不可用\n                // this.props.syncTree.setNodeDisable(this.config.treeId,true);\n                // this.props.asyncTree.setAsyncNodeDisable(this.config.treeId, true);\n                break;\n            case 'edit':\n                // this.props.button.setButtonVisible('add',false);\n                // this.props.button.setButtonVisible('edit',false);\n                // this.props.button.setButtonVisible('del',false);\n                //this.props.button.setButtonVisible('stop',false);\n                this.props.button.setButtonVisible('save',true);\n                this.props.button.setButtonVisible('saveAdd',false);\n                this.props.button.setButtonVisible('cancel',true);\n                this.props.button.setButtonVisible('print',false);\n                this.props.button.setButtonVisible('output',false);\n                this.props.button.setButtonVisible('refresh',false);\n                this.props.button.setDisabled({\n                    save:false,\n                    cancel:false\n                });\n                // this.props.syncTree.setNodeDisable(this.config.treeId,true);\n                // this.props.asyncTree.setAsyncNodeDisable(this.config.treeId, true);\n                break;\n            case 'del':\n                // this.props.button.setButtonVisible('add',true);\n                // this.props.button.setButtonVisible('edit',true);\n                // this.props.button.setButtonVisible('del',true);\n                //this.props.button.setButtonVisible('stop',true);\n                this.props.button.setButtonVisible('save',false);\n                this.props.button.setButtonVisible('saveAdd',false);\n                this.props.button.setButtonVisible('cancel',false);\n                // this.props.button.setDisabled({\n                //     add:false,\n                //     edit:false,\n                //     del:false,\n                // });\n                break;\n            case 'save':\n            case 'cancel':\n                // this.props.button.setButtonVisible('add',true);\n                // this.props.button.setButtonVisible('edit',true);\n                // this.props.button.setButtonVisible('del',true);\n                //this.props.button.setButtonVisible('stop',true);\n                this.props.button.setButtonVisible('save',false);\n                this.props.button.setButtonVisible('saveAdd',false);\n                this.props.button.setButtonVisible('print',true);\n                this.props.button.setButtonVisible('output',true);\n                this.props.button.setButtonVisible('refresh',true);\n                this.props.button.setButtonVisible('cancel',false);\n                // if(!selectedTreeNode){\n                //     //无选中节点，按钮不可用\n                //     this.props.button.setDisabled({\n                //         add:true,\n                //         edit:true,\n                //         del:true,\n                //     });\n                // }else if(selectedTreeNode.refpk ==this.root.refpk){\n                //     //选中根节点，只有新增可用\n                //     this.props.button.setDisabled({\n                //         add:false,\n                //         edit:true,\n                //         del:true,\n                //     });\n                // }else{\n                //     //选中非根节点，显示状态的按钮都可用\n                //     this.props.button.setDisabled({\n                //         add:false,\n                //         edit:false,\n                //         del:false,\n                //     });\n                // }\n                // this.props.syncTree.setNodeDisable(this.config.treeId,true);\n                // this.props.asyncTree.setAsyncNodeDisable(this.config.treeId, false);\n            default :\n                break;\n        }\n    }\n\n\n    /**\n     * 同步树：新增回调   【目前废弃】\n     * @param data\n     * @param pk\n     * @param node\n     */\n    onAddNodeCallBack(data,pk,node){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n        let requestParam = {};//请求参数对象\n\n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n\n            requestParam['pid'] = selectNode.refpk;\n        }else{\n            //不存在选中节点，设置父节点为根节点refpk\n            requestParam['pid'] = this.root.refpk;\n        }\n\n        ajax({\n            url:this.config.urls.addCardUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                    this.props.form.setAllFormValue(result.data);//设置新增默认值\n                    this.props.form.setFormStatus(this.config.formId, 'edit');//设置表单为编辑态\n                    this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n                }\n            }\n        })\n\n\n\n    }\n\n    /**\n     * 编辑回调   【目前废弃】\n     * @param data\n     * @param pk\n     * @param node\n     */\n    onEditNodeCallBack(data,pk,node){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n        let requestParam = {};//请求参数对象\n\n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n            requestParam['pk_region'] = selectNode.refpk;\n        }else{\n            NCMessage.create({content: this.state.json['10140REG-000009'], color: 'warning'});//默认top/* 国际化处理： 请选中需要编辑的节点*/\n            return;\n        }\n        ajax({\n            url:this.config.urls.queryCardUrl,\n            data:requestParam,\n            success:(result)=>{\n                this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                this.props.form.setAllFormValue(result.data);//设置新增默认值\n                this.props.form.setFormStatus(this.config.formId, 'edit');//设置表单为编辑态\n                this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n            }\n        })\n    }\n\n    /**\n     * 删除回调   【目前废弃】\n     * @param data\n     * @param pk\n     * @param node\n     */\n    onDelNodeCallBack(data,pk,node){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);\n\n        let requestParam = {};//请求参数对象\n\n        if(selectNode){\n            //存在选中节点，设置父节点pk为选中节点refpk\n\n            requestParam['pk_region'] = selectNode.refpk;\n        }else{\n            NCMessage.create({content: this.state.json['10140REG-000011'], color: 'warning'});//默认top/* 国际化处理： 请选中需要删除的节点*/\n            return;\n        }\n        \n        ajax({\n            url:this.config.urls.deleteUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    // this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n                    // this.props.form.setAllFormValue(result.data);//设置新增默认值\n                    // this.props.form.setFormStatus(this.config.formId, 'edit');//设置表单为编辑态\n                    // this.props.syncTree.setNodeDisable(this.config.treeId,true);//编辑时设置整棵树不可用\n                    //删除成功事件\n                    this.props.syncTree.delNodeSuceess(this.config.treeId,selectNode.refpk);\n                }\n\n            }\n        })\n    }\n\n    /**\n     * 鼠标进入树节点事件\n     * @param key\n     */\n    onMouseEnterEve(key){\n        //设置\n        if(key === this.root.refpk){\n            let obj = {\n                delIcon:false, //false:隐藏； true:显示; 默认都为true显示\n                editIcon:false,\n                addIcon:true\n            };\n            this.props.syncTree.hideIcon(this.config.treeId, key, obj );\n        }else{\n            let obj = {\n                delIcon:true, //false:隐藏； true:显示; 默认都为true显示\n                editIcon:true,\n                addIcon:true\n            };\n            this.props.syncTree.hideIcon(this.config.treeId, key, obj );\n        }\n\n    }\n\n    onRefresh(){\n        /**************\n         * 构造请求参数\n         * @type {{checked: boolean}}\n         *************/\n        let requestParam = { \n            checked:this.state.checked,\n            pk_country:this.state.curCountry.refpk\n         };\n\n        /*************\n         * ajax请求 加载树数据\n         *************/\n        ajax({\n\n            url:this.config.urls.loadTreeDataUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n\n                    let data = [Object.assign( {...this.root} , {title:this.state.json[this.root.title],refname:this.state.json[this.root.refname]}, {children : result.data} )];\n                    //同步树  加载全部数据\n                    this.props.syncTree.setSyncTreeData(this.config.treeId , this.dealTreeData(data));\n                    //展开节点  设置默认展开项\n                    this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n                    toast({title:this.state.json['10140REG-000019'],color:'success'});/* 国际化处理： 刷新成功！*/\n                }\n            }\n        });\n    }\n\n    /**\n     * enablestate change 事件\n     * @param checked\n     */\n    onChange(checked){\n        let selectNode = this.props.syncTree.getSelectNode(this.config.treeId);//获得树节点选中项\n        let requestParam = {};\n        if(!selectNode ){\n            NCMessage.create({content: this.state.json['10140REG-000020'], color: 'warning'});//默认top/* 国际化处理： 请选中树节点*/\n        }\n        requestParam['pk_region'] = selectNode.refpk;\n        requestParam['enablestate'] = checked?'2':'1';\n        ajax({\n            url:this.config.urls.enablestateUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success) {\n                    if (checked) {\n                        //如果是选中 那就把数据再加载到表单\n                        this.props.form.setAllFormValue({head:result.data.head});\n                    } else {\n                        //如果不是选中那就清空表单\n                        this.props.form.EmptyAllFormValue(this.config.formId);\n                        this.props.syncTree.delNodeSuceess(this.config.treeId, selectNode.refpk);\n                    }\n                }\n                this.refreshTreeNode(this.config.treeId,selectNode.pid);\n\n            }\n        });\n    }\n\n    /**\n     * checkbox change 事件\n     */\n    // onCheckBoxChange(){\n    //     let checked = !this.state.checked;\n    //     let requestParam = {\n    //       checked:this.state.checked,\n    //       pk_country:this.state.curCountry.refpk\n    //     };\n    //     ajax({\n    //         url:this.config.urls.loadTreeDataUrl,\n    //         data:requestParam,\n    //         success:(result)=>{\n    //             if(result.success){\n    //                 var data = [Object.assign( {...this.root} , {children : result.data} )],\n    //                     initLeaf = function(node){\n    //                         if(!node.children || node.children.length == 0) {\n                                \n    //                             delete node.children;\n    //                         }\n    //                         else{\n    //                             node.isLeaf = false;\n    //                             node.children.forEach( (e) => {\n    //                                 initLeaf(e);\n    //                             } );\n    //                         }\n    //                     };\n\n    //                 data.forEach( (e) => {\n    //                     initLeaf(e);\n    //                 });\n\n    //                 //同步树 加载全部数据\n    //                 this.props.syncTree.setSyncTreeData(this.config.treeId , data);\n    //                 //展开节点  设置默认展开项\n    //                 this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n    //             }\n\n    //         }\n    //     })\n    // }\n\n    onCheckBoxChange(){\n        if(this.state.disabledShowOff){\n            return;\n        }\n        this.state.checked = !this.state.checked;\n        let requestParam = {\n            checked:this.state.checked,\n            pk_country:this.state.curCountry.refpk,\n        };\n        ajax({\n            url:this.config.urls.loadTreeDataUrl,\n            data:requestParam,\n            success:(result)=>{\n                if(result.success){\n                    var data = [Object.assign( {...this.root} , {title:this.state.json[this.root.title],refname:this.state.json[this.root.refname]}, {children : result.data} )],\n                        initLeaf = function(node){\n                            if(!node.children || node.children.length == 0) {\n                                ;\n                                delete node.children;\n                            }\n                            else{\n                                node.isLeaf = false;\n                                node.children.forEach( (e) => {\n                                    initLeaf(e);\n                                } );\n                            }\n                        };\n\n                    data.forEach( (e) => {\n                        initLeaf(e);\n                    });\n\n                    //同步树 加载全部数据\n                    this.props.syncTree.setSyncTreeData(this.config.treeId , data);\n                    //展开节点  设置默认展开项\n                    this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n                }\n\n            }\n        })\n    }\n\n    /**\n     * checkbox 选中事件\n     */\n    onCheckBoxClick(){\n\n        this.setState({checked:!this.state.checked});\n        this.props.form.EmptyAllFormValue(this.config.formId);//清空表单数据\n    }\n\n    onButtonClick(props,id){\n        \n        switch(id){\n            case 'refresh':\n                this.onRefresh.call(this);\n                 break;\n            case 'save':\n                this.onSaveRegion.call(this);\n                break;\n            case 'saveAdd':\n                this.onSaveAddRegion.call(this);\n                break;\n            case 'cancel':\n                promptBox({\n                    color: 'warning', // 提示类别默认\"success\"， \"success\"/\"info\"/\"warning\"/\"danger\",非必输\n                    title:this.state.json['10140REG-000021'],/* 国际化处理： 确认取消*/\n                    content:this.state.json['10140REG-000022'],/* 国际化处理： 是否确认要取消？*/\n                    beSureBtnClick:()=>{this.onCancelRegion()}\n                })\n                //this.onCancelRegion.call(this);\n                break;\n            case 'print':\n                let treeNodeData = this.props.syncTree.getSyncTreeValue(this.config.treeId);\n                if(treeNodeData){\n                    let pks = this.getTreeAllPks(treeNodeData);\n                    print(\n                        'pdf',  //支持两类: 'html'为模板打印, 'pdf'为pdf打印\n                        urls.printUrl, \n                        {\n                            //billtype:'',  //单据类型\n                            funcode: '10140REG',      //功能节点编码，即模板编码\n                            // nodekey:'assprinttem',     //模板节点标识\n                            oids: pks    //或['1001A41000000000A9LR','1001A410000000009JDD']  单据pk  oids含有多个元素时为批量打印,\n                        }\n                    )\n                 };\n                break;\n            case 'output':\n                this.onOutput();\n                break;\n            default:\n                break;\n        }\n    }\n    \n    //输出\n    onOutput=()=>{\n\n        let allNodeData = this.props.syncTree.getSyncTreeValue(this.config.treeId);\n        if(allNodeData.length === 0){\n            toast({content:this.state.json['10140REG-000023'],color:'warning'});/* 国际化处理： 无可输出的数据*/\n            return;\n        }\n        let pks1 = this.getTreeAllPks(allNodeData);\n        this.setState({\n            ids : pks1\n        },this.refs.printOutput.open());\n    }\n\n    getTreeAllPks = (treeData)=>{\n        let result = new Array();\n        const loop = (treeData)=>{\n            treeData.forEach(data=>{\n                if(data.refpk!='~'){\n                    result.push(data.refpk);\n                }\n                if(data.hasOwnProperty('children') && data.children && data.children.length>0){\n                    loop(data.children);\n                }\n            })\n        }\n        loop(treeData);\n        return result;\n    }\n\n    onCountryChange(value){\n        this.setState({\n            curCountry: value\n        });\n        setTimeout(() =>{\n            this.loadRegionTreeData(),\n            this.props.form.EmptyAllFormValue(this.config.formId);\n            this.props.form.setFormItemsDisabled(this.config.formId,{enablestate:true});\n        },10); //选中后开始加载部门数据\n    }\n\n    loadRegionTreeData(){\n        \n        ajax({\n            loading: true,\n            url: this.config.urls.loadTreeDataUrl,\n            data: {\n                checked:this.state.checked,\n                pk_country:this.state.curCountry.refpk\n            }, //参数带上选中的行政组织\n            success:(result)=>{\n                if(result.success){\n                    if(result.data){\n                        this.props.button.setDisabled({\n                            print:false,\n                            output:false\n                        });\n                    }else{\n                        this.props.button.setDisabled({\n                            print:true,\n                            output:true\n                        });\n                    }\n                    let data = [Object.assign( {...this.root} , {title:this.state.json[this.root.title],refname:this.state.json[this.root.refname]}, {children : result.data} )];\n                    //同步树  加载全部数据\n                    this.props.syncTree.setSyncTreeData(this.config.treeId , this.dealTreeData(data));\n                    //展开节点  设置默认展开项\n                    this.props.syncTree.openNodeByPk(this.config.treeId, this.root.refpk);\n                }\n            }\n        });\n    }\n\n    /**\n     * 渲染\n     * @returns {*}\n     */\n    render(){\n        /**\n         *  经过createPage方法后，初始对象都放到了props中\n         *  例如 asyncTree,syncTree,form,table……\n         *  我们用的话直接从props里取就可以了\n         * */\n        //DragWidthCom 平台出的左右布局的组件  专用于树卡和树表\n        const {asyncTree,button, syncTree, modal,DragWidthCom,treeTable,form } = this.props;\n        const { createTreeTable } = treeTable;\n        let { createButtonApp } = button;\n        let { createForm } = form;\n        let {createSyncTree} = syncTree;\n        let { createModal } = modal;\n        let {createAsyncTree} = asyncTree;//创建异步树，需要引入这个\n        \n        const menu1 = (\n            <NCMenu\n                onSelect={this.onMoreSelect.bind(this)}>\n                <Item key=\"start\">{this.state.json['10140REG-000027']/* 国际化处理： 启用*/}</Item>\n                <Item key=\"stop\">{this.state.json['10140REG-000028']/* 国际化处理： 停用*/}</Item>\n            </NCMenu>\n        );\n        return(\n\n            <div>\n                {createModal('modal',{noFooter:false})}\n                {/* 头部 header*/}\n                <div className=\"header\">\n                    {/* 标题 title*/}\n                    <div className=\"title\">{this.state.json['10140REG-000000']/* 国际化处理： 行政区划*/}</div>\n                     \n                        <div className=\"search-box\" style={{width:200}}>\n                            {CountryExDefaultGridRef({\n                                onChange:this.onCountryChange.bind(this),\n                                value:this.state.curCountry,\n                                //disabled: status && status == 'edit'\n                                disabled: this.state.disabledSearch\n                            })}\n                        </div>\n                        <span className=\"showOff\">\n                        <NCCheckbox\n\n                            defaultChecked={false}\n                            checked={this.state.checked}\n                            //disabled = {this.state.showoffDisable}\n                            onChange={this.onCheckBoxChange.bind(this)}\n                            disabled = {this.state.disabledShowOff}\n                            //onClick={this.onCheckBoxClick.bind(this)}\n                            size=\"lg\"\n                        >\n                            {this.state.json['10140REG-000029']/* 国际化处理： 显示停用*/}\n                        </NCCheckbox>\n                    </span>\n                    {/* 按钮组 btn-group*/}\n                    <div className=\"btn-group\">\n                        {createButtonApp({\n                            area:'head',\n                            buttonLimit: 3,\n                            onButtonClick: this.onButtonClick.bind(this),\n                            popContainer: document.querySelector('.btn-group')\n\n                        })}\n                        {/* { createButton('save', {name: '保存',buttonColor:'main-button',style:{height:'32px','line-height':'33px',width:'68px','font-size':'13px','font-family':'PingFangHk'},onButtonClick: this.onSaveRegion.bind(this) })}\n                        { createButton('saveAdd', {name: '保存新增',buttonColor:'secondary-button',style:{height:'32px','line-height':'33px',width:'80px','font-size':'13px','font-family':'PingFangHk'}, onButtonClick: this.onSaveAddRegion.bind(this) })}\n                        { createButton('cancel', {name: this.state.json['10140REG-000026'],buttonColor:'secondary-button', style:{height:'32px','line-height':'33px',width:'68px','font-size':'13px','font-family':'PingFangHk'},onButtonClick: this.onCancelRegion.bind(this) })} */}\n\n                    </div>\n                </div>\n                {/* 树卡区域 */}\n                <div className=\"tree-card\">\n                    <DragWidthCom\n                         // 左树区域\n                        leftDom = {\n                            <div className=\"tree-area\">\n                                {createSyncTree({\n                                    treeId :this.config.treeId,\n                                    disabledSearch: this.state.disabledSearch,\n                                    needEdit: true, //不启用编辑\n                                    showLine: false, //显示连线\n                                    needSearch: true, //是否需要搜索框\n                                    onSelectEve: this.onSelectTree.bind(this),//选择\n                                    onMouseEnterEve:this.onMouseEnterEve.bind(this),\n                                    clickEditIconEve: this.onEditRegion.bind(this), //编辑点击 回调\n                                    clickAddIconEve: this.onAddRegion.bind(this), //新增点击 回调\n                                    clickDelIconEve: this.onDeleteRegion.bind(this), // 删除点击 回调\n                                    showModal:false\n\n                                })}\n                            </div>}     //左侧区域dom\n                         // 右卡片区域\n                        rightDom = {\n                            <div className=\"card-area\">\n                                {createForm(this.config.formId, {\n                                    cancelPSwitch: true,\n                                    onBeforeEvent: this.onBeforerFormEvent.bind(this),\n                                    onAfterEvent: this.onAfterFormEvent.bind(this)\n\n                                })\n                                }\n                            </div> }     //右侧区域dom\n\n                        defLeftWid = '20%'      // 默认左侧区域宽度，px/百分百\n                    />\n                     <PrintOutput\n                        ref='printOutput'\n                        url={urls.printUrl}\n                        data={{\n                            funcode:'10140REG',      //功能节点编码，即模板编码\n                            // nodekey:'',     //模板节点标识\n                            oids: this.state.ids,    //或['1001A41000000000A9LR','1001A410000000009JDD']  单据pk  oids含有多个元素时为批量打印,\n                            outputType: \"output\"\n                        }}\n                        //callback={this.onSubmit}\n                    >\n                    </PrintOutput>\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\n\n/**\n * 设置表单启用状态属性可以编辑\n * @param props\n */\nconst setFormEnableStateProp=(props)=>{\n    //获得元数据\n    let meta = props.meta.getMeta();\n    formId = props.config.formId?props.config.formId:formId;\n    //判断元数据中有我的表单元数据\n    if(Object.prototype.toString.call(meta).slice(8, -1) === 'Object' && meta.hasOwnProperty(formId)){\n        //获得表单元数据\n        let formMeta = props.meta.getMeta()[formId];\n        //判断表单元数据有属性\n        if(formMeta.hasOwnProperty(\"items\")){\n            //获得属性\n            let items = formMeta.items;\n            if(Object.prototype.toString.call(items).slice(8, -1) === 'Array'){\n                items.map((item)=>{\n                    //查找enablestate属性\n                    if(item.hasOwnProperty(\"attrcode\") && item.attrcode == 'enablestate'){\n                        //设置enablestate属性不可用\n                        props.form.setFormItemsDisabled(formId,{enablestate:true});\n                    }\n                });\n            }\n        }\n    }\n}\n\n\n\n/**\n * 创建页面\n */\nRegionClass = createPage({\n    billinfo:{\n        billtype: 'form',\n        pagecode: pageCode,\n        headcode: formId\n    },\n    //initTemplate: initTemplate,\n    //mutiLangCode: '10140REG'\n})(RegionClass)\n\nReactDOM.render(<RegionClass/>, document.querySelector('#app'));\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","import { high } from 'nc-lightapp-front';\n\nconst { Refer } = high;\n\nexport default function (props = {}) {\n\tvar conf = {\n\t\t\t\tmultiLang: {\n\t\t\tdomainName: 'uapbd',\n\t\t\tcurrentLocale: 'zh-CN',\n\t\t\tmoduleId: 'refer_uapbd',\n\t\t},\n\n\t\trefType: 'grid',\n\t\trefName: 'refer-000444',/* 国际化处理： 国家地区EX*/\n\t\tplaceholder: 'refer-000444',/* 国际化处理： 国家地区EX*/\n\t\trefCode: 'uapbd.refer.pubinfo.CountryExDefaultGridRef',\n\t\tqueryGridUrl: '/nccloud/uapbd/pub/CountryExDefaultGridRef.do',\n\t\tisMultiSelectedEnabled: false,\n\t\tcolumnConfig: [{\n\t\t\tname: ['refer-000002', 'refer-000441', 'refer-000003', 'refer-000422', 'refer-000442', 'refer-000443', 'refer-000445'],/* 国际化处理： 编码,三位代码,名称,描述,时区,格式,欧盟国家*/\n\t\t\tcode: ['refcode', 'codeth', 'refname', 'description', 'timezonename', 'formatname', 'iseucountry'],\n\t\t\tchecked: {\n\t\t\t\tdescription: false,\n\t\t\t\ttimezonename: false,\n\t\t\t\tformatname: false,\n\t\t\t\tiseucountry: false,\n\t\t\t}\n\t\t}]\n\t};\n\n\treturn <Refer {...conf} {...props} />\n}\n"],"sourceRoot":""}