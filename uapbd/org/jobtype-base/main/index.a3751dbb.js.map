{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/external \"nc-lightapp-front\"","webpack://[name]/external {\"root\":\"React\",\"var\":\"React\",\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\"}","webpack://[name]/./src/uapbd/org/jobtype-base/main/index.js","webpack://[name]/external {\"root\":\"ReactDOM\",\"var\":\"ReactDOM\",\"commonjs\":\"react-dom\",\"commonjs2\":\"react-dom\",\"amd\":\"react-dom\"}"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__5__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_react","_ncLightappFront","Menu","base","NCMenu","Checkbox","NCDropdown","NCCheckbox","Item","NCPopconfirm","NCMenuGroup","PrintOutput","high","treeId","formId","urlArray","JobType","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","_initialiseProps","initButtonStatus","changeButtonStatus","dealTreeData","state","checked","disabledSearch","isDisabled","count","json","isleaf","title","id","innercode","pid","refname","refpk","Component","data","_this2","noEditDelData","forEach","e","deleteDataChildrenProp","node","nodeData","pk_org","nodeType","push","editIcon","delIcon","children","length","isLeaf","meta","relFunCode","items","find","item","attrcode","queryCondition","_this3","MultiInit","getMultiLang","domainName","callback","status","inlt","setState","initTemplate","requestParam","ajax","url","success","result","assign","_extends","syncTree","setSyncTreeData","openNodeByPk","setIconVisible","form","setFormStatus","button","setButtonVisible","setButtonDisabled","Print","Output","_this4","refPk","getFormStatus","EmptyAllFormValue","headData","rows","values","enablestateValue","enablestate","formData","setAllFormValue","enableEditable","setFormItemsDisabled","formulamsg","Array","dealFormulamsg","_defineProperty","index","_this5","selectedTreeNode","getSelectNode","content","toast","color","promptBox","noFooter","noCancelBtn","beSureBtnName","cancelBtnName","beSureBtnClick","judgeOperateWithToast","error","res","setFormItemsValue","message","cancelBtnClick","closeBtnClick","formStatus","onbeforeunload","pk_jobtype","selectNode","_this6","setNodeDisable","pk_group","returnResult","canOperate","toastInfo","_this7","NCMessage","checkPermission","JSON","parse","userjson","hasPerm","Message","_this8","getAllFormValue","areacode","model","pageid","pk","nonPk","validateToSave","iconBox","addIcon","addNodeSuccess","editNodeSuccess","setNodeSelected","display","_this9","pk_eps","async","pk_parent","_this10","asyncTree","delTreeData","_this11","_ref","onStartEps","onStopEps","hideIcon","_this12","delNodeSuceess","_this13","console","log","initLeaf","_this14","onSaveJobType","onSaveAddJobType","onCancelButtonClick","onRefreshButtonClick","output","pks","refs","printOutput","open","type","arguments","undefined","print","funcode","nodekey","oids","outputType","onCancelJobType","refreshTree","_this15","_props","modal","search","DragWidthCom","createSyncTree","createAsyncTree","createForm","createButtonApp","createModal","NCCreateSearch","_react2","default","createElement","onSelect","onMoreSelect","className","defaultChecked","onChange","onCheckBoxChange","disabled","size","area","buttonLimit","onButtonClick","buttonClick","leftDom","needEdit","showLine","needSearch","onSelectEve","onSelectTree","onMouseEnterEve","clickEditIconEve","onEditJobType","clickAddIconEve","onAddJobType","clickDelIconEve","onDeleteJobType","showModal","rightDom","cancelPSwitch","onAfterEvent","onAfterFormEvent","onBeforeEvent","onBeforeFormEvent","defLeftWid","ref","createUIDom","pagecode","_this16","pageCode","template","modifierMeta","setMeta","setButtons"],"mappings":"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","file":"uapbd/org/jobtype-base/main/index.a3751dbb.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"nc-lightapp-front\"), require(\"react\"), require(\"react-dom\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"nc-lightapp-front\", \"react\", \"react-dom\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"uapbd/org/jobtype-base/main/index\"] = factory(require(\"nc-lightapp-front\"), require(\"react\"), require(\"react-dom\"));\n\telse\n\t\troot[\"uapbd/org/jobtype-base/main/index\"] = factory(root[\"nc-lightapp-front\"], root[\"React\"], root[\"ReactDOM\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__5__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"../../../../\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 352);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { print } from 'nc-lightapp-front';\r\nimport { createPage, base, ajax, NCCreateSearch, toast, high, promptBox } from 'nc-lightapp-front';\r\nconst { NCMenu: Menu, NCDropdown: Dropdown, NCCheckbox: Checkbox, NCPopconfirm: Popconfirm } = base;\r\nconst { NCMenuGroup } = Menu;\r\nconst { Item } = Menu;\r\nconst { PrintOutput } = high\r\n\r\nlet treeId = 'jobtypeTree';//树组件Id\r\nlet formId = 'jobtype';//卡片组件Id\r\nlet searchAreaId = 'epsQryTemp';//查询区组件Id\r\n//let nodeTitle = '职务类别-全局';//节点标题\r\nlet urlArray = {\r\n    loadTreeDataUrl: \"/nccloud/uapbd/jobtype/queryJobtypeTree.do\",\r\n    queryTempletUrl: \"/nccloud/platform/templet/querypage.do\",\r\n    queryCardUrl: \"/nccloud/uapbd/jobtype/queryJobtypeCard.do\",\r\n    saveCardUrl: '/nccloud/uapbd/jobtype/saveJobtype.do',\r\n    enablestateUrl: \"/nccloud/uapbd/jobtype/enableJobtype.do\",\r\n    addCardUrl: \"/nccloud/uapbd/jobtype/addJobtype.do\",\r\n    delTreeNodeUrl: '/nccloud/uapbd/jobtype/deleteJobtype.do',\r\n    printUrl: '/nccloud/uapbd/jobtype/printJobtype.do',\r\n    delCheckUrl: '/nccloud/uapbd/jobtype/checkJobtypeDel.do'\r\n};\r\nlet pageCode = \"10100JTB_jobtype\";\r\nlet primaryKey = 'pk_jobtype'\r\n\r\n/**\r\n * 职务类别-全局\r\n */\r\nclass JobType extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //主动事件，绑定this指针\r\n        this.initButtonStatus = this.initButtonStatus.bind(this);\r\n        this.changeButtonStatus = this.changeButtonStatus.bind(this);\r\n        this.dealTreeData = this.dealTreeData.bind(this);\r\n        //显示停用复选框的状态标志\r\n        this.state = {\r\n            checked: false,\r\n            disabledSearch: false,\r\n            isDisabled: false,\r\n            count: 0,\r\n            json: {}\r\n        }\r\n        //自定义根节点\r\n        this.root = {\r\n            \"isleaf\": false,\r\n            \"key\": \"root\",\r\n            \"title\": this.state.json['10100JTB-000000'],/* 国际化处理： 职务类别*/\r\n            \"id\": \"root\",\r\n            \"innercode\": \"root\",\r\n            \"pid\": \"\",\r\n            \"refname\": this.state.json['10100JTB-000000'],/* 国际化处理： 职务类别*/\r\n            \"refpk\": \"~\"\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * 处理树数据\r\n     * @param data\r\n     * @returns {*}\r\n     */\r\n    dealTreeData(data) {\r\n        //应测试要求：职务类别集团节点当中，全局的数据不能有删除以及修改按钮\r\n        let noEditDelData = []\r\n\r\n        let deleteDataChildrenProp = node => {\r\n            if (node.id != 'root' && node.nodeData.pk_org == 'GLOBLE00000000000000' && this.props.nodeType != 'global') {\r\n                noEditDelData.push({\r\n                    key: node.key,\r\n                    value: {\r\n                        editIcon: false,\r\n                        delIcon: false\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (!node.children || node.children.length == 0) {\r\n\r\n                delete node.children;\r\n            }\r\n            else {\r\n                node.isLeaf = false;\r\n                node.children.forEach((e) => {\r\n                    deleteDataChildrenProp(e);\r\n                });\r\n            }\r\n        };\r\n        data.forEach((e) => {\r\n            deleteDataChildrenProp(e);\r\n        });\r\n\r\n        return noEditDelData;\r\n    }\r\n\r\n    initTemplate = (props) => {\r\n        props.createUIDom(\r\n            {\r\n                pagecode: this.props.pageCode//页面id\r\n                // appid: appId,//注册按钮的id\r\n                // appcode: '10100JTB'\r\n            },\r\n            data => {\r\n                if (data) {\r\n                    if (data.template) {\r\n                        let meta = data.template;\r\n                        this.modifierMeta(props, meta)\r\n                        props.meta.setMeta(meta);\r\n                    }\r\n                    if (data.button) {\r\n                        let button = data.button;\r\n                        props.button.setButtons(button, () => {\r\n                            this.initButtonStatus(props)\r\n                            this.setState({ count: this.state.count + 1 })\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    modifierMeta(props, meta) {\r\n        if (this.props.relFunCode == '10100JTB') {\r\n            //设置查询区职务类别参照只能选择全局的职务类别\r\n            meta[formId].items.find(item => item.attrcode == 'father_pk').queryCondition = () => {\r\n                return {\r\n                    pk_org: 'GLOBLE00000000000000'\r\n                }\r\n            }\r\n        }\r\n        return meta;\r\n\r\n    }\r\n\r\n    /**\r\n     * react 生命周期函数 组件渲染完后触发事件\r\n     */\r\n    componentDidMount() {\r\n        let callback = (json, status, inlt) => {\r\n            if (status) {\r\n                this.setState({ json, inlt }, () => {\r\n                    this.initTemplate(this.props)\r\n                })       // 保存json和inlt到页面state中并刷新页面\r\n            }\r\n        }\r\n        this.props.MultiInit.getMultiLang({ moduleId: this.props.relFunCode, domainName: 'uapbd', callback })\r\n\r\n        /**************\r\n         * 构造请求参数\r\n         * @type {{checked: boolean}}\r\n         *************/\r\n        let requestParam = { checked: this.state.checked, nodeType: this.props.nodeType };\r\n\r\n        /*************\r\n         * ajax请求 加载树数据\r\n         *************/\r\n        ajax({\r\n\r\n            url: urlArray.loadTreeDataUrl,\r\n            data: requestParam,\r\n            success: (result) => {\r\n                if (result.success) {\r\n                    this.root.refname = this.state.json['10100JTB-000000']\r\n                    this.root.title = this.state.json['10100JTB-000000']\r\n                    let data = [Object.assign({ ...this.root }, { children: result.data })];\r\n                    //同步树  加载全部数据\r\n                    let noEditDelData = this.dealTreeData(data)\r\n                    this.props.syncTree.setSyncTreeData(treeId, data)\r\n                    //展开节点  设置默认展开项\r\n                    this.props.syncTree.openNodeByPk(treeId, this.root.refpk);\r\n\r\n                    this.props.syncTree.setIconVisible(treeId, noEditDelData)\r\n                    //修改按钮状态\r\n                    this.initButtonStatus();\r\n                    this.props.form.setFormStatus(formId, 'browse')\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * 页面初始设置button状态\r\n     * @param props\r\n     */\r\n    initButtonStatus() {\r\n        this.props.button.setButtonVisible(['Save', '', 'SaveAdd', 'Cancel'], false);\r\n        this.props.button.setButtonDisabled({ Print: true, Output: true })\r\n    }\r\n\r\n    /**\r\n     * 点击树节点\r\n     * @param refpk\r\n     */\r\n    onSelectTree(refpk) {\r\n\r\n        //记录一下选中节点的refPK,为打印做准备\r\n        this.refPk = refpk\r\n        //编辑态  树节点操作无效  应该提供一个接口，编辑态任何操作都不能动\r\n        let status = this.props.form.getFormStatus(formId);\r\n        if (status == 'edit') {\r\n            return;\r\n        }\r\n\r\n        if (refpk == '~') {\r\n            //清空表单\r\n            this.props.form.EmptyAllFormValue(formId);\r\n            this.props.button.setButtonDisabled({ Print: true, Output: true })\r\n            return;\r\n        }\r\n        /********************************\r\n         * ajax 请求选择的树节点数据\r\n         ********************************/\r\n        let data = {}\r\n        data[primaryKey] = refpk\r\n        ajax({\r\n            url: urlArray.queryCardUrl,\r\n            data,\r\n            success: (result) => {\r\n\r\n                if (result.success) {\r\n                    //表单数据\r\n                    let headData = result.data[formId].rows[0].values;\r\n                    if (headData.hasOwnProperty('enablestate')) {\r\n                        let enablestateValue = headData.enablestate.value;\r\n                        //根据表单项enablestate的值修改开关状态\r\n                        if (enablestateValue == '2') {\r\n                            result.data[formId].rows[0].values.enablestate.value = true;\r\n                        } else {\r\n                            result.data[formId].rows[0].values.enablestate.value = false;\r\n                        }\r\n                    }\r\n                    // \r\n                    // if(headData.pk_parent.display == 'root'){\r\n                    //     result.data.head.rows[0].values.pk_parent.display = '';\r\n                    //     result.data.head.rows[0].values.pk_parent.value='';\r\n                    // }\r\n                    //清空表单\r\n                    this.props.form.EmptyAllFormValue(formId);\r\n                    //设置表单为所选树节点数据\r\n                    let formData = {}\r\n                    formData[formId] = result.data[formId]\r\n                    this.props.form.setAllFormValue(formData);\r\n                    //设置表单项enablestate可用\r\n                    //this.props.form.setFormItemsDisabled(formId,{enablestate:false});\r\n                    //modified wh 20180713\r\n                    //集团节点，全局级数据的停启用按钮不可编辑，置灰处理\r\n                    let enableEditable = false\r\n                    if(this.props.nodeType == 'group' && result.data[formId].rows[0].values.pk_org.value == 'GLOBLE00000000000000') {\r\n                        enableEditable = true\r\n                    }\r\n                    this.props.form.setFormItemsDisabled(formId, { enablestate: enableEditable });\r\n                    this.props.button.setButtonDisabled({ Print: false, Output: false })\r\n\r\n                    if(result.formulamsg && result.formulamsg instanceof Array && result.formulamsg.length > 0) {\r\n                        this.props.dealFormulamsg(\r\n                            result.formulamsg,{\r\n                                [formId]: 'form'\r\n                            }\r\n                        )\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 表单编辑事件\r\n     * @param props\r\n     * @param moduleId\r\n     * @param key\r\n     * @param value\r\n     * @param index\r\n     */\r\n    onAfterFormEvent(props, moduleId, key, value, index) {\r\n        switch (key) {\r\n            case \"enablestate\":\r\n\r\n                //获得选中节点\r\n                let selectedTreeNode = this.props.syncTree.getSelectNode(treeId);\r\n\r\n                if (!selectedTreeNode || selectedTreeNode.refpk == '~') {\r\n                    let content = value.value ? this.state.json['10100JTB-000001'] : this.state.json['10100JTB-000002'];/* 国际化处理： 请选中需要启用的树节点,请选中需要停用的树节点*/\r\n                    toast({ content: content, color: 'warning' })\r\n                    return;\r\n                }\r\n                let requestParam = { enablestate: value.value ? '2' : '1' };\r\n                requestParam[primaryKey] = selectedTreeNode.refpk\r\n                let pk_org = selectedTreeNode.nodeData.pk_org\r\n\r\n                promptBox({\r\n                    color: 'warning',               // 提示类别默认\"success\"， \"success\"/\"info\"/\"warning\"/\"danger\",非必输\r\n                    title: this.state.json['10100JTB-000003'],                // 提示标题, 默认不同类别下分别为：\"已成功\"/\"帮助信息\"/\"请注意\"/\"出错啦\",非必输/* 国际化处理： 提示*/\r\n                    content: value.value ? this.state.json['10100JTB-000004'] : this.state.json['10100JTB-000005'],             // 提示内容,非必输/* 国际化处理： 确认启用该数据？,您确定要停用所选数据及其所有下级数据吗？*/\r\n                    noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输\r\n                    noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输\r\n                    beSureBtnName: this.state.json['10100JTB-000006'],          // 确定按钮名称, 默认为\"确定\",非必输/* 国际化处理： 确定*/\r\n                    cancelBtnName: this.state.json['10100JTB-000007'],           // 取消按钮名称, 默认为\"取消\",非必输/* 国际化处理： 取消*/\r\n                    beSureBtnClick: () => {\r\n                        if (!this.judgeOperateWithToast(pk_org)) {\r\n                            props.form.setFormItemsValue(formId, { 'enablestate': { value: !value.value } });\r\n                            return\r\n                        }\r\n                        ajax({\r\n                            url: urlArray.enablestateUrl,\r\n                            data: requestParam,\r\n                            success: (result) => {\r\n                                toast({ content: value.value ? this.state.json['10100JTB-000008'] : this.state.json['10100JTB-000009'], title: this.state.json['10100JTB-000003'] });/* 国际化处理： 启用成功,停用成功,提示*/\r\n\r\n                            },\r\n                            error: (res) => {\r\n                                props.form.setFormItemsValue(formId, { 'enablestate': { value: !value.value } });\r\n                                toast({ color: 'danger', content: res.message });\r\n                            }\r\n                        });\r\n                    },\r\n                    cancelBtnClick: () => {\r\n                        //modified wh 20180716\r\n                        props.form.setFormItemsValue(formId, { 'enablestate': { value: !value.value } });\r\n                    },\r\n                    closeBtnClick: () => {\r\n                        //modified wh 20180716\r\n                        props.form.setFormItemsValue(formId, { 'enablestate': { value: !value.value } });\r\n                    }\r\n                })\r\n\r\n\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        //some code\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let formStatus = this.props.form.getFormStatus(formId);\r\n        if (formStatus != 'add' && formStatus != \"edit\") {\r\n            window.onbeforeunload = null;\r\n        } else {\r\n            window.onbeforeunload = () => {//编辑态关闭页签或浏览器的提示\r\n                return '';\r\n            };\r\n        }\r\n    }\r\n\r\n    onBeforeFormEvent(props, moduleId, key, value, data) {\r\n        let formStatus = this.props.form.getFormStatus(formId)\r\n        if (formStatus != 'edit' && !data.pk_jobtype.value) {\r\n            return false\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    onAddJobType(selectNode) {\r\n\r\n        let requestParam = {};//请求参数对象\r\n\r\n        if (selectNode) {\r\n            //存在选中节点，设置父节点pk为选中节点refpk\r\n\r\n            requestParam['pk_parent'] = selectNode.refpk;\r\n        } else {\r\n            //不存在选中节点，设置父节点为根节点refpk\r\n            requestParam['pk_parent'] = this.root.refpk;\r\n        }\r\n\r\n        requestParam.nodeType = this.props.nodeType\r\n\r\n        ajax({\r\n            url: urlArray.addCardUrl,\r\n            data: requestParam,\r\n            success: (result) => {\r\n                if (result.success) {\r\n                    //清空表单数据\r\n                    this.props.form.EmptyAllFormValue(formId);\r\n                    //设置表单为编辑态\r\n                    this.props.form.setFormStatus(formId, 'edit');\r\n                    //设置新增默认值\r\n                    this.props.form.setAllFormValue({ [formId]: result.data[formId] });\r\n                    //设置表单项不可用\r\n                    this.props.form.setFormItemsDisabled(formId, { enablestate: true });\r\n\r\n                    this.props.syncTree.setNodeDisable(treeId, true);//编辑时设置整棵树不可用\r\n                    this.changeButtonStatus(selectNode, 'add');\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    judgeOperateWithToast(pk_group) {\r\n        let returnResult = this.canOperate(pk_group)\r\n        if (!returnResult) {\r\n            let toastInfo = { color: 'warning', content: this.props.nodeType == 'global' ? this.state.json['10100JTB-000010'] : this.state.json['10100JTB-000011'] }/* 国际化处理： 全局节点只能维护全局的数据！,集团节点只能维护当前登录集团的数据！*/\r\n            toast(toastInfo)\r\n        }\r\n\r\n        return returnResult\r\n    }\r\n\r\n    canOperate(pk_group) {\r\n        return (this.props.nodeType == 'global' && pk_group == 'GLOBLE00000000000000') || (this.props.nodeType == 'group' && pk_group != 'GLOBLE00000000000000')\r\n    }\r\n\r\n    /**\r\n     * 编辑\r\n     */\r\n    onEditJobType(selectedTreeNode) {\r\n        /**************************************************\r\n         *\r\n         * 编辑：\r\n         *      1、构造请求参数\r\n         *      2、ajax请求，后台查询需要编辑的对象\r\n         *      3、回调，设置表单数据为编辑的对象\r\n         *\r\n         * 编辑状态下：\r\n         *      只有 保存  取消 按钮 显示\r\n         *\r\n         *\r\n         **************************************************/\r\n        /****未选中提示***/\r\n        let NCMessage = base.NCMessage\r\n        if (!selectedTreeNode) {\r\n\r\n            Message.create({ content: this.state.json['10100JTB-000012'], color: 'warning' });//默认top/* 国际化处理： 请选中需要编辑的节点*/\r\n            return;\r\n\r\n        }\r\n        let pk_org = selectedTreeNode.nodeData.pk_org\r\n        if (!this.judgeOperateWithToast(pk_org)) {\r\n            return\r\n        }\r\n\r\n        /***ajax请求***/\r\n        let data = {}\r\n        data[primaryKey] = selectedTreeNode.refpk\r\n        data.nodeType = this.props.nodeType\r\n        data.checkPermission = true\r\n        ajax({\r\n            url: urlArray.queryCardUrl,\r\n            data,\r\n            success: (result) => {\r\n\r\n                if (result.success) {\r\n                    let permissionInfo = JSON.parse(result.data.userjson)\r\n                    if (permissionInfo.hasPerm) {\r\n                        this.props.syncTree.setNodeDisable(treeId, true);//编辑时设置整棵树不可用\r\n\r\n                        //设置表单数据\r\n                        this.props.form.setAllFormValue({ [formId]: result.data[formId] });\r\n                        this.props.form.setFormItemsDisabled(formId, { enablestate: true });//设置表单项不可用\r\n                        //设置表单状态为编辑态\r\n                        this.props.form.setFormStatus(formId, 'edit');\r\n                        this.changeButtonStatus(selectedTreeNode, 'edit');\r\n                    }\r\n                    else {\r\n                        toast({ color: 'warning', content: this.state.json['10100JTB-000013'] })/* 国际化处理： 您没有对此数据执行该操作的权限!*/\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * 保存\r\n     */\r\n    onSaveJobType() {\r\n\r\n\r\n        let selectedTreeNode = this.props.syncTree.getSelectNode(treeId);//获得选中节点\r\n        // if(!selectedTreeNode){\r\n        //     alert('请选中节点');\r\n        //     return;\r\n        // }\r\n\r\n\r\n        let requestParam = {};\r\n        /**************************************************\r\n         *\r\n         * 保存：\r\n         *     1、获取表单对象\r\n         *     2、构造请求参数模型\r\n         *     3、ajax请求，后台根据表单对象主键执行保存或更新操作\r\n         *     4、回调，刷新当前树节点的父节点\r\n         *\r\n         * 保存状态下：\r\n         *      恢复到浏览态，根据当前选中的树节点决定按钮的可见性和可操作性\r\n         *\r\n         **************************************************/\r\n        let formData = this.props.form.getAllFormValue(formId);//获得表单信息\r\n\r\n\r\n        /**\r\n         * 表单校验区域\r\n         */\r\n\r\n\r\n\r\n        /****\r\n         * 构造参数\r\n         * @type {string}\r\n         */\r\n        formData.areacode = formId;//添加表单的areacode编码\r\n        formData.rows['status'] = '2';//设置状态\r\n\r\n        // formData.rows[0].values.eps_code.value = selectedTreeNode.nodeData.pcode + formData.rows[\"0\"].values.eps_code.value;\r\n        /***设置请求参数***/\r\n        requestParam = {\r\n            model: formData,\r\n            pageid: pageCode//pageid : 我们导出的模板的名字  也就是 json数据的最外层的code值\r\n            //pcode: selectedTreeNode.nodeData.pcode\r\n        };\r\n\r\n        /****判断刷新父节点，还是刷新选中节点****/\r\n        /************************************\r\n         * 如果是新增，就刷新当前选中节点\r\n         * 如果是编辑，就刷新当前节点的父节点\r\n         *\r\n         ************************************/\r\n        var pk = null;\r\n        if (formData.rows[0].values.hasOwnProperty(primaryKey)) {\r\n\r\n            pk = formData.rows[0].values[primaryKey].value;//当前表单有pk:update 刷新父节点；没有pk:save 刷新当前节点\r\n\r\n        }\r\n        let nonPk = false;//没有主键  false时就是有主键  即编辑 即刷新父节点\r\n        if (pk == null || pk == '') {\r\n            nonPk = true;// true时 就是无主键 即 新增  即刷新当前节点\r\n        }\r\n        //ajax请求\r\n        this.props.validateToSave(requestParam, () => {\r\n            ajax({\r\n                url: urlArray.saveCardUrl,\r\n                data: requestParam,\r\n                success: (result) => {\r\n                    if (result.success) {\r\n                        //设置表单浏览态\r\n    \r\n                        this.props.form.setFormStatus(formId, 'browse');\r\n                        //设置树可用\r\n                        this.props.syncTree.setNodeDisable(treeId, false);\r\n                        if (!result.data[0].children || result.data[0].children.length == 0) {\r\n                            delete result.data[0].children;\r\n                        }\r\n    \r\n                        result.data.forEach(item => {\r\n                            item.iconBox = {\r\n                                addIcon: true,\r\n                                editIcon: true,\r\n                                delIcon: true\r\n                            }\r\n                        })\r\n                        if (nonPk) {\r\n    \r\n                            //新增回调后添加\r\n                            this.props.syncTree.addNodeSuccess(treeId, result.data);\r\n                        } else {\r\n    \r\n                            //修改回调后修改\r\n                            this.props.syncTree.editNodeSuccess(treeId, result.data[0]);\r\n                        }\r\n                        //展开树节点\r\n                        this.props.syncTree.openNodeByPk(treeId, result.data[0].pid);\r\n    \r\n                        this.props.syncTree.setNodeSelected(treeId, result.data[0].refpk);\r\n                        //设置表单项可用\r\n                        this.props.form.setFormItemsDisabled(formId, { enablestate: false });\r\n                        this.changeButtonStatus(selectedTreeNode, 'save');\r\n    \r\n                        //修正一个BUG：上面的setNodeSelected不会重新走树节点选中的回调，所以导致\r\n                        //新增保存后form当中获取不到主键，停启用不能使用。此处手动设置一下\r\n                        this.props.form.setFormItemsValue(formId, { 'pk_jobtype': { value: result.data[0].refpk, display: \"\" } })\r\n                    }\r\n    \r\n                }\r\n            });\r\n        }, {[formId]: \"form\"})\r\n\r\n    }\r\n\r\n    /**\r\n     * 保存新增保存新增\r\n     */\r\n    onSaveAddJobType() {\r\n\r\n        let selectedTreeNode = this.props.syncTree.getSelectNode(treeId);//获得选中节点\r\n        let requestParam = {};\r\n        /**************************************************\r\n         *\r\n         * 保存：\r\n         *     1、获取表单对象\r\n         *     2、构造请求参数模型\r\n         *     3、ajax请求，后台根据表单对象主键执行保存或更新操作\r\n         *     4、回调，刷新当前树节点的父节点\r\n         *\r\n         * 保存状态下：\r\n         *      恢复到浏览态，根据当前选中的树节点决定按钮的可见性和可操作性\r\n         *\r\n         **************************************************/\r\n        let formData = this.props.form.getAllFormValue(formId);//获得表单信息\r\n        formData.areacode = formId;//添加表单的areacode编码\r\n        formData.rows['status'] = '2';//设置状态\r\n\r\n        /***设置请求参数***/\r\n        requestParam = {\r\n            model: formData,\r\n            pageid: pageCode//pageid : 我们导出的模板的名字  也就是 json数据的最外层的code值\r\n        };\r\n\r\n        /****判断刷新父节点，还是刷新选中节点****/\r\n        /************************************\r\n         * 如果是新增，就刷新当前选中节点\r\n         * 如果是编辑，就刷新当前节点的父节点\r\n         *\r\n         ************************************/\r\n        var pk = null;\r\n\r\n        if (formData.rows[0].values.hasOwnProperty('pk_eps')) {\r\n\r\n            pk = formData.rows[0].values.pk_eps.value;//当前表单有pk:update 刷新父节点；没有pk:save 刷新当前节点\r\n\r\n        }\r\n        let nonPk = false;//没有主键  false时就是有主键  即编辑 即刷新父节点\r\n        if (pk == null || pk == '') {\r\n            nonPk = true;// true时 就是无主键 即 新增  即刷新当前节点\r\n\r\n        }\r\n\r\n        /***ajax请求***/\r\n        ajax({\r\n            url: urlArray.saveCardUrl,\r\n            data: requestParam,\r\n            //modified wh 20180713 \r\n            async: false,\r\n            success: (result) => {\r\n                /**********\r\n                 *\r\n                 * 这里的代码可以精简，临时先这样，逻辑思路是一样的\r\n                 *\r\n                 *\r\n                 *********/\r\n                if (result.success) {\r\n                    //设置表单为浏览态\r\n                    this.props.form.setFormStatus(formId, 'browse');\r\n                    if (!result.data[0].children || result.data[0].children.length == 0) {\r\n                        delete result.data[0].children;\r\n                    }\r\n                    //add wh 20180713\r\n                    result.data.forEach(item => {\r\n                        item.iconBox = {\r\n                            addIcon: true,\r\n                            editIcon: true,\r\n                            delIcon: true\r\n                        }\r\n                    })\r\n                    //add end\r\n                    //新增回调后添加\r\n                    this.props.syncTree.addNodeSuccess(treeId, result.data);\r\n                    this.props.syncTree.openNodeByPk(treeId, result.data[0].pid);\r\n\r\n                    //判断 选中节点如果消失，重新设置新增节点的父节点为选中节点，然后重新获取选中节点\r\n                    if (!selectedTreeNode) {\r\n                        this.props.syncTree.setNodeSelected(treeId, result.data[0].pid);\r\n                        selectedTreeNode = this.props.syncTree.getSelectNode(treeId);//获得选中节点\r\n                    }\r\n\r\n                    //重新设置整棵树不可用\r\n                    this.props.syncTree.setNodeDisable(treeId, true);\r\n\r\n                    //判断是否有选中节点\r\n                    if (!selectedTreeNode) {\r\n                        //如果没有默认加载根节点下面\r\n                        requestParam = {\r\n                            pk_parent: this.root.refpk\r\n                        };\r\n                    } else {\r\n                        requestParam = {\r\n                            pk_parent: selectedTreeNode.refpk\r\n                        };\r\n                    }\r\n\r\n                    requestParam.nodeType = this.props.nodeType\r\n                    //ajax请求\r\n                    ajax({\r\n                        url: \"/nccloud/uapbd/jobtype/addJobtype.do\",\r\n                        data: requestParam,\r\n                        //modified wh 20180713\r\n                        //async: false,\r\n                        //注释掉async，因为会影响表单上职务类别概要的清空 modified by wangying16 for NCCLOUD-95821 2018/12/12\r\n                        success: (result) => {\r\n                            if (result.success) {\r\n\r\n                                //清空表单数据\r\n                                this.props.form.EmptyAllFormValue(formId);\r\n                                //新增成功，设置表单默认值\r\n                                this.props.form.setAllFormValue({ [formId]: result.data[formId] });\r\n                                //设置表单为编辑态\r\n                                this.props.form.setFormStatus(formId, 'edit');\r\n                            }\r\n                        }\r\n\r\n                    })\r\n                }\r\n\r\n\r\n            }\r\n        });\r\n        this.changeButtonStatus(selectedTreeNode, 'saveAdd');\r\n\r\n    }\r\n\r\n    /**\r\n     * 删除\r\n     */\r\n    onDeleteJobType(selectedTreeNode) {\r\n\r\n        let requestParam = {};\r\n\r\n        //做个过滤条件，全局只能维护全局数据，集团只能维护集团数据\r\n        let pk_org = selectedTreeNode.nodeData.pk_org\r\n        if (!this.judgeOperateWithToast(pk_org)) {\r\n            return\r\n        }\r\n\r\n        /*******************************************\r\n         *\r\n         * 删除：\r\n         *      1、根据选中的树节点做出相应的提示\r\n         *      2、弹出删除确认提示\r\n         *      3、构造请求参数\r\n         *      4、ajax请求，后台执行删除\r\n         *      5、回调，执行前台删除动作\r\n         *\r\n         * 删除状态下：\r\n         *      清空表单对象数据，按钮全成Disabled状态\r\n         *\r\n         *******************************************/\r\n        if (!selectedTreeNode) {\r\n\r\n            Message.create({ content: this.state.json['10100JTB-000014'], color: 'warning' });//默认top/* 国际化处理： 请选中需要删除的节点*/\r\n            return;\r\n\r\n        }\r\n        if (selectedTreeNode.refpk == this.root.refpk) {\r\n            Message.create({ content: this.state.json['10100JTB-000015'], color: 'warning' });//默认top/* 国际化处理： 根节点不能删除*/\r\n            return;\r\n\r\n        }\r\n        let message = this.state.json['10100JTB-000016']/* 国际化处理： 确认要删除所选数据吗？*/\r\n\r\n        //删除前校验一下数据权限\r\n        ajax({\r\n            url: urlArray.delCheckUrl,\r\n            data: {\r\n                [primaryKey]: selectedTreeNode.refpk\r\n            },\r\n            success: res => {\r\n                promptBox({\r\n                    color: 'warning',               // 提示类别默认\"success\"， \"success\"/\"info\"/\"warning\"/\"danger\",非必输\r\n                    title: this.state.json['10100JTB-000017'],                // 提示标题, 默认不同类别下分别为：\"已成功\"/\"帮助信息\"/\"请注意\"/\"出错啦\",非必输/* 国际化处理： 确认删除*/\r\n                    content: message,             // 提示内容,非必输\r\n                    noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输\r\n                    noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输\r\n                    beSureBtnName: this.state.json['10100JTB-000006'],          // 确定按钮名称, 默认为\"确定\",非必输/* 国际化处理： 确定*/\r\n                    cancelBtnName: this.state.json['10100JTB-000007'],           // 取消按钮名称, 默认为\"取消\",非必输/* 国际化处理： 取消*/\r\n                    beSureBtnClick: () => {\r\n\r\n                        requestParam = {}\r\n\r\n                        requestParam[primaryKey] = selectedTreeNode.refpk\r\n                        let pid = selectedTreeNode.pid;\r\n                        ajax({\r\n                            url: urlArray.delTreeNodeUrl,\r\n                            data: requestParam,\r\n                            success: (result) => {\r\n                                if (result.success) {\r\n\r\n                                    this.props.form.EmptyAllFormValue(formId);\r\n                                    //调用异步树的接口，删除该树节点\r\n                                    this.props.asyncTree.delTreeData(treeId, selectedTreeNode.refpk);\r\n                                    toast({ content: this.state.json['10100JTB-000018'], title: this.state.json['10100JTB-000003'] });/* 国际化处理： 删除成功！,提示*/\r\n                                    //删除成功提示\r\n                                    // Message.create({content: '删除成功！', color: 'success'});//默认top\r\n                                    this.changeButtonStatus(selectedTreeNode, 'del');\r\n                                }\r\n\r\n                            }\r\n                        })\r\n                    }   // 确定按钮点击调用函数,非必输\r\n                })\r\n            },\r\n            error: res => {\r\n                toast({ color: 'warning', content: res.message })\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * 取消\r\n     */\r\n    onCancelJobType() {\r\n\r\n        //同步树 取消的逻辑\r\n        let selectedTreeNode = this.props.syncTree.getSelectNode(treeId);//获得选中节点\r\n        if (selectedTreeNode == null) {\r\n            this.props.form.EmptyAllFormValue(formId)\r\n            this.props.form.setFormStatus(formId, 'browse')\r\n            this.changeButtonStatus(null, 'cancel')\r\n            this.props.syncTree.setNodeDisable(treeId, false);\r\n            return\r\n        }\r\n        /**********************************************************\r\n         *\r\n         * 取消：\r\n         *      1、重新根据选中的树节点查询表单对象\r\n         *      2、回调，设置表单对象\r\n         *      3、设置按钮状态\r\n         *\r\n         **********************************************************/\r\n\r\n        /**********************************************************     \r\n         * modified by wangying16 on 2018/12/12 for NCCLOUD-95993\r\n         * 1.将会引起表单渲染的语句放到ajax请求内，防止请求未完毕时界面已渲染导致无数据\r\n         * 2.当选中了树节点时，修改表单项停启用状态可用，同NC保持一致。\r\n         **********************************************************/\r\n\r\n        let data = {}\r\n        data[primaryKey] = selectedTreeNode.refpk\r\n        if (selectedTreeNode && selectedTreeNode.refpk != '~') {\r\n            //查询节点信息\r\n            ajax({\r\n                url: urlArray.queryCardUrl,\r\n                data,\r\n                success: (result) => {\r\n\r\n                    if (result.success) {\r\n                        this.props.form.setFormItemsDisabled(formId, { enablestate: false });\r\n                        this.props.form.setAllFormValue({ [formId]: result.data[formId] });\r\n                        this.props.form.setFormStatus(formId, 'browse');\r\n                        //设置树可用\r\n                        this.props.syncTree.setNodeDisable(treeId, false);\r\n                        //设置按钮状态\r\n                        this.changeButtonStatus(selectedTreeNode, 'cancel');\r\n\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            //没有选中项  清空所有数据\r\n            this.props.form.EmptyAllFormValue(formId);\r\n            this.props.form.setFormStatus(formId, 'browse');\r\n            //设置树可用\r\n            this.props.syncTree.setNodeDisable(treeId, false);\r\n            //设置按钮状态\r\n            this.changeButtonStatus(selectedTreeNode, 'cancel');\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 更多按钮点击更多选项时触发事件\r\n     * @param key\r\n     */\r\n    onMoreSelect({ key }) {\r\n        if (key == 'start') {\r\n            this.onStartEps();\r\n        } else if (key == 'stop') {\r\n            this.onStopEps();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 按钮点击状态切换监听事件\r\n     * @param id\r\n     */\r\n    changeButtonStatus(selectedTreeNode, id) {\r\n        switch (id) {\r\n            case 'add':\r\n            case 'saveAdd':\r\n                this.props.button.setButtonVisible(['Save', 'SaveAdd', 'Cancel'], true)\r\n                this.props.button.setButtonVisible(['Print', 'Output', 'Refresh'], false)\r\n                this.setState({\r\n                    disabledSearch: true,\r\n                    isDisabled: true\r\n                })\r\n                break;\r\n            case 'edit':\r\n                this.props.button.setButtonVisible(['Save', 'Cancel'], true)\r\n                this.props.button.setButtonVisible(['SaveAdd', 'Print', 'Output', 'Refresh'], false)\r\n                this.setState({\r\n                    disabledSearch: true,\r\n                    isDisabled: true\r\n                })\r\n                break;\r\n            case 'del':\r\n                this.props.button.setButtonVisible(['Save', 'SaveAdd', 'Cancel'], false)\r\n                break;\r\n            case 'save':\r\n            case 'cancel':\r\n                this.props.button.setButtonVisible(['Save', 'SaveAdd', 'Cancel'], false)\r\n                this.props.button.setButtonVisible(['Print', 'Output', 'Refresh'], true)\r\n                this.setState({\r\n                    disabledSearch: false,\r\n                    isDisabled: false\r\n                })\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 鼠标进入树节点事件\r\n     * @param key\r\n     */\r\n    onMouseEnterEve(key) {\r\n        //设置\r\n        if (key === this.root.refpk) {\r\n            let obj = {\r\n                delIcon: false, //false:隐藏； true:显示; 默认都为true显示\r\n                editIcon: false,\r\n                addIcon: true\r\n            };\r\n            this.props.syncTree.hideIcon(treeId, key, obj);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * enablestate change 事件\r\n     * @param checked\r\n     */\r\n    onChange(checked) {\r\n        let selectNode = this.props.syncTree.getSelectNode(treeId);//获得树节点选中项\r\n        let requestParam = {};\r\n        if (!selectNode) {\r\n            Message.create({ content: this.state.json['10100JTB-000019'], color: 'warning' });//默认top/* 国际化处理： 请选中树节点*/\r\n        }\r\n        requestParam['pk_eps'] = selectNode.refpk;\r\n        requestParam['enablestate'] = checked ? '2' : '1';\r\n        ajax({\r\n            url: \"\",\r\n            data: requestParam,\r\n            success: (result) => {\r\n                if (result.success) {\r\n                    if (checked) {\r\n                        //如果是选中 那就把数据再加载到表单\r\n                        this.props.form.setAllFormValue({ [formId]: result.data[formId] });\r\n                    } else {\r\n                        //如果不是选中那就清空表单\r\n                        this.props.form.EmptyAllFormValue(formId);\r\n                        this.props.syncTree.delNodeSuceess(treeId, selectNode.refpk);\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    onCheckBoxChange() {\r\n        console.log('checkboxchagned!')\r\n        let checked = !this.state.checked\r\n        this.setState({ checked: !this.state.checked });\r\n        this.props.form.EmptyAllFormValue(formId);//清空表单数据\r\n        let requestParam = {\r\n            checked: checked,\r\n            nodeType: this.props.nodeType\r\n        };\r\n        ajax({\r\n            url: urlArray.loadTreeDataUrl,\r\n            data: requestParam,\r\n            success: (result) => {\r\n                if (result.success) {\r\n                    this.root.refname = this.state.json['10100JTB-000000']\r\n                    this.root.title = this.state.json['10100JTB-000000']\r\n                    var data = [Object.assign({ ...this.root }, { children: result.data })],\r\n                        initLeaf = function (node) {\r\n                            if (!node.children || node.children.length == 0) {\r\n                                node.iconBox = {\r\n                                    addIcon: true,\r\n                                    editIcon: true,\r\n                                    delIcon: true\r\n                                }\r\n                                delete node.children;\r\n                            }\r\n                            else {\r\n                                node.isLeaf = false;\r\n                                node.iconBox = {\r\n                                    addIcon: true,\r\n                                    editIcon: true,\r\n                                    delIcon: true\r\n                                }\r\n                                node.children.forEach((e) => {\r\n                                    initLeaf(e);\r\n                                });\r\n                            }\r\n                        };\r\n\r\n                    data.forEach((e) => {\r\n                        initLeaf(e);\r\n                    });\r\n\r\n                    //同步树 加载全部数据\r\n                    this.props.syncTree.setSyncTreeData(treeId, data);\r\n                    //展开节点  设置默认展开项\r\n                    this.props.syncTree.openNodeByPk(treeId, this.root.refpk);\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    buttonClick(props, id) {\r\n        switch (id) {\r\n            case 'Save':\r\n                this.onSaveJobType()\r\n                break\r\n            case 'SaveAdd':\r\n                this.onSaveAddJobType()\r\n                break\r\n            case 'Cancel':\r\n                this.onCancelButtonClick()\r\n                break\r\n            case 'Refresh':\r\n                this.onRefreshButtonClick()\r\n                break\r\n            case 'Print':\r\n                this.output('print')\r\n                break;\r\n            case 'Output':\r\n                if (!this.refPk || this.refPk == '~') {\r\n                    toast({ content: this.state.json['10100JTB-000020'], color: 'warning' })/* 国际化处理： 请选择需要打印的节点！*/\r\n                    return\r\n                }\r\n                let pks = [];\r\n                pks.push(this.refPk)\r\n                this.setState({\r\n                    pks: pks\r\n                }, () => {\r\n                    this.refs.printOutput.open()\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n    output(type = '') {\r\n        if (!this.refPk || this.refPk == '~') {\r\n            toast({ content: this.state.json['10100JTB-000020'], color: 'warning' })/* 国际化处理： 请选择需要打印的节点！*/\r\n            return\r\n        }\r\n        let pks = [];\r\n        pks.push(this.refPk)\r\n        //原NC两个节点使用同一个打印模板，轻量端暂时也不做区分，传同一个编码\r\n        if (type != '') {\r\n            //打印\r\n            print(\r\n                'pdf',\r\n                urlArray.printUrl,\r\n                {\r\n                    funcode:/*this.props.config.funcode*/this.props.funcode,     //功能节点编码\r\n                    nodekey: 'jobtypeprint',     //模板节点标识\r\n                    oids: pks,\r\n                    outputType: type\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    onCancelButtonClick() {\r\n        //this.props.modal.show('cancel')\r\n        promptBox({\r\n            color: 'warning',               // 提示类别默认\"success\"， \"success\"/\"info\"/\"warning\"/\"danger\",非必输\r\n            title: this.state.json['10100JTB-000021'],                // 提示标题, 默认不同类别下分别为：\"已成功\"/\"帮助信息\"/\"请注意\"/\"出错啦\",非必输/* 国际化处理： 确认取消*/\r\n            content: this.state.json['10100JTB-000022'],             // 提示内容,非必输/* 国际化处理： 是否确认要取消？*/\r\n            noFooter: false,                // 是否显示底部按钮(确定、取消),默认显示(false),非必输\r\n            noCancelBtn: false,             // 是否显示取消按钮,，默认显示(false),非必输\r\n            beSureBtnName: this.state.json['10100JTB-000006'],          // 确定按钮名称, 默认为\"确定\",非必输/* 国际化处理： 确定*/\r\n            cancelBtnName: this.state.json['10100JTB-000007'],           // 取消按钮名称, 默认为\"取消\",非必输/* 国际化处理： 取消*/\r\n            beSureBtnClick: this.onCancelJobType.bind(this)   // 确定按钮点击调用函数,非必输\r\n        })\r\n    }\r\n\r\n    onCheckBoxClick() {\r\n        console.log('onCheckBoxClick')\r\n        if (!this.state.isDisabled) {\r\n            this.setState({ checked: !this.state.checked });\r\n            this.props.form.EmptyAllFormValue(formId);//清空表单数据\r\n        }\r\n    }\r\n\r\n    //add wh 20180713\r\n    onRefreshButtonClick() {\r\n        this.refreshTree()\r\n    }\r\n    //add end\r\n\r\n    //add wh 20180713\r\n    refreshTree() {\r\n\r\n        let requestParam = { checked: this.state.checked, nodeType: this.props.nodeType };\r\n\r\n        /*************\r\n         * ajax请求 加载树数据\r\n         *************/\r\n        ajax({\r\n\r\n            url: urlArray.loadTreeDataUrl,\r\n            data: requestParam,\r\n            success: (result) => {\r\n                if (result.success) {\r\n                    this.root.refname = this.state.json['10100JTB-000000']\r\n                    this.root.title = this.state.json['10100JTB-000000']\r\n                    let data = [Object.assign({ ...this.root }, { children: result.data })];\r\n                    let noEditDelData = this.dealTreeData(data)\r\n                    //同步树  加载全部数据\r\n                    this.props.syncTree.setSyncTreeData(treeId, data);\r\n                    //展开节点  设置默认展开项\r\n                    this.props.syncTree.openNodeByPk(treeId, this.root.refpk);\r\n\r\n                    this.props.syncTree.setIconVisible(treeId, noEditDelData)\r\n                    //修改按钮状态\r\n                    this.initButtonStatus();\r\n                    toast({ title: this.state.json['10100JTB-000028'], color: \"success\" });/* 国际化处理： 刷新成功*/\r\n                }\r\n            }\r\n        })\r\n    }\r\n    //add end\r\n\r\n\r\n    /**\r\n     * 渲染\r\n     * @returns {*}\r\n     */\r\n    render() {\r\n        const { asyncTree, syncTree, form, button, modal, search, DragWidthCom } = this.props;\r\n        //DragWidthCom 平台出的左右布局的组件  专用于树卡和树表\r\n        const { createAsyncTree } = asyncTree;//创建异步树，需要引入这个\r\n        const { createSyncTree } = syncTree;//创建同步树 需要引入这个\r\n        const { createForm } = form;//创建表单，需要引入这个\r\n\r\n        const { createButtonApp } = button;\r\n\r\n        let { createModal } = modal;  //模态框\r\n\r\n        const { NCCreateSearch } = search;\r\n        const menu1 = (\r\n            <Menu\r\n                onSelect={this.onMoreSelect.bind(this)}>\r\n                <Item key=\"start\">{this.state.json['10100JTB-000025']/* 国际化处理： 启用*/}</Item>\r\n                <Item key=\"stop\">{this.state.json['10100JTB-000026']/* 国际化处理： 停用*/}</Item>\r\n            </Menu>\r\n        );\r\n        return (\r\n\r\n            <div>\r\n                {createModal('modal', { noFooter: false })}\r\n                {createModal('cancel', {\r\n                    title: this.state.json['10100JTB-000021'],/* 国际化处理： 确认取消*/\r\n                    content: this.state.json['10100JTB-000022'],/* 国际化处理： 是否确认要取消？*/\r\n                    beSureBtnClick: this.onCancelJobType.bind(this)\r\n                })}\r\n                {/* 头部 header*/}\r\n                <div className=\"header\">\r\n                    {/* 标题 title*/}\r\n                    <div className=\"title\">{this.props.nodeType == 'global' ? this.state.json['10100JTB-000023'] : this.state.json['10100JTB-000024']/* 国际化处理： 职务类别-全局,职务类别-集团*/}</div>\r\n                    <span className=\"showOff\">\r\n                        <Checkbox\r\n\r\n                            defaultChecked={false}\r\n                            checked={this.state.checked}\r\n                            onChange={this.onCheckBoxChange.bind(this)}\r\n                            disabled={this.state.isDisabled}\r\n                            size=\"lg\"\r\n                        >\r\n                            {this.state.json['10100JTB-000027']/* 国际化处理： 显示停用*/}\r\n                        </Checkbox>\r\n                    </span>\r\n\r\n                    {/* 按钮组 btn-group*/}\r\n                    <div className=\" btn-group\">\r\n                        {createButtonApp({\r\n                            area: 'header-action',\r\n                            buttonLimit: 3,\r\n                            onButtonClick: this.buttonClick.bind(this),\r\n                        })}\r\n\r\n                    </div>\r\n                </div>\r\n                {/* 树卡区域 */}\r\n                <div className=\"tree-card\">\r\n\r\n                    <DragWidthCom\r\n                        // 左树区域\r\n                        leftDom={\r\n                            <div className=\"tree-area\">\r\n                                {createSyncTree({\r\n                                    treeId: treeId,\r\n                                    needEdit: true, //不启用编辑\r\n                                    showLine: false, //显示连线\r\n                                    needSearch: true, //是否需要搜索框\r\n                                    //onSelectedChange: this.onSelectTreeNodeChange.bind(this),//选择改变\r\n                                    onSelectEve: this.onSelectTree.bind(this),//选择\r\n                                    onMouseEnterEve: this.onMouseEnterEve.bind(this),\r\n                                    clickEditIconEve: this.onEditJobType.bind(this), //编辑点击 回调\r\n                                    clickAddIconEve: this.onAddJobType.bind(this), //新增点击 回调\r\n                                    clickDelIconEve: this.onDeleteJobType.bind(this), // 删除点击 回调\r\n                                    showModal: false,\r\n                                    disabledSearch: this.state.disabledSearch || false\r\n\r\n                                })}\r\n                            </div>}     //左侧区域dom\r\n                        // 右卡片区域\r\n                        rightDom={\r\n                            <div className=\"card-area\">\r\n                                {createForm(formId, {\r\n                                    cancelPSwitch: true,\r\n                                    onAfterEvent: this.onAfterFormEvent.bind(this),\r\n                                    onBeforeEvent: this.onBeforeFormEvent.bind(this)\r\n                                })\r\n                                }\r\n                            </div>}     //右侧区域dom\r\n\r\n                        defLeftWid='280px'      // 默认左侧区域宽度，px/百分百\r\n                    />\r\n                </div>\r\n\r\n                <PrintOutput\r\n                    ref='printOutput'\r\n                    url={urlArray.printUrl}\r\n                    data={{\r\n                        funcode: this.props.funcode,\r\n                        nodekey: 'jobtypeprint',\r\n                        oids: this.state.pks,\r\n                        outputType: 'output'\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default JobType\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;"],"sourceRoot":""}